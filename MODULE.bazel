# This file marks a workspace root for the Bazel build system.
# See `https://bazel.build/`.

# This file lists Drake's external dependencies as known to bzlmod. It is used
# in concert with WORKSPACE.bzlmod (which has the workspace-style externals).

module(
    name = "drake",
    # This version number should match MINIMUM_BAZEL_VERSION in CMakeLists.txt.
    bazel_compatibility = [">=8.0.1"],
)

# Add starlark rules.

bazel_dep(name = "apple_support", version = "1.23.1", repo_name = "build_bazel_apple_support")  # noqa
bazel_dep(name = "bazel_features", version = "1.35.0")
bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_cc", version = "0.2.3")
bazel_dep(name = "rules_java", version = "8.15.2")
bazel_dep(name = "rules_license", version = "1.0.0")
bazel_dep(name = "rules_python", version = "1.6.0")
bazel_dep(name = "rules_rust", version = "0.64.0")
bazel_dep(name = "rules_shell", version = "0.6.0")

single_version_override(
    module_name = "rules_cc",
    patches = [
        "@drake//tools/workspace/rules_cc:patches/upstream/pr456.patch",
    ],
)

# Customize our toolchains.

cc_configure = use_extension(
    "@rules_cc//cc:extensions.bzl",
    "cc_configure_extension",
)
use_repo(cc_configure, "local_config_cc")

# Add C++ dependencies that are part of our public API.
#
# We declare these dependencies twice -- as modules (bazel_dep) and repository
# rules (pkgconfig). The choice of whether module vs pkgconfig will be used is
# governed by the flags declared at drake/tools/flags/BUILD.bazel.
#
# For our CMake builds from source, the "WITH_USER_..." CMake options to choose
# the flavor are translated into the matching Bazel flags.
#
# For wheel builds, the module flavor is always used.
#
# For Bazel builds using Drake as an external, the module flavor is used by
# default but can be changed using the Bazel flags.
#
# For first-party Bazel builds (by Drake Developers), the pkgconfig flavor is
# used by default but can be changed using the Bazel flags.

bazel_dep(name = "eigen", version = "3.4.0.bcr.3", repo_name = "module_eigen")
bazel_dep(name = "fmt", version = "11.2.0", repo_name = "module_fmt")
bazel_dep(name = "spdlog", version = "1.15.3", repo_name = "module_spdlog")  # noqa

eigen_repository = use_repo_rule(
    "@drake//tools/workspace/eigen:repository.bzl",
    "eigen_repository",
)

eigen_repository(name = "pkgconfig_eigen")

fmt_repository = use_repo_rule(
    "@drake//tools/workspace/fmt:repository.bzl",
    "fmt_repository",
)

fmt_repository(name = "pkgconfig_fmt")

spdlog_repository = use_repo_rule(
    "@drake//tools/workspace/spdlog:repository.bzl",
    "spdlog_repository",
)

spdlog_repository(name = "pkgconfig_spdlog")

# Add C++ module dependencies that are NOT used by Drake's public API, but are
# used by Drake's implementation. Builds have the option to opt-out of these
# depdencies by providing a replacement:
#
# For our CMake builds from source, the "WITH_USER_..." CMake options find a
# user-supplied library are converted into a module override.
#
# For wheel builds, the module flavor is always used.
#
# For Bazel builds using Drake as an external, the module flavor is used by
# default but can be changed using the Bazel flags at @drake//tools/flags.
# For first-party Bazel builds (by Drake Developers), the non-module flavor
# is used by default.

bazel_dep(name = "zlib", version = "1.3.1.bcr.6", repo_name = "module_zlib")

# TODO(jwnimmer-tri) These as well should be module-or-external.
# - glib

# Add additional modules we use as tools (not runtime dependencies).

bazel_dep(name = "nasm", version = "2.16.03.bcr.1")
bazel_dep(name = "toolchains_llvm", version = "1.4.0")

llvm = use_repo_rule("@toolchains_llvm//toolchain:rules.bzl", "llvm")

llvm(
    name = "llvm",
    llvm_version = "19.1.3",
)

# Load dependencies which are "public", i.e., made available to downstream
# projects.
#
# Downstream projects may load the same `drake_dep_repositories` module
# extension shown below and call its `use_repo` with whatever list of
# repositories they desire to cite from their project. It's safe to call
# `use_repo` on a subset of this list, or not call it at all downstream.
# Its only effect on a downstream project is to make the repository name
# visible to BUILD rules; Drake's own use of the repository is unaffected.

drake_dep_repositories = use_extension(
    "@drake//tools/workspace:default.bzl",
    "drake_dep_repositories",
)
use_repo(
    drake_dep_repositories,
    # Aliases for C++ dependencies that are part of our public API.
    "eigen",
    "fmt",
    "spdlog",
    # Aliases for C++ dependencies that are used by our implementation.
    "blas",
    "lapack",
    "zlib",
    # First-party dependencies (i.e., drake-maintained).
    "drake_models",
    "meshcat",
    # Commercial solver dependencies. In principle, these externals don't need
    # to be public, but it's not too much work for us to provide them.
    "gurobi",
    "mosek",
    "snopt",
    # For convenience, we make our Python toolchains available downstream.
    # If at some point the Bazel ecosystem evolves so that rules_python on its
    # own is sufficiently easy to use, we might decide to mark this internal.
    "python",
    # For now, we'll offer Drake's customized pybind11 as public. Ideally this
    # would be internal, but given the pending port to nanobind, it's not worth
    # deprecating it until we have nanobind ready.
    "pybind11",
    # TODO(jwnimmer-tri) Move both of these to be internal (+ deprecation).
    "opencl",
    "x11",
    # TODO(jwnimmer-tri) Move both of these to be internal (+ deprecation).
    # However, both have bzlmod support so the rework will be a bit nuanced,
    # so will need to be attacked a dedicated commit just for these two.
    "glib",
    "lcm",
)

# Load developer dependencies that are modules.

bazel_dep(
    name = "buildifier_prebuilt",
    version = "8.2.0.2",
    dev_dependency = True,
)

bazel_dep(
    name = "gflags",
    version = "2.2.2",
    # TODO(jwnimmer-tri) Try to set dev_dependency = True, but at the moment
    # that prevents downstream from using even non-test code, maybe due to our
    # bazel query-based tests?
)
bazel_dep(
    name = "googletest",
    version = "1.17.0",
    # TODO(jwnimmer-tri) Try to set dev_dependency = True, but at the moment
    # that prevents downstream from using even non-test code, maybe due to our
    # bazel query-based tests?
)
single_version_override(
    module_name = "googletest",
    patches = [
        "//tools/workspace/googletest:patches/add_printers.patch",
        "//tools/workspace/googletest:patches/add_printers_deps.patch",
        "//tools/workspace/googletest:patches/defines.patch",
    ],
    # We must pin the same version as ~10 lines prior, because our patch to
    # MODULE.bazel doesn't apply correctly to other versions of googletest,
    # but Bazel's MVS selection will try to apply it anyway to all versions
    # being considered when resolving the dependency graph.
    version = "1.17.0",
)

bazel_dep(
    name = "google_benchmark",
    version = "1.9.4",
    dev_dependency = True,
)
single_version_override(
    module_name = "google_benchmark",
    patches = [
        "//tools/workspace/google_benchmark:patches/console_allocs.patch",
        "//tools/workspace/google_benchmark:patches/remove_overloaded_fixture_set_up.patch",  # noqa
        "//tools/workspace/google_benchmark:patches/reporter_scaling.patch",
        "//tools/workspace/google_benchmark:patches/string_precision.patch",
    ],
)

# Load dependencies which are "private", i.e., not available for use by
# downstream projects. These are all "internal use only".

internal_repositories = use_extension(
    "@drake//tools/workspace:default.bzl",
    "internal_repositories",
)
use_repo(
    internal_repositories,
    "abseil_cpp_internal",
    "bazelisk_internal",
    "ccd_internal",
    "clang_cindex_python3_internal",
    "clarabel_cpp_internal",
    "clp_internal",
    "coinutils_internal",
    "com_jidesoft_jide_oss_internal",
    "common_robotics_utilities_internal",
    "commons_io_internal",
    "cpplint_internal",
    "csdp_internal",
    "curl_internal",
    "dm_control_internal",
    "doxygen_internal",
    "fcl_internal",
    "gfortran_internal",
    "github3_py_internal",
    "gklib_internal",
    "gymnasium_py_internal",
    "gz_math_internal",
    "gz_utils_internal",
    "highway_internal",
    "implib_so_internal",
    "ipopt_internal",
    "lapack_internal",
    "libjpeg_turbo_internal",
    "libpng_internal",
    "libtiff_internal",
    "metis_internal",
    "mpmath_py_internal",
    "msgpack_internal",
    "mujoco_menagerie_internal",
    "mypy_extensions_internal",
    "mypy_internal",
    "nanoflann_internal",
    "net_sf_jchart2d_internal",
    "nlohmann_internal",
    "nlopt_internal",
    "onetbb_internal",
    "org_apache_xmlgraphics_commons_internal",
    "osqp_internal",
    "pathspec_internal",
    "picosha2_internal",
    "pkgconfig_blas_internal",
    "pkgconfig_lapack_internal",
    "poisson_disk_sampling_internal",
    "pycodestyle_internal",
    "qdldl_internal",
    "qhull_internal",
    "ros_xacro_internal",
    "scs_internal",
    "sdformat_internal",
    "spgrid_internal",
    "spral_internal",
    "stable_baselines3_internal",
    "statsjs_internal",
    "stduuid_internal",
    "styleguide_internal",
    "suitesparse_internal",
    "sympy_py_internal",
    "tinygltf_internal",
    "tinyobjloader_internal",
    "tinyxml2_internal",
    "tomli_internal",
    "typing_extensions_internal",
    "uritemplate_py_internal",
    "usockets_internal",
    "uwebsockets_internal",
    "voxelized_geometry_tools_internal",
    "vtk_internal",
    "xmlrunner_py_internal",
    "yaml_cpp_internal",
)

crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")
crate.spec(package = "clarabel", features = ["sdp"], version = "0.11.1")
crate.annotation(
    crate = "clarabel",
    patches = [
        "@drake//tools/workspace/clarabel_cpp_internal:patches/clarabel_blas.patch",  # noqa
    ],
)
crate.spec(package = "paste", features = [], version = "1.0")
crate.spec(package = "cfg-if", features = [], version = "1.0")
crate.from_specs()
use_repo(crate, crates_internal = "crates")
