# This file marks a workspace root for the Bazel build system.
# See `https://bazel.build/`.

# This file lists Drake's external dependencies as known to bzlmod. It is used
# in concert with WORKSPACE.bzlmod (which has the workspace-style externals).

module(
    name = "drake",
    # This version number should match MINIMUM_BAZEL_VERSION in CMakeLists.txt.
    bazel_compatibility = [">=8.0.1"],
)

# Add starlark rules.

bazel_dep(name = "apple_support", version = "1.23.1")  # Keep this in sync with cmake/MODULE.bazel.in.  # noqa
bazel_dep(name = "bazel_features", version = "1.35.0")
bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_cc", version = "0.2.3")
bazel_dep(name = "rules_java", version = "8.15.2")
bazel_dep(name = "rules_jvm_external", version = "6.8")
bazel_dep(name = "rules_license", version = "1.0.0")
bazel_dep(name = "rules_python", version = "1.6.0")  # Keep this in sync with cmake/MODULE.bazel.in.  # noqa
bazel_dep(name = "rules_rust", version = "0.64.0")
bazel_dep(name = "rules_shell", version = "0.6.0")

single_version_override(
    module_name = "rules_cc",
    patches = [
        "@drake//tools/workspace/rules_cc:patches/upstream/pr456.patch",
    ],
)

# Customize our toolchains.

cc_configure = use_extension(
    "@rules_cc//cc:extensions.bzl",
    "cc_configure_extension",
)
use_repo(cc_configure, "local_config_cc")

# Add C++ dependencies that are part of our public API.
#
# We declare these dependencies twice -- as modules (bazel_dep) and repository
# rules (pkgconfig). The choice of whether module vs pkgconfig will be used is
# governed by the flags declared at drake/tools/flags/BUILD.bazel.
#
# For our CMake builds from source, the "WITH_USER_..." CMake options to choose
# the flavor are translated into the matching Bazel flags.
#
# For wheel builds, the module flavor is always used.
#
# For Bazel builds using Drake as an external, the module flavor is used by
# default but can be changed using the Bazel flags.
#
# For first-party Bazel builds (by Drake Developers), the pkgconfig flavor is
# used by default but can be changed using the Bazel flags.

bazel_dep(name = "eigen", version = "3.4.0.bcr.3", repo_name = "module_eigen")
bazel_dep(name = "fmt", version = "11.2.0", repo_name = "module_fmt")
bazel_dep(name = "spdlog", version = "1.15.3", repo_name = "module_spdlog")  # noqa

eigen_repository = use_repo_rule(
    "@drake//tools/workspace/eigen:repository.bzl",
    "eigen_repository",
)

eigen_repository(name = "pkgconfig_eigen")

fmt_repository = use_repo_rule(
    "@drake//tools/workspace/fmt:repository.bzl",
    "fmt_repository",
)

fmt_repository(name = "pkgconfig_fmt")

spdlog_repository = use_repo_rule(
    "@drake//tools/workspace/spdlog:repository.bzl",
    "spdlog_repository",
)

spdlog_repository(name = "pkgconfig_spdlog")

# Add C++ module dependencies that are NOT used by Drake's public API, but are
# used by Drake's implementation. Builds have the option to opt-out of these
# depdencies by providing a replacement:
#
# For our CMake builds from source, the "WITH_USER_..." CMake options find a
# user-supplied library are converted into a module override.
#
# For wheel builds, the module flavor is always used.
#
# For Bazel builds using Drake as an external, the module flavor is used by
# default but can be changed using the Bazel flags at @drake//tools/flags.
# For first-party Bazel builds (by Drake Developers), the non-module flavor
# is used by default.

bazel_dep(name = "glib", version = "2.82.2.bcr.5", repo_name = "module_glib")
bazel_dep(name = "zlib", version = "1.3.1.bcr.6", repo_name = "module_zlib")

glib_repository = use_repo_rule(
    "@drake//tools/workspace/glib:repository.bzl",
    "glib_repository",
)

glib_repository(name = "pkgconfig_glib")

# Add additional modules we use as tools (not runtime dependencies).

bazel_dep(name = "nasm", version = "2.16.03.bcr.1")
bazel_dep(name = "toolchains_llvm", version = "1.4.0")

llvm = use_repo_rule("@toolchains_llvm//toolchain:rules.bzl", "llvm")

llvm(
    name = "llvm",
    llvm_version = "19.1.3",
)

# Load dependencies which are "public", i.e., made available to downstream
# projects.
#
# Downstream projects may load the same `drake_dep_repositories` module
# extension shown below and call its `use_repo` with whatever list of
# repositories they desire to cite from their project. It's safe to call
# `use_repo` on a subset of this list, or not call it at all downstream.
# Its only effect on a downstream project is to make the repository name
# visible to BUILD rules; Drake's own use of the repository is unaffected.

drake_dep_repositories = use_extension(
    "@drake//tools/workspace:default.bzl",
    "drake_dep_repositories",
)
use_repo(
    drake_dep_repositories,
    # Aliases for C++ dependencies that are part of our public API.
    "eigen",
    "fmt",
    "spdlog",
    # Aliases for C++ dependencies that are used by our implementation.
    "blas",
    "lapack",
    "zlib",
    # First-party dependencies (i.e., drake-maintained).
    "drake_models",
    "meshcat",
    # Commercial solver dependencies. In principle, these externals don't need
    # to be public, but it's not too much work for us to provide them.
    "gurobi",
    "mosek",
    "snopt",
    # For convenience, we make our Python toolchains available downstream.
    # If at some point the Bazel ecosystem evolves so that rules_python on its
    # own is sufficiently easy to use, we might decide to mark this internal.
    "python",
    # For now, we'll offer Drake's customized pybind11 as public. Ideally this
    # would be internal, but given the pending port to nanobind, it's not worth
    # deprecating it until we have nanobind ready.
    "pybind11",
    # TODO(jwnimmer-tri) Move both of these to be internal (+ deprecation).
    "opencl",
    "x11",
    # TODO(jwnimmer-tri) Move both of these to be internal (+ deprecation).
    # However, both have bzlmod support so the rework will be a bit nuanced,
    # so will need to be attacked a dedicated commit just for these two.
    "glib",
    "lcm",
)

# Load Java dependencies.

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    name = "lcm_maven",
    artifacts = [
        "net.sf.jchart2d:jchart2d:3.3.2",
    ],
)
use_repo(maven, "lcm_maven")

# Load developer dependencies that are modules.

bazel_dep(
    name = "buildifier_prebuilt",
    version = "8.2.0.2",
    dev_dependency = True,
)

bazel_dep(
    name = "gflags",
    version = "2.2.2",
    # TODO(jwnimmer-tri) Try to set dev_dependency = True, but at the moment
    # that prevents downstream from using even non-test code, maybe due to our
    # bazel query-based tests?
)
bazel_dep(
    name = "googletest",
    version = "1.17.0",
    # TODO(jwnimmer-tri) Try to set dev_dependency = True, but at the moment
    # that prevents downstream from using even non-test code, maybe due to our
    # bazel query-based tests?
)
single_version_override(
    module_name = "googletest",
    patches = [
        "//tools/workspace/googletest:patches/add_printers.patch",
        "//tools/workspace/googletest:patches/add_printers_deps.patch",
        "//tools/workspace/googletest:patches/defines.patch",
    ],
    # We must pin the same version as ~10 lines prior, because our patch to
    # MODULE.bazel doesn't apply correctly to other versions of googletest,
    # but Bazel's MVS selection will try to apply it anyway to all versions
    # being considered when resolving the dependency graph.
    version = "1.17.0",
)

bazel_dep(
    name = "google_benchmark",
    version = "1.9.4",
    dev_dependency = True,
)
single_version_override(
    module_name = "google_benchmark",
    patches = [
        "//tools/workspace/google_benchmark:patches/console_allocs.patch",
        "//tools/workspace/google_benchmark:patches/remove_overloaded_fixture_set_up.patch",  # noqa
        "//tools/workspace/google_benchmark:patches/reporter_scaling.patch",
        "//tools/workspace/google_benchmark:patches/string_precision.patch",
    ],
)

# Load dependencies which are "private", i.e., not available for use by
# downstream projects. These are all "internal use only".

internal_repositories = use_extension(
    "@drake//tools/workspace:default.bzl",
    "internal_repositories",
)
use_repo(
    internal_repositories,
    #
    # C/C++ libraries used at runtime.
    #
    "abseil_cpp_internal",
    "ccd_internal",
    "clarabel_cpp_internal",
    "clp_internal",
    "coinutils_internal",
    "common_robotics_utilities_internal",
    "csdp_internal",
    "curl_internal",
    "fcl_internal",
    "gfortran_internal",
    "gklib_internal",
    "gz_math_internal",
    "gz_utils_internal",
    "highway_internal",
    "implib_so_internal",
    "ipopt_internal",
    "lapack_internal",
    "libjpeg_turbo_internal",
    "libpng_internal",
    "libtiff_internal",
    "metis_internal",
    "msgpack_internal",
    "nanoflann_internal",
    "nlohmann_internal",
    "nlopt_internal",
    "onetbb_internal",
    "osqp_internal",
    "picosha2_internal",
    "pkgconfig_blas_internal",
    "pkgconfig_lapack_internal",
    "poisson_disk_sampling_internal",
    "qdldl_internal",
    "qhull_internal",
    "scs_internal",
    "sdformat_internal",
    "spgrid_internal",
    "spral_internal",
    "stduuid_internal",
    "suitesparse_internal",
    "tinygltf_internal",
    "tinyobjloader_internal",
    "tinyxml2_internal",
    "usockets_internal",
    "uwebsockets_internal",
    "voxelized_geometry_tools_internal",
    "vtk_internal",
    "yaml_cpp_internal",
    #
    # Python code used when building pydrake.
    #
    "clang_cindex_python3_internal",
    "mypy_extensions_internal",
    "mypy_internal",
    "pathspec_internal",
    "tomli_internal",
    "typing_extensions_internal",
    #
    # Python libraries used at runtime.
    #
    "gymnasium_py_internal",
    "stable_baselines3_internal",
    #
    # Python libraries used at test-time or by maintainers.
    #
    "cpplint_internal",
    "github3_py_internal",
    "mpmath_py_internal",
    "pycodestyle_internal",
    "sympy_py_internal",
    "uritemplate_py_internal",
    "xmlrunner_py_internal",
    #
    # JavaScript libraries.
    #
    "statsjs_internal",
    #
    # Test or example data.
    #
    "dm_control_internal",
    "mujoco_menagerie_internal",
    "ros_xacro_internal",
    #
    # Build system.
    #
    "bazelisk_internal",
    #
    # Documentation.
    #
    "doxygen_internal",
    "styleguide_internal",
)

internal_crate_universe_repositories = use_extension(
    "//tools/workspace:default.bzl",
    "internal_crate_universe_repositories",
)
use_repo(
    internal_crate_universe_repositories,
    "crate__amd-0.2.2",
    "crate__autocfg-1.5.0",
    "crate__blas-0.22.0",
    "crate__blas-sys-0.7.1",
    "crate__bumpalo-3.19.0",
    "crate__cfg-if-1.0.1",
    "crate__clarabel-0.11.1",
    "crate__darling-0.14.4",
    "crate__darling_core-0.14.4",
    "crate__darling_macro-0.14.4",
    "crate__derive_builder-0.11.2",
    "crate__derive_builder_core-0.11.2",
    "crate__derive_builder_macro-0.11.2",
    "crate__either-1.15.0",
    "crate__enum_dispatch-0.3.13",
    "crate__equivalent-1.0.2",
    "crate__fnv-1.0.7",
    "crate__hashbrown-0.15.4",
    "crate__ident_case-1.0.1",
    "crate__indexmap-2.10.0",
    "crate__itertools-0.11.0",
    "crate__itoa-1.0.15",
    "crate__js-sys-0.3.77",
    "crate__lapack-0.19.0",
    "crate__lapack-sys-0.14.0",
    "crate__lazy_static-1.5.0",
    "crate__libc-0.2.174",
    "crate__log-0.4.27",
    "crate__memchr-2.7.5",
    "crate__num-complex-0.4.6",
    "crate__num-traits-0.2.19",
    "crate__once_cell-1.21.3",
    "crate__paste-1.0.15",
    "crate__proc-macro2-1.0.95",
    "crate__quote-1.0.40",
    "crate__ryu-1.0.20",
    "crate__serde-1.0.219",
    "crate__serde-big-array-0.5.1",
    "crate__serde_derive-1.0.219",
    "crate__serde_json-1.0.141",
    "crate__strsim-0.10.0",
    "crate__syn-1.0.109",
    "crate__syn-2.0.104",
    "crate__thiserror-1.0.69",
    "crate__thiserror-impl-1.0.69",
    "crate__unicode-ident-1.0.18",
    "crate__wasm-bindgen-0.2.100",
    "crate__wasm-bindgen-backend-0.2.100",
    "crate__wasm-bindgen-macro-0.2.100",
    "crate__wasm-bindgen-macro-support-0.2.100",
    "crate__wasm-bindgen-shared-0.2.100",
    "crate__web-time-0.2.4",
)
