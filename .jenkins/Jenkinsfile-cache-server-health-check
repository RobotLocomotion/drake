#!/usr/bin/env groovy

properties([
  parameters([
    string(name: 'ciSha', defaultValue: 'main',
      description: 'Commit SHA or branch name. ' +
        'Enter branch name <code>pr/1234/head</code> ' +
        'or <code>pr/1234/merge</code> for pull request #1234. ' +
        'Defaults to <code>main</code>.'),
  ]),
  buildDiscarder(
    logRotator(
      daysToKeepStr: '90',
      artifactDaysToKeepStr: '90'
    )
  )
])

// Define the main pipeline.
node(getNodeLabel()) {
  // Use a custom checkout step below, since there are
  // multiple repositories with a particular directory layout.
  skipDefaultCheckout()

  // Load utils.groovy for common utilities.
  // If no such file exists on this branch, load it from master.
  fetchUtils()
  def jenkinsUtilsPath = 'jenkins-utils/.jenkins/utils/utils.groovy'
  if (!fileExists(jenkinsUtilsPath)) {
    fetchUtils('master')
  }
  def utils = load jenkinsUtilsPath
  if (!utils) {
    currentBuild.result = 'ABORTED'
    error('Failed to load Drake Jenkins utilities.')
  }

  stage('test') {
    timeout(600) {
      ansiColor('xterm') {
        timestamps {
          try {
            // Use the CI branch parameter for checkout (defaults to main).
            utils.checkout(params.ciSha)
            echo "Checking the cache server:"
            try {
              sh "${env.WORKSPACE}/ci/cache_server/health_check.bash"
            } catch (Exception e) {
              currentBuild.result = 'FAILURE'
            }
          } finally {
            try {
              // Only send failure emails for production builds.
              if (!"${env.JOB_NAME}".contains("experimental")) {
                utils.emailFailureResults()
              }
            } finally {
              utils.cleanWorkspace()
            }
          }
        }
      }
    }
  }
}

// Returns the node label from the job name.
def getNodeLabel() {
  def pattern = ~/^((linux|mac-arm)-[a-z]+(?:-unprovisioned)?)/
  def match = "${env.JOB_NAME}" =~ pattern

  if (match.find()) {
    return match.group(1)
  }
  else {
    return null
  }
}

// Loads utils by performing a sparse checkout to WORKSPACE/jenkins-utils.
// If no 'branch' is given, tries to find the current branch or pull request.
def fetchUtils(String branch = null) {
  if (!branch) {
    if (!env.CHANGE_ID?.trim()) {
      branch = scm.branches[0].name
    }
    else {
      branch = "pr/${env.CHANGE_ID}/head"
    }
  }
  checkout([$class: 'GitSCM',
    branches: [[name: branch]],
    extensions: [
      [$class: 'RelativeTargetDirectory', relativeTargetDir: 'jenkins-utils'],
      [$class: 'CloneOption', honorRefspec: true, noTags: true],
      [$class: 'SparseCheckoutPaths',
        sparseCheckoutPaths: [[path: '.jenkins/utils/utils.groovy']]]],
    userRemoteConfigs: [[
      credentialsId: 'ad794d10-9bc8-4a7a-a2f3-998af802cab0',
      name: 'origin',
      refspec: '+refs/heads/*:refs/remotes/origin/* ' +
        '+refs/pull/*:refs/remotes/origin/pr/*',
      url: 'git@github.com:RobotLocomotion/drake.git']]])
}
