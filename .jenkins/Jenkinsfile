// Define the job parameters.
properties([
    parameters([
        string(name: 'ciSha', defaultValue: 'main',
          description: 'Commit SHA or branch name. ' +
            'For pull requests, enter branch name <code>pr/1234/head</code> ' +
            'or <code>pr/1234/merge</code> for pull request #1234. ' +
            'Defaults to <code>main</code>.'),
    ])
])

// Define the main pipeline.
node(getNodeLabel()) {
  // Use a custom checkout step below, since there are
  // multiple repositories with a particular directory layout.
  skipDefaultCheckout()

  // Import utilities.
  library('utils')

  // Categorize this build.
  def isProd = utils.isProduction()

  stage('test') {
    timeout(600) {
      ansiColor('xterm') {
        timestamps {
          try {
            def scmVars = null
            if (isProd) {
              // Ignore the ci branch parameter for production builds,
              // always use main.
              scmVars = utils.checkout()
            }
            else {
              // Use the ci branch parameter (defaults to main).
              scmVars = utils.checkout("${params.ciSha}")
            }
            doBuild(scmVars)
          } finally {
            try {
              utils.addCDashBadge()
              // Only send failure emails for production builds.
              if (isProd) {
                utils.emailFailureResults()
              }
            } finally {
              utils.cleanWorkspace()
            }
          }
        }
      }
    }
  }
}

// Returns the node label from the job name.
def getNodeLabel() {
  def pattern = ~/^((linux|mac-arm)-[a-z]+(?:-unprovisioned)?)/
  def match = "${env.JOB_NAME}" =~ pattern

  if (match.find()) {
    return match.group(1)
  }
  else {
    return null
  }
}

// Performs the main build step by calling into the drake-ci driver script
// with the necessary credentials and environment variables.
def doBuild(Map scmVars) {
  withCredentials([
    sshUserPrivateKey(credentialsId: 'ad794d10-9bc8-4a7a-a2f3-998af802cab0',
      keyFileVariable: 'SSH_PRIVATE_KEY_FILE'),
    string(credentialsId: 'e21b9517-8aa7-419e-8f25-19cd42e10f68',
      variable: 'DOCKER_USERNAME'),
    file(credentialsId: '912dd413-d419-4760-b7ab-c132ab9e7c5e',
      variable: 'DOCKER_PASSWORD_FILE')
  ]) {
    withEnv(["GIT_COMMIT=${scmVars.GIT_COMMIT}"]) {
      sh "${env.WORKSPACE}/ci/ctest_driver_script_wrapper.bash"
    }
  }
}
