#!/usr/bin/env groovy

node(getNodeLabel()) {
  // Define job properties. Other Jenkinsfiles which do not correspond to
  // multibranch pipelines (i.e., for non-experimental jobs) should inherit
  // properties from the original job definitions rather than calling
  // properties() here.
  def props = [
    parameters([
      string(name: 'ciSha', defaultValue: 'main',
        description: 'Commit SHA or branch name. ' +
          'For pull requests, enter branch name <code>pr/1234/head</code> ' +
          'or <code>pr/1234/merge</code> for pull request #1234. ' +
          'Defaults to <code>main</code>.'),
      ]
    ),
    buildDiscarder(
      logRotator(
        daysToKeepStr: '90',
        artifactDaysToKeepStr: '90'
      )
    )
  ]
  if (env.JOB_NAME.contains("cache-server-health-check")) {
    props << disableConcurrentBuilds()
  }
  properties(props)

  // Load utils.groovy for common utilities.
  // If no such file exists on this branch, load it from master.
  fetchUtils()
  def jenkinsUtilsPath = 'jenkins-utils/.jenkins/utils/utils.groovy'
  if (!fileExists(jenkinsUtilsPath)) {
    fetchUtils('master')
  }
  def utils = load jenkinsUtilsPath
  if (!utils) {
    currentBuild.result = 'ABORTED'
    error('Failed to load Drake Jenkins utilities.')
  }

  stage('test') {
    timeout(600) {
      ansiColor('xterm') {
        timestamps {
          try {
            // Use the CI branch parameter for checkout (defaults to main).
            def scmVars = utils.checkout(params.ciSha)
            utils.doMainBuild(scmVars)
          } finally {
            try {
              utils.addCDashBadge()
            } finally {
              utils.cleanWorkspace()
            }
          }
        }
      }
    }
  }
}

/**
 * Extracts the node label from the job name.
 *
 * @return the node label
 */
def getNodeLabel() {
  def pattern = ~/^((linux(-arm)?|mac-arm)-[A-Za-z]+(-unprovisioned)?).*/
  def match = env.JOB_NAME =~ pattern

  if (match.find()) {
    return match.group(1)
  }
  else {
    return null
  }
}

/**
 * Loads utils by performing a sparse checkout to WORKSPACE/jenkins-utils.
 *
 * @param branch the branch from which to load utils; if none is given, tries
 *               to find the current branch or pull request
 */
def fetchUtils(String branch = null) {
  if (!branch) {
    if (!env.CHANGE_ID?.trim()) {
      branch = scm.branches[0].name
    }
    else {
      branch = "pr/${env.CHANGE_ID}/head"
    }
  }
  checkout([$class: 'GitSCM',
    branches: [[name: branch]],
    extensions: [
      [$class: 'RelativeTargetDirectory', relativeTargetDir: 'jenkins-utils'],
      [$class: 'CloneOption', honorRefspec: true, noTags: true],
      [$class: 'SparseCheckoutPaths',
        sparseCheckoutPaths: [[path: '.jenkins/utils/utils.groovy']]]],
    userRemoteConfigs: [[
      credentialsId: 'ad794d10-9bc8-4a7a-a2f3-998af802cab0',
      name: 'origin',
      refspec: '+refs/heads/*:refs/remotes/origin/* ' +
        '+refs/pull/*:refs/remotes/origin/pr/*',
      url: 'git@github.com:RobotLocomotion/drake.git']]])
}
