# -*- python -*-

load("@drake//tools/install:install.bzl", "install")
load(
    "@drake//tools/skylark:pybind.bzl",
    "add_pybind_coverage_data",
    "drake_pybind_library",
    "get_drake_py_installs",
    "get_pybind_package_info",
)
load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_library",
)
load(
    "@drake//tools/skylark:drake_py.bzl",
    "drake_py_binary",
    "drake_py_library",
    "drake_py_unittest",
)
load("//tools/jupyter:jupyter_py.bzl", "drake_jupyter_py_binary")
load("//bindings/pydrake:pydrake.bzl", "add_lint_tests_pydrake")
load("//tools/skylark:test_tags.bzl", "vtk_test_tags")

package(default_visibility = [
    "//bindings/pydrake:__subpackages__",
])

# This determines how `PYTHONPATH` is configured, and how to install the
# bindings.
PACKAGE_INFO = get_pybind_package_info(base_package = "//bindings")

# @note Symbols are NOT imported directly into
# `__init__.py` to simplify dependency management, meaning that
# classes are organized by their directory structure rather than
# by C++ namespace. If you want all symbols, use `all.py`.
drake_py_library(
    name = "module_py",
    srcs = ["__init__.py"],
    imports = PACKAGE_INFO.py_imports,
    deps = [
        "//bindings/pydrake:module_py",
    ],
)

drake_pybind_library(
    name = "framework_py",
    cc_deps = [
        "//bindings/pydrake:documentation_pybind",
        "//bindings/pydrake/common:cpp_template_pybind",
        "//bindings/pydrake/common:default_scalars_pybind",
        "//bindings/pydrake/common:deprecation_pybind",
        "//bindings/pydrake/common:eigen_pybind",
        "//bindings/pydrake/common:type_safe_index_pybind",
        "//bindings/pydrake/common:value_pybind",
        "//bindings/pydrake/common:wrap_pybind",
    ],
    cc_srcs = [
        "framework_py.cc",
        "framework_py_semantics.cc",
        "framework_py_semantics.h",
        "framework_py_systems.cc",
        "framework_py_systems.h",
        "framework_py_values.cc",
        "framework_py_values.h",
    ],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":module_py",
        "//bindings/pydrake:autodiffutils_py",
        "//bindings/pydrake:math_py",
        "//bindings/pydrake:symbolic_py",
        "//bindings/pydrake/common:cpp_template_py",
        "//bindings/pydrake/common:deprecation_py",
        "//bindings/pydrake/common:eigen_geometry_py",
        "//bindings/pydrake/common:value_py",
    ],
)

drake_py_library(
    name = "scalar_conversion_py",
    srcs = ["scalar_conversion.py"],
    deps = [
        ":framework_py",
    ],
)

drake_pybind_library(
    name = "primitives_py",
    cc_deps = [
        "//bindings/pydrake:documentation_pybind",
        "//bindings/pydrake/common:cpp_template_pybind",
        "//bindings/pydrake/common:default_scalars_pybind",
    ],
    cc_srcs = ["primitives_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":framework_py",
        ":module_py",
    ],
)

drake_pybind_library(
    name = "analysis_py",
    cc_deps = [
        "//bindings/pydrake:documentation_pybind",
        "//bindings/pydrake/common:cpp_template_pybind",
        "//bindings/pydrake/common:default_scalars_pybind",
        "//bindings/pydrake/common:wrap_pybind",
    ],
    cc_srcs = ["analysis_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":framework_py",
        ":module_py",
    ],
)

drake_pybind_library(
    name = "controllers_py",
    cc_deps = [
        "//bindings/pydrake:documentation_pybind",
        "//bindings/pydrake:symbolic_types_pybind",
        "//bindings/pydrake/common:wrap_pybind",
    ],
    cc_srcs = ["controllers_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":framework_py",
        ":module_py",
        ":primitives_py",
        "//bindings/pydrake:math_py",
        "//bindings/pydrake:symbolic_py",
        "//bindings/pydrake/multibody:plant_py",
    ],
)

drake_pybind_library(
    name = "rendering_py",
    cc_deps = [
        "//bindings/pydrake:documentation_pybind",
        "//bindings/pydrake/common:eigen_geometry_pybind",
        "//bindings/pydrake/common:value_pybind",
    ],
    cc_srcs = ["rendering_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":framework_py",
        ":module_py",
        "//bindings/pydrake/common:eigen_geometry_py",
    ],
)

drake_pybind_library(
    name = "sensors_py",
    cc_deps = [
        "//bindings/pydrake:documentation_pybind",
        "//bindings/pydrake/common:cpp_template_pybind",
        "//bindings/pydrake/common:eigen_geometry_pybind",
        "//bindings/pydrake/common:eigen_pybind",
        "//bindings/pydrake/common:type_pack",
        "//bindings/pydrake/common:value_pybind",
    ],
    cc_srcs = ["sensors_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":framework_py",
        ":module_py",
        "//bindings/pydrake/common:cpp_template_py",
        "//bindings/pydrake/common:eigen_geometry_py",
        "//bindings/pydrake:geometry_py",
    ],
)

drake_pybind_library(
    name = "trajectory_optimization_py",
    cc_deps = [
        "//bindings/pydrake:documentation_pybind",
        "//bindings/pydrake:symbolic_types_pybind",
    ],
    cc_srcs = ["trajectory_optimization_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":framework_py",
        ":module_py",
        "//bindings/pydrake/solvers:mathematicalprogram_py",
        "//bindings/pydrake:trajectories_py",
    ],
)

# TODO(eric.cousineau): Put this under test once `pydot` is in
# `install_prereqs.sh`.
drake_py_library(
    name = "drawing_py",
    srcs = ["drawing.py"],
    imports = PACKAGE_INFO.py_imports,
    deps = [":module_py"],
)

drake_cc_library(
    name = "lcm_pybind",
    hdrs = ["lcm_pybind.h"],
    declare_installed_headers = 0,
    visibility = ["//visibility:public"],
    deps = [
        "//bindings/pydrake:pydrake_pybind",
        "//bindings/pydrake/common:cpp_template_pybind",
    ],
)

drake_pybind_library(
    name = "lcm_py",
    cc_deps = [
        ":lcm_pybind",
        "//bindings/pydrake:documentation_pybind",
    ],
    cc_srcs = [
        "lcm_py.cc",
        "lcm_py_bind_cpp_serializers.cc",
        "lcm_py_bind_cpp_serializers.h",
    ],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":framework_py",
        ":module_py",
        "//bindings/pydrake:lcm_py",
        "//lcmtypes:lcmtypes_drake_py",
        "@lcmtypes_robotlocomotion//:lcmtypes_robotlocomotion_py",
    ],
    py_srcs = ["_lcm_extra.py"],
)

drake_py_unittest(
    name = "lcm_test",
    deps = [
        ":analysis_py",
        ":lcm_py",
        ":primitives_py",
        "//bindings/pydrake/common/test_utilities:deprecation_py",
    ],
)

drake_py_library(
    name = "meshcat_visualizer_py",
    srcs = ["meshcat_visualizer.py"],
    imports = PACKAGE_INFO.py_imports,
    deps = [
        ":framework_py",
        ":module_py",
        ":rendering_py",
        "//bindings/pydrake:geometry_py",
        "//bindings/pydrake:lcm_py",
        "//bindings/pydrake:math_py",
        "//bindings/pydrake/common:eigen_geometry_py",
        "//lcmtypes:lcmtypes_drake_py",
        "@meshcat_python//:meshcat",
        "@meshcat_python//:meshcat-server",
    ],
)

drake_py_library(
    name = "jupyter_widgets_py",
    srcs = ["jupyter_widgets.py"],
    imports = PACKAGE_INFO.py_imports,
    deps = [
        ":framework_py",
        ":module_py",
        "//bindings/pydrake:math_py",
        "//bindings/pydrake/common:jupyter_py",
    ],
)

drake_py_library(
    name = "perception_py",
    srcs = ["perception.py"],
    imports = PACKAGE_INFO.py_imports,
    deps = [
        ":framework_py",
        ":module_py",
        "//bindings/pydrake:math_py",
        "//bindings/pydrake:perception_py",
    ],
)

drake_py_library(
    name = "planar_scenegraph_visualizer_py",
    srcs = ["planar_scenegraph_visualizer.py"],
    imports = PACKAGE_INFO.py_imports,
    deps = [
        ":framework_py",
        ":module_py",
        ":pyplot_visualizer_py",
        ":rendering_py",
        "//bindings/pydrake:lcm_py",
    ],
)

drake_py_library(
    name = "pyplot_visualizer_py",
    srcs = ["pyplot_visualizer.py"],
    imports = PACKAGE_INFO.py_imports,
    deps = [
        ":framework_py",
        ":module_py",
        ":primitives_py",
        "//bindings/pydrake:trajectories_py",
    ],
)

drake_py_library(
    name = "system_sliders_py",
    srcs = ["system_sliders.py"],
    imports = PACKAGE_INFO.py_imports,
    deps = [":module_py"],
)

PY_LIBRARIES_WITH_INSTALL = [
    ":analysis_py",
    ":controllers_py",
    ":framework_py",
    ":lcm_py",
    ":primitives_py",
    ":rendering_py",
    ":sensors_py",
    ":trajectory_optimization_py",
]

PY_LIBRARIES = [
    ":drawing_py",
    ":jupyter_widgets_py",
    ":meshcat_visualizer_py",
    ":scalar_conversion_py",
    ":module_py",
    ":perception_py",
    ":planar_scenegraph_visualizer_py",
    ":pyplot_visualizer_py",
    ":system_sliders_py",
]

# Symbol roll-up (for user ease).
drake_py_library(
    name = "all_py",
    srcs = ["all.py"],
    deps = PY_LIBRARIES_WITH_INSTALL + PY_LIBRARIES,
)

# Package roll-up (for Bazel dependencies).
drake_py_library(
    name = "systems",
    deps = [":all_py"],
)

install(
    name = "install",
    targets = PY_LIBRARIES + [":all_py"],
    py_dest = PACKAGE_INFO.py_dest,
    deps = get_drake_py_installs(PY_LIBRARIES_WITH_INSTALL),
)

drake_py_unittest(
    name = "general_test",
    deps = [
        ":analysis_py",
        ":framework_py",
        ":primitives_py",
        "//bindings/pydrake/common/test_utilities",
        "//bindings/pydrake/examples:pendulum_py",
        "//bindings/pydrake/examples:rimless_wheel_py",
    ],
)

drake_py_binary(
    name = "drawing_graphviz_example",
    srcs = ["drawing_graphviz_example.py"],
    add_test_rule = 1,
    data = [
        "//examples/multibody/cart_pole:cart_pole.sdf",
    ],
    test_rule_timeout = "moderate",
    deps = [
        ":drawing_py",
        ":framework_py",
        ":primitives_py",
        "//bindings/pydrake:geometry_py",
        "//bindings/pydrake:lcm_py",
        "//bindings/pydrake/multibody:parsing_py",
        "//bindings/pydrake/multibody:plant_py",
    ],
)

drake_jupyter_py_binary(
    name = "jupyter_widgets_examples",
    add_test_rule = 1,
    data = [
        "//manipulation/models/ycb:models",
    ],
    deps = [
        ":analysis_py",
        ":framework_py",
        ":jupyter_widgets_py",
        "//bindings/pydrake:geometry_py",
        "//bindings/pydrake/multibody:parsing_py",
        "//bindings/pydrake/multibody:plant_py",
    ],
)

drake_pybind_library(
    name = "test_util_py",
    testonly = 1,
    add_install = False,
    cc_deps = [
        "//bindings/pydrake:documentation_pybind",
        "//bindings/pydrake/common:value_pybind",
    ],
    cc_so_name = "test/test_util",
    cc_srcs = ["test/test_util_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":framework_py",
        ":primitives_py",
        "//bindings/pydrake/common:cpp_template_py",
    ],
    visibility = ["//visibility:private"],
)

drake_py_unittest(
    name = "analysis_test",
    deps = [
        ":analysis_py",
        ":framework_py",
        ":primitives_py",
        "//bindings/pydrake:trajectories_py",
    ],
)

drake_py_unittest(
    name = "lifetime_test",
    deps = [
        ":analysis_py",
        ":framework_py",
        ":primitives_py",
        ":test_util_py",
    ],
)

drake_py_unittest(
    name = "custom_test",
    deps = [
        ":analysis_py",
        ":framework_py",
        ":primitives_py",
        ":test_util_py",
        "//bindings/pydrake/common/test_utilities",
    ],
)

drake_py_unittest(
    name = "value_test",
    deps = [
        ":framework_py",
        "//bindings/pydrake/common/test_utilities",
    ],
)

drake_py_unittest(
    name = "controllers_test",
    data = [
        "//manipulation/models/iiwa_description:models",
    ],
    deps = [
        ":controllers_py",
        "//bindings/pydrake/examples:pendulum_py",
        "//bindings/pydrake/multibody:parsing_py",
        "//bindings/pydrake/multibody:plant_py",
        "//bindings/pydrake/multibody:tree_py",
    ],
)

drake_py_unittest(
    name = "meshcat_visualizer_test",
    data = [
        "//examples/kuka_iiwa_arm:models",
        "//examples/multibody/cart_pole:models",
        "//examples/quadrotor:models",
        "//manipulation/models/iiwa_description:models",
        "//systems/sensors:test_models",
    ],
    # Defects related to ZMQ when run under DRD or Helgrind.
    tags = [
        "no_drd",
        "no_helgrind",
    ],
    deps = [
        ":analysis_py",
        ":framework_py",
        ":meshcat_visualizer_py",
        ":test_util_py",
        "//bindings/pydrake:geometry_py",
        "//bindings/pydrake:perception_py",
        "//bindings/pydrake/common/test_utilities",
        "//bindings/pydrake/multibody",
    ],
)

drake_py_unittest(
    name = "perception_test",
    deps = [
        ":analysis_py",
        ":framework_py",
        ":perception_py",
        "//bindings/pydrake:math_py",
        "//bindings/pydrake:perception_py",
    ],
)

drake_py_unittest(
    name = "primitives_test",
    deps = [
        ":analysis_py",
        ":framework_py",
        ":primitives_py",
        ":test_util_py",
        "//bindings/pydrake:trajectories_py",
        "//bindings/pydrake/common/test_utilities:deprecation_py",
        "//bindings/pydrake/common/test_utilities:numpy_compare_py",
    ],
)

drake_py_unittest(
    name = "planar_scenegraph_visualizer_test",
    data = [
        "//examples/multibody/cart_pole:models",
        "//manipulation/models/iiwa_description:models",
    ],
    deps = [
        ":analysis_py",
        ":framework_py",
        ":planar_scenegraph_visualizer_py",
        "//bindings/pydrake:geometry_py",
        "//bindings/pydrake/multibody",
    ],
)

drake_py_unittest(
    name = "pyplot_visualizer_test",
    deps = [
        ":analysis_py",
        ":framework_py",
        ":primitives_py",
        ":pyplot_visualizer_py",
        "//bindings/pydrake:trajectories_py",
    ],
)

drake_py_unittest(
    name = "rendering_test",
    data = ["//multibody/benchmarks/acrobot:models"],
    deps = [
        ":rendering_py",
        "//bindings/pydrake/multibody:math_py",
        "//bindings/pydrake/multibody:parsing_py",
        "//bindings/pydrake/multibody:plant_py",
    ],
)

drake_py_unittest(
    name = "scalar_conversion_test",
    deps = [
        ":framework_py",
        ":scalar_conversion_py",
    ],
)

drake_py_unittest(
    name = "sensors_test",
    data = [
        "//systems/sensors:test_models",
    ],
    tags = vtk_test_tags(),
    deps = [
        ":sensors_py",
        "//bindings/pydrake:geometry_py",
        "//bindings/pydrake/common/test_utilities",
    ],
)

drake_py_unittest(
    name = "system_sliders_test",
    deps = [
        ":primitives_py",
        ":system_sliders_py",
    ],
)

drake_py_unittest(
    name = "trajectory_optimization_test",
    deps = [
        ":trajectory_optimization_py",
        "//bindings/pydrake/common/test_utilities",
        "//bindings/pydrake/examples:pendulum_py",
    ],
)

drake_py_unittest(
    name = "monte_carlo_test",
    deps = [
        ":analysis_py",
        ":primitives_py",
        "//bindings/pydrake/common/test_utilities",
    ],
)

add_pybind_coverage_data()

add_lint_tests_pydrake()
