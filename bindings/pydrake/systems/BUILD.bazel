# -*- python -*-

load("@drake//tools/install:install.bzl", "install")
load("//tools/lint:lint.bzl", "add_lint_tests")
load(
    "//tools/skylark:pybind.bzl",
    "drake_pybind_library",
    "get_drake_pybind_installs",
    "get_pybind_package_info",
)
load(
    "//tools/skylark:drake_py.bzl",
    "drake_py_binary",
    "drake_py_library",
    "drake_py_test",
)
load(
    "//tools/skylark:6996.bzl",
    "adjust_label_for_drake_hoist",
    "adjust_labels_for_drake_hoist",
)

package(default_visibility = adjust_labels_for_drake_hoist([
    "//drake/bindings/pydrake:__subpackages__",
]))

# This determines how `PYTHONPATH` is configured, and how to install the
# bindings.
PACKAGE_INFO = get_pybind_package_info(
    base_package = adjust_label_for_drake_hoist("//drake/bindings"),
)

# @note Symbols are NOT imported directly into
# `__init__.py` to simplify dependency management, meaning that
# classes are organized by their directory structure rather than
# by C++ namespace. If you want all symbols, use `all.py`.
drake_py_library(
    name = "module_py",
    srcs = ["__init__.py"],
    imports = PACKAGE_INFO.py_imports,
    deps = [
        "//drake/bindings/pydrake:common_py",
    ],
)

drake_pybind_library(
    name = "framework_py",
    cc_so_name = "framework",
    cc_srcs = ["framework_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":module_py",
    ],
)

drake_pybind_library(
    name = "primitives_py",
    cc_so_name = "primitives",
    cc_srcs = ["primitives_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":framework_py",
        ":module_py",
    ],
)

drake_pybind_library(
    name = "analysis_py",
    cc_so_name = "analysis",
    cc_srcs = ["analysis_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":framework_py",
        ":module_py",
    ],
)

drake_py_library(
    name = "drawing_py",
    srcs = ["drawing.py"],
    imports = PACKAGE_INFO.py_imports,
    deps = [":module_py"],
)

drake_py_library(
    name = "all_py",
    deps = [
        ":analysis_py",
        ":drawing_py",
        ":framework_py",
        ":primitives_py",
    ],
)

PYBIND_LIBRARIES = [
    ":analysis_py",
    ":framework_py",
    ":primitives_py",
]

PY_LIBRARIES = [
    ":all_py",
    ":drawing_py",
    ":module_py",
]

drake_py_library(
    name = "systems",
    imports = PACKAGE_INFO.py_imports,
    deps = PYBIND_LIBRARIES + PY_LIBRARIES,
)

install(
    name = "install",
    targets = PY_LIBRARIES,
    py_dest = PACKAGE_INFO.py_dest,
    deps = get_drake_pybind_installs(PYBIND_LIBRARIES),
)

drake_py_test(
    name = "general_test",
    size = "small",
    deps = [
        ":analysis_py",
        ":framework_py",
        ":primitives_py",
    ],
)

# TODO(eric.cousineau): Convert this to a workflow test once `pydot` is added
# to `install_prereqs.sh`.
drake_py_binary(
    name = "graphviz_example",
    srcs = ["test/graphviz_example.py"],
    deps = [
        ":drawing_py",
        ":framework_py",
        ":primitives_py",
    ],
)

drake_pybind_library(
    name = "lifetime_test_util",
    testonly = 1,
    add_install = False,
    cc_so_name = "test/lifetime_test_util",
    cc_srcs = ["test/lifetime_test_util_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":primitives_py",
    ],
)

drake_py_test(
    name = "lifetime_test",
    deps = [
        ":analysis_py",
        ":framework_py",
        ":lifetime_test_util",
        ":primitives_py",
    ],
)

drake_py_test(
    name = "custom_test",
    size = "small",
    deps = [
        ":analysis_py",
        ":framework_py",
        ":primitives_py",
    ],
)

drake_py_test(
    name = "vector_test",
    size = "small",
    deps = [
        ":framework_py",
    ],
)

add_lint_tests()
