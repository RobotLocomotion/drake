load("@drake//tools/install:install.bzl", "install")
load(
    "@drake//tools/skylark:test_tags.bzl",
    "gurobi_test_tags",
    "mosek_test_tags",
)
load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_library",
)
load(
    "@drake//tools/skylark:pybind.bzl",
    "add_pybind_coverage_data",
    "drake_pybind_library",
    "get_drake_py_installs",
    "get_pybind_package_info",
)
load(
    "@drake//tools/skylark:drake_py.bzl",
    "drake_py_library",
    "drake_py_unittest",
)
load(
    "@drake//tools/skylark:alias.bzl",
    "drake_py_library_aliases",
)
load("//bindings/pydrake:pydrake.bzl", "add_lint_tests_pydrake")

package(default_visibility = [
    "//bindings/pydrake:__subpackages__",
])

# This determines how `PYTHONPATH` is configured, and how to install the
# bindings.
# TODO(eric.cousineau): address
# https://github.com/RobotLocomotion/drake/issues/12055
PACKAGE_INFO = get_pybind_package_info("//bindings")

drake_pybind_library(
    name = "solvers",
    cc_deps = [
        "//bindings/pydrake:autodiff_types_pybind",
        "//bindings/pydrake:documentation_pybind",
        "//bindings/pydrake:symbolic_types_pybind",
        "//bindings/pydrake/common:cpp_param_pybind",
        "//bindings/pydrake/common:cpp_template_pybind",
        "//bindings/pydrake/common:deprecation_pybind",
        "//bindings/pydrake/common:eigen_pybind",
        "//bindings/pydrake/common:value_pybind",
    ],
    cc_so_name = "__init__",
    cc_srcs = [
        "solvers_pybind.h",
        "solvers_py.h",
        "solvers_py.cc",
        "solvers_py_augmented_lagrangian.cc",
        "solvers_py_branch_and_bound.cc",
        "solvers_py_clp.cc",
        "solvers_py_csdp.cc",
        "solvers_py_gurobi.cc",
        "solvers_py_ipopt.cc",
        "solvers_py_mathematicalprogram.cc",
        "solvers_py_mixed_integer_optimization_util.cc",
        "solvers_py_mixed_integer_rotation_constraint.cc",
        "solvers_py_mosek.cc",
        "solvers_py_nlopt.cc",
        "solvers_py_osqp.cc",
        "solvers_py_scs.cc",
        "solvers_py_sdpa_free_format.cc",
        "solvers_py_snopt.cc",
    ],
    package_info = PACKAGE_INFO,
    py_deps = [
        "//bindings/pydrake:autodiffutils_py",
        "//bindings/pydrake:symbolic_py",
        "//bindings/pydrake/common:cpp_param_py",
        "//bindings/pydrake/common:cpp_template_py",
        "//bindings/pydrake/common:value_py",
    ],
    py_srcs = [
        "_extra.py",
        "augmented_lagrangian.py",
        "branch_and_bound.py",
        "clp.py",
        "csdp.py",
        "gurobi.py",
        "ipopt.py",
        "mathematicalprogram.py",
        "mixed_integer_optimization_util.py",
        "mixed_integer_rotation_constraint.py",
        "mosek.py",
        "nlopt.py",
        "osqp.py",
        "scs.py",
        "sdpa_free_format.py",
        "snopt.py",
    ],
)

install(
    name = "install",
    targets = [":solvers"],
    py_dest = PACKAGE_INFO.py_dest,
    deps = get_drake_py_installs([":solvers"]),
)

drake_py_unittest(
    name = "augmented_lagrangian_test",
    deps = [
        ":solvers",
        "//bindings/pydrake:autodiffutils_py",
        "//bindings/pydrake/common/test_utilities",
    ],
)

drake_py_unittest(
    name = "clp_solver_test",
    args = select({
        "//tools:no_clp": ["TestClptSolver.unavailable"],
        "//conditions:default": [],
    }),
    deps = [
        ":solvers",
        "//bindings/pydrake/common/test_utilities",
    ],
)

drake_py_unittest(
    name = "csdp_solver_test",
    args = select({
        "//tools:no_csdp": ["TestCsdptSolver.unavailable"],
        "//conditions:default": [],
    }),
    deps = [
        ":solvers",
        "//bindings/pydrake/common/test_utilities",
        "//bindings/pydrake/common/test_utilities:scipy_stub_py",
    ],
)

drake_py_unittest(
    name = "gurobi_solver_test",
    tags = gurobi_test_tags(),
    deps = [
        ":solvers",
    ],
)

drake_py_unittest(
    name = "ipopt_solver_test",
    args = select({
        "//tools:no_ipopt": ["TestIpoptSolver.unavailable"],
        "//conditions:default": [],
    }),
    deps = [
        ":solvers",
        "//bindings/pydrake/common/test_utilities",
    ],
)

drake_py_unittest(
    name = "mosek_solver_test",
    tags = mosek_test_tags(),
    deps = [
        ":solvers",
    ],
)

drake_py_unittest(
    name = "noscipy_test",
    deps = [
        ":solvers",
        "//bindings/pydrake/common/test_utilities:scipy_none_py",
    ],
)

drake_py_unittest(
    name = "nlopt_solver_test",
    args = select({
        "//tools:no_nlopt": ["TestNloptSolver.unavailable"],
        "//conditions:default": [],
    }),
    deps = [
        ":solvers",
        "//bindings/pydrake/common/test_utilities:numpy_compare_py",
    ],
)

drake_py_unittest(
    name = "osqp_solver_test",
    args = select({
        "//tools:no_osqp": ["TestOsqpSolver.unavailable"],
        "//conditions:default": [],
    }),
    deps = [
        ":solvers",
    ],
)

drake_py_unittest(
    name = "scs_solver_test",
    args = select({
        "//tools:no_scs": ["TestScsSolver.unavailable"],
        "//conditions:default": [],
    }),
    deps = [
        ":solvers",
        "//bindings/pydrake/common/test_utilities:numpy_compare_py",
    ],
)

drake_py_unittest(
    name = "snopt_solver_test",
    tags = ["snopt"],
    deps = [
        ":solvers",
        "//bindings/pydrake/common/test_utilities:numpy_compare_py",
    ],
)

drake_py_unittest(
    name = "mathematicalprogram_test",
    tags = gurobi_test_tags(gurobi_required = False),
    deps = [
        ":solvers",
        "//bindings/pydrake:math_py",
        "//bindings/pydrake/common/test_utilities",
        "//bindings/pydrake/common/test_utilities:scipy_stub_py",
    ],
)

drake_py_unittest(
    name = "branch_and_bound_test",
    deps = [
        ":solvers",
        "//bindings/pydrake:math_py",
        "//bindings/pydrake/common/test_utilities",
    ],
)

drake_py_unittest(
    name = "mixed_integer_optimization_util_test",
    deps = [
        ":solvers",
        "//bindings/pydrake:math_py",
        "//bindings/pydrake/common/test_utilities",
    ],
)

drake_py_unittest(
    name = "mixed_integer_rotation_constraint_test",
    deps = [
        ":solvers",
        "//bindings/pydrake:math_py",
        "//bindings/pydrake/common/test_utilities",
    ],
)

drake_py_unittest(
    name = "sdpa_free_format_test",
    deps = [
        ":solvers",
        "//bindings/pydrake/common/test_utilities",
    ],
)

add_pybind_coverage_data()

add_lint_tests_pydrake()
