# -*- python -*-

load("@drake//tools/install:install.bzl", "install")
load("//tools/lint:lint.bzl", "add_lint_tests")
load(
    "//tools:drake.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
)
load(
    "//tools/skylark:drake_py.bzl",
    "drake_py_library",
    "drake_py_test",
)
load(
    "//tools/skylark:pybind.bzl",
    "drake_pybind_library",
    "get_drake_py_installs",
    "get_pybind_package_info",
)
load(
    "//tools/skylark:6996.bzl",
    "adjust_label_for_drake_hoist",
    "adjust_labels_for_drake_hoist",
)

package(default_visibility = adjust_labels_for_drake_hoist([
    "//drake/bindings/pydrake:__subpackages__",
]))

# This determines how `PYTHONPATH` is configured, and how to install the
# bindings.
PACKAGE_INFO = get_pybind_package_info(
    base_package = adjust_label_for_drake_hoist("//drake/bindings"),
)

drake_cc_library(
    name = "pydrake_pybind",
    hdrs = ["pydrake_pybind.h"],
    # NOTE: We must violate IWYU and not list any Drake libraries in "deps"
    # here because we do not want these dependencies violating ODR (at both
    # development and install time).
)

drake_pybind_library(
    name = "common_py",
    cc_srcs = ["common_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        "//bindings/pydrake/util:module_shim_py",
    ],
    py_srcs = [
        "__init__.py",
        "common.py",
    ],
)

drake_cc_library(
    name = "autodiff_types_pybind",
    hdrs = ["autodiff_types_pybind.h"],
)

drake_pybind_library(
    name = "autodiffutils_py",
    cc_deps = [
        ":autodiff_types_pybind",
    ],
    cc_srcs = ["autodiffutils_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":common_py",
    ],
    py_srcs = [
        "autodiffutils.py",
        "forwarddiff.py",
    ],
)

drake_py_library(
    name = "backwards_compatibility_py",
    srcs = [
        "parsers.py",
        "rbtree.py",
    ],
    deps = [
        "//bindings/pydrake/multibody:parsers_py",
        "//bindings/pydrake/multibody:rigid_body_tree_py",
    ],
)

# TODO(eric.cousineau): Make private.
drake_cc_library(
    name = "symbolic_types_pybind",
    hdrs = ["symbolic_types_pybind.h"],
)

drake_pybind_library(
    name = "symbolic_py",
    cc_deps = [
        ":symbolic_types_pybind",
    ],
    cc_srcs = ["symbolic_py.cc"],
    package_info = PACKAGE_INFO,
    py_deps = [
        ":common_py",
    ],
    py_srcs = ["symbolic.py"],
)

PY_LIBRARIES_WITH_INSTALL = adjust_labels_for_drake_hoist([
    ":autodiffutils_py",
    ":common_py",
    ":symbolic_py",
    "//drake/bindings/pydrake/examples",
    "//drake/bindings/pydrake/multibody",
    "//drake/bindings/pydrake/solvers",
    "//drake/bindings/pydrake/systems",
    "//drake/bindings/pydrake/third_party",
    "//drake/bindings/pydrake/util",
])

PY_LIBRARIES = [
    ":backwards_compatibility_py",
]

# Symbol roll-up (for user ease).
drake_py_library(
    name = "all_py",
    srcs = ["all.py"],
    deps = PY_LIBRARIES_WITH_INSTALL + PY_LIBRARIES,
)

# Package roll-up (for Bazel dependencies).
drake_py_library(
    name = "pydrake",
    visibility = ["//visibility:public"],
    deps = [":all_py"],
)

install(
    name = "install",
    targets = PY_LIBRARIES + [":all_py"],
    py_dest = PACKAGE_INFO.py_dest,
    visibility = ["//visibility:public"],
    deps = get_drake_py_installs(PY_LIBRARIES_WITH_INSTALL),
)

drake_py_test(
    name = "all_test",
    data = ["//examples/pendulum:models"],
    deps = [":all_py"],
)

drake_py_test(
    name = "all_install_test",
    size = "medium",
    # Increase the timeout so that debug builds are successful.
    timeout = "long",
    data = ["//:install"],
    deps = [
        "//tools/install:install_test_helper",
    ],
)

# Test ODR (One Definition Rule).
drake_pybind_library(
    name = "odr_test_module_py",
    testonly = 1,
    add_install = False,
    cc_deps = [
        ":symbolic_types_pybind",
    ],
    cc_so_name = "test/odr_test_module",
    cc_srcs = ["test/odr_test_module_py.cc"],
    package_info = PACKAGE_INFO,
)

drake_py_test(
    name = "odr_test",
    size = "small",
    srcs = ["test/odr_test.py"],
    deps = [
        ":odr_test_module_py",
        ":symbolic_py",
    ],
)

drake_py_test(
    name = "common_test",
    size = "small",
    srcs = ["test/common_test.py"],
    data = ["//drake/examples/atlas:models"],
    main = "test/common_test.py",
    deps = [":common_py"],
)

# `//:install` is run in this test to verify that once installed
# pydrake still works. This test is implemented in a separate file from
# common_test to be able to remove files in the sandbox without
# interfering with other tests.
drake_py_test(
    name = "common_install_test",
    size = "medium",
    # Increase the timeout so that debug builds are successful.
    timeout = "long",
    data = ["//:install"],
    deps = [
        "//tools/install:install_test_helper",
    ],
)

drake_py_test(
    name = "forward_diff_test",
    size = "small",
    srcs = ["test/forward_diff_test.py"],
    main = "test/forward_diff_test.py",
    deps = [":autodiffutils_py"],
)

drake_py_test(
    name = "symbolic_variables_test",
    size = "small",
    srcs = ["test/symbolic_test.py"],
    main = "test/symbolic_test.py",
    deps = [":symbolic_py"],
)

drake_py_test(
    name = "backwards_compatability_test",
    deps = [
        ":backwards_compatibility_py",
    ],
)

add_lint_tests()
