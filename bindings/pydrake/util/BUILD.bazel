# -*- python -*-

load("@drake//tools/install:install.bzl", "install")
load("//tools/lint:lint.bzl", "add_lint_tests")
load(
    "//tools:drake.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
)
load(
    "//tools/skylark:pybind.bzl",
    "drake_pybind_cc_googletest",
    "get_drake_py_installs",
    "get_pybind_package_info",
)
load(
    "//tools/skylark:drake_py.bzl",
    "drake_py_library",
    "drake_py_test",
)
load(
    "//tools/skylark:6996.bzl",
    "adjust_label_for_drake_hoist",
    "adjust_labels_for_drake_hoist",
)

package(default_visibility = adjust_labels_for_drake_hoist([
    "//drake/bindings/pydrake:__subpackages__",
]))

# This determines how `PYTHONPATH` is configured, and how to install the
# bindings.
PACKAGE_INFO = get_pybind_package_info(
    base_package = adjust_label_for_drake_hoist("//drake/bindings"),
)

drake_cc_library(
    name = "type_pack",
    hdrs = ["type_pack.h"],
)

drake_cc_library(
    name = "wrap_function",
    hdrs = ["wrap_function.h"],
)

# This is a pure-python, standalone library SET.
# Keep this away from `common_py` to simplify test dependencies.
drake_py_library(
    name = "module_py",
    srcs = ["__init__.py"],
    imports = PACKAGE_INFO.py_imports,
)

drake_py_library(
    name = "module_shim_py",
    srcs = ["module_shim.py"],
    imports = PACKAGE_INFO.py_imports,
)

drake_cc_library(
    name = "eigen_pybind",
    hdrs = ["eigen_pybind.h"],
    deps = ["//bindings/pydrake:pydrake_pybind"],
)

# ODR does not matter, because the singleton will be stored in Python.
drake_cc_library(
    name = "cpp_param_pybind",
    srcs = ["cpp_param_pybind.cc"],
    hdrs = ["cpp_param_pybind.h"],
    deps = [
        ":type_pack",
        "//bindings/pydrake:pydrake_pybind",
        "@pybind11",
    ],
)

drake_py_library(
    name = "cpp_param_py",
    srcs = ["cpp_param.py"],
    deps = [
        ":module_py",
    ],
)

drake_py_library(
    name = "cpp_template_py",
    srcs = ["cpp_template.py"],
    deps = [
        ":cpp_param_py",
        ":module_py",
    ],
)

drake_cc_library(
    name = "cpp_template_pybind",
    srcs = [],
    hdrs = ["cpp_template_pybind.h"],
    deps = [
        ":cpp_param_pybind",
        "//bindings/pydrake:pydrake_pybind",
        "@pybind11",
    ],
)

drake_py_library(
    name = "cpp_const_py",
    srcs = ["cpp_const.py"],
    deps = [
        ":module_py",
        "//bindings/pydrake/third_party:wrapt_py",
    ],
)

drake_cc_library(
    name = "drake_optional_pybind",
    hdrs = ["drake_optional_pybind.h"],
)

PY_LIBRARIES_WITH_INSTALL = []

PY_LIBRARIES = [
    ":cpp_const_py",
    ":cpp_param_py",
    ":cpp_template_py",
    ":module_py",
    ":module_shim_py",
]

# Package target.
drake_py_library(
    name = "util",
    imports = PACKAGE_INFO.py_imports,
    deps = PY_LIBRARIES_WITH_INSTALL + PY_LIBRARIES,
)

install(
    name = "install",
    targets = PY_LIBRARIES,
    py_dest = PACKAGE_INFO.py_dest,
    deps = get_drake_py_installs(PY_LIBRARIES_WITH_INSTALL),
)

drake_cc_googletest(
    name = "type_pack_test",
    deps = [
        ":type_pack",
        "//common:nice_type_name",
    ],
)

drake_cc_googletest(
    name = "wrap_function_test",
    deps = [
        ":wrap_function",
    ],
)

drake_py_library(
    name = "module_shim_example",
    testonly = 1,
    srcs = [
        "test/module_shim_example/__init__.py",
        "test/module_shim_example/sub_module.py",
    ],
    imports = ["test"],
    deps = [":module_shim_py"],
)

drake_py_test(
    name = "module_shim_test",
    srcs = ["test/module_shim_test.py"],
    deps = [
        ":module_shim_example",
    ],
)

drake_py_test(
    name = "cpp_const_test",
    deps = [
        ":cpp_const_py",
    ],
)

drake_py_test(
    name = "cpp_param_test",
    deps = [
        ":cpp_param_py",
    ],
)

drake_pybind_cc_googletest(
    name = "cpp_param_pybind_test",
    cc_deps = [":cpp_param_pybind"],
    py_deps = [":cpp_param_py"],
)

drake_py_test(
    name = "cpp_template_test",
    deps = [
        ":cpp_template_py",
    ],
)

drake_pybind_cc_googletest(
    name = "cpp_template_pybind_test",
    cc_deps = [
        ":cpp_template_pybind",
        "//common:nice_type_name",
    ],
    py_deps = [":cpp_template_py"],
)

add_lint_tests()
