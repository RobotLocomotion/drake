function [df] = dynamicsGradients(a1, a2, a3, a4, order)
% This is an auto-generated file.
%
% See <a href="matlab: help generateGradients">generateGradients</a>. 

% Check inputs:
typecheck(a1,'UnderwaterAcrobotPlant');
if (nargin<4) order=1; end
if (order<1) error(' order must be >= 1'); end
sizecheck(a1,[1  1]);
sizecheck(a2,[1  1]);
sizecheck(a3,[4  1]);
sizecheck(a4,[1  1]);

% Symbol table:
I1=a1.I1;
I2=a1.I2;
L1=a1.L1;
L2=a1.L2;
a3_1=a3(1);
a3_2=a3(2);
a3_3=a3(3);
a3_4=a3(4);
a4_1=a4(1);
b1=a1.b1;
b2=a1.b2;
cd=a1.cd;
d1=a1.d1;
d2=a1.d2;
g=a1.g;
lc1=a1.lc1;
lc2=a1.lc2;
m1=a1.m1;
m2=a1.m2;
mr1=a1.mr1;
mr2=a1.mr2;
mth1=a1.mth1;
mth2=a1.mth2;
mx1=a1.mx1;
mx2=a1.mx2;
my2=a1.my2;
rho=a1.rho;


% Compute Gradients:
df = sparse(4,6);
df(1,4) = 1;
df(2,5) = 1;
df(3,2) = ((L1*g*(lc2^2*m2^2*mr1*cos(a3_1) + 2*I2*m2*mr1*cos(a3_1) - lc2^2*m2^2*mr1*cos(a3_1 + 2*a3_2) + 2*m2*mr1*mth2*cos(a3_1) + lc2^2*m2*mr1*mx2*cos(a3_1) - lc2^2*m2*mr1*mx2*cos(a3_1 + 2*a3_2) - lc2^2*m2^2*mr1*mr2*cos(a3_1) - 2*I2*m2*mr1*mr2*cos(a3_1) + lc2^2*m2^2*mr1*mr2*cos(a3_1 + 2*a3_2) - 2*m2*mr1*mr2*mth2*cos(a3_1) - lc2^2*m2*mr1*mr2*mx2*cos(a3_1) + lc2^2*m2*mr1*mr2*mx2*cos(a3_1 + 2*a3_2)))/2 + (g*lc1*(2*I2*m1*mr2*cos(a3_1) + 2*m1*mr2*mth2*cos(a3_1) + 2*lc2^2*m1*m2*mr2*cos(a3_1) + 2*lc2^2*m1*mr2*mx2*cos(a3_1) - 2*I2*m1*mr1*mr2*cos(a3_1) - 2*m1*mr1*mr2*mth2*cos(a3_1) - 2*lc2^2*m1*m2*mr1*mr2*cos(a3_1) - 2*lc2^2*m1*mr1*mr2*mx2*cos(a3_1)))/2)/(mr1*mr2*(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2));
df(3,3) = (((L1*a3_3^2*(m2 + mx2)*(2*lc2*cos(a3_2) - 2*L1 + 4*L1*cos(a3_2)^2))/2 - L1^2*a3_3^2*cos(2*a3_2)*(m2 + my2) + (g*lc2*m2*cos(a3_1 + a3_2)*(mr2 - 1))/mr2 - L1*L2*a3_3*cd*d2*lc2*rho*sin(a3_2)*abs(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2)))*(I2 + mth2 + lc2^2*m2 + lc2^2*mx2 + L1*lc2*m2*cos(a3_2) + L1*lc2*mx2*cos(a3_2)))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2) - ((I2 + mth2 + lc2^2*m2 + lc2^2*mx2)*(2*L1^2*a3_3*a3_4*cos(2*a3_2)*(m2 + my2) - L1*a3_4*(m2 + mx2)*(2*L1*a3_3*(2*cos(a3_2)^2 - 1) + 2*a3_3*lc2*cos(a3_2) + a3_4*lc2*cos(a3_2)) + (g*lc2*m2*cos(a3_1 + a3_2)*(mr2 - 1))/mr2 + (L1^3*pi*a3_3^2*cd*d2^2*rho*sign(L1*a3_3*sin(a3_2))*(cos(a3_2) - cos(a3_2)^3))/4 - (L1*L2*cd*d2*rho*sin(a3_2)*sign(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))^2)/2 + (L1^3*pi*a3_3^2*cd*d2^2*rho*sign(L1*a3_3*sin(a3_2))*cos(a3_2)*sin(a3_2)^2)/8 - L1*L2*a3_3*cd*d2*rho*sin(a3_2)*abs(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(lc2 + L1*cos(a3_2))))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2) - (L1^2*sin(2*a3_2)*(a3_4*b2 - a4_1 - (L1^2*a3_3^2*sin(2*a3_2)*(m2 + my2))/2 + (L1*a3_3^2*(m2 + mx2)*(2*lc2*sin(a3_2) + L1*sin(2*a3_2)))/2 + (g*lc2*m2*sin(a3_1 + a3_2)*(mr2 - 1))/mr2 + (L2*cd*d2*lc2*rho*sign(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))^2)/2)*(I2 + mth2 + lc2^2*m2 + lc2^2*mx2 + L1*lc2*m2*cos(a3_2) + L1*lc2*mx2*cos(a3_2))*(I2*my2 - I2*mx2 - mth2*mx2 + mth2*my2 + lc2^2*m2^2 + lc2^2*m2*mx2 + lc2^2*m2*my2 + lc2^2*mx2*my2))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2)^2 - (L1*lc2*sin(a3_2)*(m2 + mx2)*(a3_4*b2 - a4_1 - (L1^2*a3_3^2*sin(2*a3_2)*(m2 + my2))/2 + (L1*a3_3^2*(m2 + mx2)*(2*lc2*sin(a3_2) + L1*sin(2*a3_2)))/2 + (g*lc2*m2*sin(a3_1 + a3_2)*(mr2 - 1))/mr2 + (L2*cd*d2*lc2*rho*sign(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))^2)/2))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2) + (L1^2*sin(2*a3_2)*(I2 + mth2 + lc2^2*m2 + lc2^2*mx2)*(I2*my2 - I2*mx2 - mth2*mx2 + mth2*my2 + lc2^2*m2^2 + lc2^2*m2*mx2 + lc2^2*m2*my2 + lc2^2*mx2*my2)*(a3_3*b1 - L1*a3_4*(m2 + mx2)*(2*a3_3*lc2*sin(a3_2) + a3_4*lc2*sin(a3_2) + L1*a3_3*sin(2*a3_2)) + L1^2*a3_3*a3_4*sin(2*a3_2)*(m2 + my2) + (g*lc1*m1*sin(a3_1)*(mr1 - 1))/mr1 + (g*lc2*m2*sin(a3_1 + a3_2)*(mr2 - 1))/mr2 + (L1*g*m2*sin(a3_1)*(mr2 - 1))/mr2 + (L2*cd*d2*rho*sign(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(lc2 + L1*cos(a3_2))*(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))^2)/2 + (L1*a3_3^2*cd*d1*lc1^3*rho*sign(a3_3*lc1))/2 + (L1^3*pi*a3_3^2*cd*d2^2*rho*sign(L1*a3_3*sin(a3_2))*sin(a3_2)^3)/8))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2)^2;
df(3,4) = ((L1*a3_3*(m2 + mx2)*(2*lc2*sin(a3_2) + L1*sin(2*a3_2)) - L1^2*a3_3*sin(2*a3_2)*(m2 + my2) + L2*cd*d2*lc2*rho*abs(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(lc2 + L1*cos(a3_2)))*(I2 + mth2 + lc2^2*m2 + lc2^2*mx2 + L1*lc2*m2*cos(a3_2) + L1*lc2*mx2*cos(a3_2)))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2) - ((I2 + mth2 + lc2^2*m2 + lc2^2*mx2)*(b1 - L1*a3_4*(m2 + mx2)*(2*lc2*sin(a3_2) + L1*sin(2*a3_2)) + L1^2*a3_4*sin(2*a3_2)*(m2 + my2) + L2*cd*d2*rho*abs(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(lc2 + L1*cos(a3_2))^2 + L1*a3_3*cd*d1*lc1^3*rho*sign(a3_3*lc1) + (L1^3*pi*a3_3*cd*d2^2*rho*sign(L1*a3_3*sin(a3_2))*sin(a3_2)^3)/4))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2);
df(3,5) = (I2*b2 + b2*mth2 + b2*lc2^2*m2 + b2*lc2^2*mx2 + L1^2*a3_3*lc2^2*mx2^2*sin(2*a3_2) + I2*L1^2*a3_3*mx2*sin(2*a3_2) - I2*L1^2*a3_3*my2*sin(2*a3_2) + 2*L1*a3_3*lc2^3*m2^2*sin(a3_2) + 2*L1*a3_4*lc2^3*m2^2*sin(a3_2) + 2*L1*a3_3*lc2^3*mx2^2*sin(a3_2) + 2*L1*a3_4*lc2^3*mx2^2*sin(a3_2) + L1^2*a3_3*mth2*mx2*sin(2*a3_2) - L1^2*a3_3*mth2*my2*sin(2*a3_2) + L1*b2*lc2*m2*cos(a3_2) + L1*b2*lc2*mx2*cos(a3_2) + 2*I2*L1*a3_3*lc2*m2*sin(a3_2) + 2*I2*L1*a3_4*lc2*m2*sin(a3_2) + 2*I2*L1*a3_3*lc2*mx2*sin(a3_2) + 2*I2*L1*a3_4*lc2*mx2*sin(a3_2) + 2*L1*a3_3*lc2*m2*mth2*sin(a3_2) + 2*L1*a3_4*lc2*m2*mth2*sin(a3_2) + 2*L1*a3_3*lc2*mth2*mx2*sin(a3_2) + 2*L1*a3_4*lc2*mth2*mx2*sin(a3_2) + L1^2*a3_3*lc2^2*m2*mx2*sin(2*a3_2) - L1^2*a3_3*lc2^2*m2*my2*sin(2*a3_2) - L1^2*a3_3*lc2^2*mx2*my2*sin(2*a3_2) + 4*L1*a3_3*lc2^3*m2*mx2*sin(a3_2) + 4*L1*a3_4*lc2^3*m2*mx2*sin(a3_2) - I2*L1*L2*cd*d2*lc2*rho*cos(a3_2)*abs(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2)) - L1*L2*cd*d2*lc2*mth2*rho*cos(a3_2)*abs(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2)))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + L1^2*lc2^2*m2^2 + I2*L1^2*m2 + I2*L1^2*my2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*my2 + L1^2*mth2*mx2*cos(a3_2)^2 - L1^2*mth2*my2*cos(a3_2)^2 + L1^2*lc2^2*m2*mx2 + L1^2*lc2^2*m2*my2 + L1^2*lc2^2*mx2*my2 - L1^2*lc2^2*m2^2*cos(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + I2*L1^2*mx2*cos(a3_2)^2 - I2*L1^2*my2*cos(a3_2)^2 - L1^2*lc2^2*m2*mx2*cos(a3_2)^2 - L1^2*lc2^2*m2*my2*cos(a3_2)^2 - L1^2*lc2^2*mx2*my2*cos(a3_2)^2);
df(3,6) = -(I2 + mth2 + lc2^2*mx2 + m2*(lc2^2 + L1*lc2*cos(a3_2)) + L1*lc2*mx2*cos(a3_2))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2);
df(4,2) = (((g*lc2*m2*cos(a3_1 + a3_2)*(mr2 - 1))/mr2 + (L1*g*m2*cos(a3_1)*(mr2 - 1))/mr2 + (g*lc1*m1*cos(a3_1)*(mr1 - 1))/mr1)*(I2 + mth2 + lc2^2*m2 + lc2^2*mx2 + L1*lc2*m2*cos(a3_2) + L1*lc2*mx2*cos(a3_2)))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2) - (g*lc2*m2*cos(a3_1 + a3_2)*(mr2 - 1)*(I1 + I2 + mth1 + mth2 + L1^2*m2 + L1^2*my2 + lc1^2*m1 + lc2^2*m2 + lc1^2*mx1 + lc2^2*mx2 + L1^2*mx2*cos(a3_2)^2 - L1^2*my2*cos(a3_2)^2 + 2*L1*lc2*m2*cos(a3_2) + 2*L1*lc2*mx2*cos(a3_2)))/(mr2*(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2));
df(4,3) = ((I2 + mth2 + lc2^2*m2 + lc2^2*mx2 + L1*lc2*m2*cos(a3_2) + L1*lc2*mx2*cos(a3_2))*(2*L1^2*a3_3*a3_4*cos(2*a3_2)*(m2 + my2) - L1*a3_4*(m2 + mx2)*(2*L1*a3_3*(2*cos(a3_2)^2 - 1) + 2*a3_3*lc2*cos(a3_2) + a3_4*lc2*cos(a3_2)) + (g*lc2*m2*cos(a3_1 + a3_2)*(mr2 - 1))/mr2 + (L1^3*pi*a3_3^2*cd*d2^2*rho*sign(L1*a3_3*sin(a3_2))*(cos(a3_2) - cos(a3_2)^3))/4 - (L1*L2*cd*d2*rho*sin(a3_2)*sign(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))^2)/2 + (L1^3*pi*a3_3^2*cd*d2^2*rho*sign(L1*a3_3*sin(a3_2))*cos(a3_2)*sin(a3_2)^2)/8 - L1*L2*a3_3*cd*d2*rho*sin(a3_2)*abs(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(lc2 + L1*cos(a3_2))))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2) - (((L1*a3_3^2*(m2 + mx2)*(2*lc2*cos(a3_2) - 2*L1 + 4*L1*cos(a3_2)^2))/2 - L1^2*a3_3^2*cos(2*a3_2)*(m2 + my2) + (g*lc2*m2*cos(a3_1 + a3_2)*(mr2 - 1))/mr2 - L1*L2*a3_3*cd*d2*lc2*rho*sin(a3_2)*abs(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2)))*(I1 + I2 + mth1 + mth2 + L1^2*m2 + L1^2*my2 + lc1^2*m1 + lc2^2*m2 + lc1^2*mx1 + lc2^2*mx2 + L1^2*mx2*cos(a3_2)^2 - L1^2*my2*cos(a3_2)^2 + 2*L1*lc2*m2*cos(a3_2) + 2*L1*lc2*mx2*cos(a3_2)))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2) + (L1*(2*lc2*m2*sin(a3_2) + 2*lc2*mx2*sin(a3_2) + L1*mx2*sin(2*a3_2) - L1*my2*sin(2*a3_2))*(a3_4*b2 - a4_1 - (L1^2*a3_3^2*sin(2*a3_2)*(m2 + my2))/2 + (L1*a3_3^2*(m2 + mx2)*(2*lc2*sin(a3_2) + L1*sin(2*a3_2)))/2 + (g*lc2*m2*sin(a3_1 + a3_2)*(mr2 - 1))/mr2 + (L2*cd*d2*lc2*rho*sign(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))^2)/2))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2) + (L1^2*sin(2*a3_2)*(a3_4*b2 - a4_1 - (L1^2*a3_3^2*sin(2*a3_2)*(m2 + my2))/2 + (L1*a3_3^2*(m2 + mx2)*(2*lc2*sin(a3_2) + L1*sin(2*a3_2)))/2 + (g*lc2*m2*sin(a3_1 + a3_2)*(mr2 - 1))/mr2 + (L2*cd*d2*lc2*rho*sign(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))^2)/2)*(I2*my2 - I2*mx2 - mth2*mx2 + mth2*my2 + lc2^2*m2^2 + lc2^2*m2*mx2 + lc2^2*m2*my2 + lc2^2*mx2*my2)*(I1 + I2 + mth1 + mth2 + L1^2*m2 + L1^2*my2 + lc1^2*m1 + lc2^2*m2 + lc1^2*mx1 + lc2^2*mx2 + L1^2*mx2*cos(a3_2)^2 - L1^2*my2*cos(a3_2)^2 + 2*L1*lc2*m2*cos(a3_2) + 2*L1*lc2*mx2*cos(a3_2)))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2)^2 - (L1^2*sin(2*a3_2)*(I2 + mth2 + lc2^2*m2 + lc2^2*mx2 + L1*lc2*m2*cos(a3_2) + L1*lc2*mx2*cos(a3_2))*(I2*my2 - I2*mx2 - mth2*mx2 + mth2*my2 + lc2^2*m2^2 + lc2^2*m2*mx2 + lc2^2*m2*my2 + lc2^2*mx2*my2)*(a3_3*b1 - L1*a3_4*(m2 + mx2)*(2*a3_3*lc2*sin(a3_2) + a3_4*lc2*sin(a3_2) + L1*a3_3*sin(2*a3_2)) + L1^2*a3_3*a3_4*sin(2*a3_2)*(m2 + my2) + (g*lc1*m1*sin(a3_1)*(mr1 - 1))/mr1 + (g*lc2*m2*sin(a3_1 + a3_2)*(mr2 - 1))/mr2 + (L1*g*m2*sin(a3_1)*(mr2 - 1))/mr2 + (L2*cd*d2*rho*sign(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(lc2 + L1*cos(a3_2))*(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))^2)/2 + (L1*a3_3^2*cd*d1*lc1^3*rho*sign(a3_3*lc1))/2 + (L1^3*pi*a3_3^2*cd*d2^2*rho*sign(L1*a3_3*sin(a3_2))*sin(a3_2)^3)/8))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2)^2 - (L1*lc2*sin(a3_2)*(m2 + mx2)*(a3_3*b1 - L1*a3_4*(m2 + mx2)*(2*a3_3*lc2*sin(a3_2) + a3_4*lc2*sin(a3_2) + L1*a3_3*sin(2*a3_2)) + L1^2*a3_3*a3_4*sin(2*a3_2)*(m2 + my2) + (g*lc1*m1*sin(a3_1)*(mr1 - 1))/mr1 + (g*lc2*m2*sin(a3_1 + a3_2)*(mr2 - 1))/mr2 + (L1*g*m2*sin(a3_1)*(mr2 - 1))/mr2 + (L2*cd*d2*rho*sign(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(lc2 + L1*cos(a3_2))*(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))^2)/2 + (L1*a3_3^2*cd*d1*lc1^3*rho*sign(a3_3*lc1))/2 + (L1^3*pi*a3_3^2*cd*d2^2*rho*sign(L1*a3_3*sin(a3_2))*sin(a3_2)^3)/8))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2);
df(4,4) = ((b1 - L1*a3_4*(m2 + mx2)*(2*lc2*sin(a3_2) + L1*sin(2*a3_2)) + L1^2*a3_4*sin(2*a3_2)*(m2 + my2) + L2*cd*d2*rho*abs(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(lc2 + L1*cos(a3_2))^2 + L1*a3_3*cd*d1*lc1^3*rho*sign(a3_3*lc1) + (L1^3*pi*a3_3*cd*d2^2*rho*sign(L1*a3_3*sin(a3_2))*sin(a3_2)^3)/4)*(I2 + mth2 + lc2^2*m2 + lc2^2*mx2 + L1*lc2*m2*cos(a3_2) + L1*lc2*mx2*cos(a3_2)))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2) - ((L1*a3_3*(m2 + mx2)*(2*lc2*sin(a3_2) + L1*sin(2*a3_2)) - L1^2*a3_3*sin(2*a3_2)*(m2 + my2) + L2*cd*d2*lc2*rho*abs(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(lc2 + L1*cos(a3_2)))*(I1 + I2 + mth1 + mth2 + L1^2*m2 + L1^2*my2 + lc1^2*m1 + lc2^2*m2 + lc1^2*mx1 + lc2^2*mx2 + L1^2*mx2*cos(a3_2)^2 - L1^2*my2*cos(a3_2)^2 + 2*L1*lc2*m2*cos(a3_2) + 2*L1*lc2*mx2*cos(a3_2)))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2);
df(4,5) = - ((b2 + L2*cd*d2*lc2^2*rho*abs(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2)))*(I1 + I2 + mth1 + mth2 + L1^2*m2 + L1^2*my2 + lc1^2*m1 + lc2^2*m2 + lc1^2*mx1 + lc2^2*mx2 + L1^2*mx2*cos(a3_2)^2 - L1^2*my2*cos(a3_2)^2 + 2*L1*lc2*m2*cos(a3_2) + 2*L1*lc2*mx2*cos(a3_2)))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2) - ((L1*(m2 + mx2)*(2*a3_3*lc2*sin(a3_2) + a3_4*lc2*sin(a3_2) + L1*a3_3*sin(2*a3_2)) - L1^2*a3_3*sin(2*a3_2)*(m2 + my2) + L1*a3_4*lc2*sin(a3_2)*(m2 + mx2) - L2*cd*d2*lc2*rho*abs(a3_3*lc2 + a3_4*lc2 + L1*a3_3*cos(a3_2))*(lc2 + L1*cos(a3_2)))*(I2 + mth2 + lc2^2*m2 + lc2^2*mx2 + L1*lc2*m2*cos(a3_2) + L1*lc2*mx2*cos(a3_2)))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2);
df(4,6) = (I1 + I2 + mth1 + mth2 + L1^2*my2 + m2*(L1^2 + lc2^2 + 2*L1*lc2*cos(a3_2)) + lc1^2*m1 + lc1^2*mx1 + lc2^2*mx2 + L1^2*mx2*cos(a3_2)^2 - L1^2*my2*cos(a3_2)^2 + 2*L1*lc2*mx2*cos(a3_2))/(I1*mth2 + I2*mth1 + mth1*mth2 + I1*I2 + lc1^2*m1*mth2 + lc2^2*m2*mth1 + lc1^2*mth2*mx1 + lc2^2*mth1*mx2 + I2*L1^2*m2 + I2*L1^2*mx2 + I2*lc1^2*m1 + I1*lc2^2*m2 + I2*lc1^2*mx1 + I1*lc2^2*mx2 + L1^2*m2*mth2 + L1^2*mth2*mx2 - L1^2*mth2*mx2*sin(a3_2)^2 + L1^2*mth2*my2*sin(a3_2)^2 + lc1^2*lc2^2*m1*m2 + lc1^2*lc2^2*m1*mx2 + lc1^2*lc2^2*m2*mx1 + lc1^2*lc2^2*mx1*mx2 + L1^2*lc2^2*m2^2*sin(a3_2)^2 - I2*L1^2*mx2*sin(a3_2)^2 + I2*L1^2*my2*sin(a3_2)^2 + L1^2*lc2^2*m2*mx2*sin(a3_2)^2 + L1^2*lc2^2*m2*my2*sin(a3_2)^2 + L1^2*lc2^2*mx2*my2*sin(a3_2)^2);


 % NOTEST
