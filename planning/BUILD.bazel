load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_package_library",
)
load("//tools/lint:lint.bzl", "add_lint_tests")

package(default_visibility = ["//visibility:public"])

drake_cc_package_library(
    name = "planning",
    visibility = ["//visibility:public"],
    deps = [
        ":body_shape_description",
        ":collision_avoidance",
        ":collision_checker",
        ":collision_checker_context",
        ":collision_checker_params",
        ":mbp_environment_collision_checker",
        ":robot_clearance",
        ":robot_collision_type",
        ":robot_diagram",
        ":robot_diagram_builder",
        ":scene_graph_collision_checker",
        ":sphere_robot_model_collision_checker",
        ":unimplemented_collision_checker",
        ":voxelized_environment_builder",
        ":voxelized_environment_collision_checker",
    ],
)

drake_cc_library(
    name = "body_shape_description",
    srcs = ["body_shape_description.cc"],
    hdrs = ["body_shape_description.h"],
    deps = [
        "//common:essential",
        "//geometry",
        "//multibody/plant",
    ],
)

drake_cc_library(
    name = "collision_avoidance",
    srcs = ["collision_avoidance.cc"],
    hdrs = ["collision_avoidance.h"],
    deps = [
        ":collision_checker",
    ],
)

drake_cc_library(
    name = "collision_checker",
    srcs = ["collision_checker.cc"],
    hdrs = [
        "collision_checker.h",
        "edge_measure.h",
    ],
    interface_deps = [
        ":body_shape_description",
        ":collision_checker_context",
        ":collision_checker_params",
        ":robot_clearance",
        ":robot_collision_type",
        ":robot_diagram_builder",
        "//common:essential",
        "//geometry",
        "//multibody/plant",
    ],
    deps = [
        "@common_robotics_utilities",
    ],
)

drake_cc_library(
    name = "collision_checker_context",
    srcs = ["collision_checker_context.cc"],
    hdrs = ["collision_checker_context.h"],
    deps = [
        ":robot_diagram",
        "//common:essential",
    ],
)

drake_cc_library(
    name = "collision_checker_params",
    hdrs = ["collision_checker_params.h"],
    deps = [
        ":robot_diagram",
        "//multibody/tree:multibody_tree_indexes",
    ],
)

drake_cc_library(
    name = "mbp_environment_collision_checker",
    srcs = ["mbp_environment_collision_checker.cc"],
    hdrs = ["mbp_environment_collision_checker.h"],
    interface_deps = [
        # XXX ":robot_diagram_builder",
        # XXX ":body_shape_description",
        ":sphere_robot_model_collision_checker",
        ":collision_checker",
        ":collision_checker_params",
        "//common:essential",
        "//geometry",
        "//multibody/plant",
    ],
    deps = [
        "@common_robotics_utilities",
    ],
)

drake_cc_library(
    name = "robot_clearance",
    srcs = ["robot_clearance.cc"],
    hdrs = ["robot_clearance.h"],
    deps = [
        ":robot_collision_type",
        "//common:essential",
        "//multibody/tree:multibody_tree_indexes",
    ],
)

drake_cc_library(
    name = "robot_collision_type",
    hdrs = ["robot_collision_type.h"],
)

drake_cc_library(
    name = "robot_diagram",
    srcs = ["robot_diagram.cc"],
    hdrs = ["robot_diagram.h"],
    deps = [
        "//common:default_scalars",
        "//geometry:scene_graph",
        "//multibody/plant",
        "//systems/framework:diagram",
        "//systems/framework:diagram_builder",
    ],
)

drake_cc_library(
    name = "robot_diagram_builder",
    srcs = ["robot_diagram_builder.cc"],
    hdrs = ["robot_diagram_builder.h"],
    deps = [
        ":robot_diagram",
        "//common:default_scalars",
        "//geometry:scene_graph",
        "//multibody/parsing",
        "//multibody/plant",
        "//systems/framework:diagram_builder",
    ],
)

drake_cc_library(
    name = "scene_graph_collision_checker",
    srcs = ["scene_graph_collision_checker.cc"],
    hdrs = ["scene_graph_collision_checker.h"],
    interface_deps = [
        ":collision_checker",
        ":collision_checker_params",
    ],
    deps = [
        ":robot_diagram",
        "//geometry",
        "//multibody/plant",
    ],
)

drake_cc_library(
    name = "unimplemented_collision_checker",
    srcs = ["unimplemented_collision_checker.cc"],
    hdrs = ["unimplemented_collision_checker.h"],
    deps = [
        ":collision_checker",
        ":collision_checker_params",
    ],
)

drake_cc_library(
    name = "voxelized_environment_builder",
    srcs = ["voxelized_environment_builder.cc"],
    hdrs = ["voxelized_environment_builder.h"],
    interface_deps = [
        ":body_shape_description",
        "//common:essential",
        "//geometry",
        "//multibody/plant",
        # XXX TODO(jwnimmer-tri) This cannot be interface_deps.
        "@voxelized_geometry_tools",
        # XXX TODO(jwnimmer-tri) This cannot be interface_deps.
        "@common_robotics_utilities",
    ],
    deps = [],
)

drake_cc_library(
    name = "voxelized_environment_collision_checker",
    srcs = ["voxelized_environment_collision_checker.cc"],
    hdrs = ["voxelized_environment_collision_checker.h"],
    interface_deps = [
        ":body_shape_description",
        ":collision_checker",
        ":collision_checker_params",
        ":robot_diagram_builder",
        ":sphere_robot_model_collision_checker",
        "//common:essential",
        "//geometry",
        "//multibody/plant",
        # XXX TODO(jwnimmer-tri) This cannot be interface_deps.
        "@voxelized_geometry_tools",
    ],
    deps = [
        "@common_robotics_utilities",
    ],
)

drake_cc_library(
    name = "planning_test_helpers",
    testonly = True,
    srcs = ["test/planning_test_helpers.cc"],
    hdrs = ["test/planning_test_helpers.h"],
    visibility = ["//visibility:private"],
    deps = [
        ":collision_checker",
        ":robot_diagram",
        "//multibody/parsing",
    ],
)

drake_cc_googletest(
    name = "body_shape_description_test",
    deps = [
        ":body_shape_description",
        ":robot_diagram_builder",
        "//multibody/parsing",
        "//multibody/plant",
    ],
)

drake_cc_googletest(
    name = "collision_avoidance_test",
    deps = [
        ":collision_avoidance",
        ":robot_diagram_builder",
        ":unimplemented_collision_checker",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "collision_checker_test",
    # Be sure to exercise OpenMP-related features.
    num_threads = 2,
    deps = [
        ":collision_checker",
        ":planning_test_helpers",
        ":unimplemented_collision_checker",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
        "@common_robotics_utilities",
    ],
)

drake_cc_googletest(
    name = "collision_checker_context_test",
    deps = [
        ":collision_checker_context",
        ":robot_diagram_builder",
    ],
)

drake_cc_googletest(
    name = "mbp_environment_collision_checker_test",
    timeout = "moderate",
    # Be sure to exercise OpenMP-related features.
    num_threads = 2,
    deps = [
        ":mbp_environment_collision_checker",
        ":planning_test_helpers",
        "//planning/test_utilities:collision_checker_abstract_test_suite",
        "//planning/test_utilities:sphere_robot_model_collision_checker_abstract_test_suite",  # noqa
    ],
)

drake_cc_googletest(
    name = "robot_clearance_test",
    deps = [
        ":robot_clearance",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "robot_collision_type_test",
    deps = [
        ":robot_collision_type",
    ],
)

drake_cc_googletest(
    name = "robot_diagram_test",
    data = [
        "//manipulation/models/iiwa_description:models",
    ],
    deps = [
        ":robot_diagram",
        ":robot_diagram_builder",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "scene_graph_collision_checker_test",
    timeout = "moderate",
    data = [
        "//manipulation/models/ycb:models",
    ],
    # Be sure to exercise OpenMP-related features.
    num_threads = 2,
    deps = [
        ":planning_test_helpers",
        ":scene_graph_collision_checker",
        "//common/test_utilities:eigen_matrix_compare",
        "//planning/test_utilities:collision_checker_abstract_test_suite",
    ],
)

drake_cc_library(
    name = "sphere_robot_model_collision_checker",
    srcs = ["sphere_robot_model_collision_checker.cc"],
    hdrs = ["sphere_robot_model_collision_checker.h"],
    interface_deps = [
        ":collision_checker",
        ":collision_checker_params",
        "//common:essential",
        "//geometry",
        "//multibody/plant",
    ],
    deps = [
        # ":body_shape_description",
        # ":robot_diagram_builder",
        "@common_robotics_utilities",
    ],
)

drake_cc_googletest(
    name = "unimplemented_collision_checker_test",
    deps = [
        ":unimplemented_collision_checker",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "voxelized_environment_builder_test",
    data = [
        # XXX "//models:test",
    ],
    # Be sure to exercise OpenMP-related features.
    num_threads = 2,
    deps = [
        ":planning_test_helpers",
        ":voxelized_environment_builder",
        "//common:essential",
        "//geometry",
        "//multibody/plant",
        "//systems/framework:diagram",
        "@common_robotics_utilities",
        "@voxelized_geometry_tools",
    ],
)

drake_cc_googletest(
    name = "voxelized_environment_collision_checker_test",
    timeout = "moderate",
    # Be sure to exercise OpenMP-related features.
    num_threads = 2,
    deps = [
        ":planning_test_helpers",
        ":voxelized_environment_builder",
        ":voxelized_environment_collision_checker",
        "//planning/test_utilities:collision_checker_abstract_test_suite",  # noqa
        "//planning/test_utilities:sphere_robot_model_collision_checker_abstract_test_suite",  # noqa
    ],
)

add_lint_tests(enable_clang_format_lint = False)
