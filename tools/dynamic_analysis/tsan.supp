# lock-order-inversion (libmosek64.*) in lc_auth_data
deadlock:lc_auth_data

# unlock of an unlocked mutex (libmosek64.*) in l_mt_unlock
mutex:l_mt_unlock

# unlock of an unlocked mutex (libmosek64.*) in lc_checkout
mutex:lc_checkout

# The OpenMP runtime bundled with MOSEK has not been generated with TSan support on. https://reviews.llvm.org/D13072
# data race (libiomp5.*) in __kmp_resume
race:__kmp_resume

# data race (libiomp5.*) in __kmp_suspend_uninitialize_thread
race:__kmp_suspend_uninitialize_thread

# data race (libiomp5.*) in __kmp_launch_monitor
race:__kmp_launch_monitor

# thread leak (libiomp5.*) in __kmp_create_worker
thread:__kmp_create_worker

# thread leak (libiomp5.*) in __kmp_create_monitor
thread:__kmp_create_monitor

# data race libmosek64.so.8.1.  MOSEK has not been instrumented with TSan.
called_from_lib:libmosek64.so.8.1

# data race (libglib-2.0.*) in g_static_rec_mutex_lock
race:g_static_rec_mutex_lock

# data race in libgurobi80.so.  Gurobi has not been instrumented with TSan.
called_from_lib:libgurobi.so
called_from_lib:libgurobi80.so

# data race in libtbb.so.  libtbb has not been instrumented with TSan.
called_from_lib:libtbb.so

# leak in libtbb.so
thread:libtbb.so

# thread leak in libembree3.so.  libembree3 has not been instrumented with TSan.
called_from_lib:libembree3.so

# Somehow libtbb appears to be trying to release a thread twice, the
# second time inside a global destructor.
race:__cxa_finalize
mutex:__cxa_finalize
