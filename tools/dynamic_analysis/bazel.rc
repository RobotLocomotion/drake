# This is a portion of Drake's bazel.rc defaults.
# This filed is included by //tools:bazel.rc.

### Kcov coverage build. ###
build:kcov --copt -g
build:kcov --copt -O0
test:kcov --spawn_strategy=standalone
test:kcov --run_under //tools/dynamic_analysis:kcov
test:kcov --local_test_jobs=1
test:kcov --test_tag_filters=-cpplint,-gurobi,-pycodestyle
test:kcov --nocache_test_results

### ASan build. ###
build:asan --copt -g
build:asan --copt -fsanitize=address
build:asan --copt -O1
build:asan --copt -fno-omit-frame-pointer
build:asan --linkopt -fsanitize=address
test:asan --run_under=//tools/dynamic_analysis:asan
test:asan --test_env=ASAN_OPTIONS
test:asan --test_env=LSAN_OPTIONS
test:asan --test_env=ASAN_SYMBOLIZER_PATH
# LSan is run with ASan by default
test:asan --test_tag_filters=-gurobi,-mosek,-snopt,-no_asan,-no_lsan
test:asan --test_lang_filters=-py
# Typical slowdown introduced by AddressSanitizer is 2x.
# See https://clang.llvm.org/docs/AddressSanitizer.html
test:asan --test_timeout=120,600,1800,7200

### ASan everything build. ###
build:asan_everything --define=WITH_GUROBI=ON
build:asan_everything --define=WITH_MOSEK=ON
build:asan_everything --define=WITH_SNOPT=ON
build:asan_everything --copt -g
build:asan_everything --copt -fsanitize=address
build:asan_everything --copt -O1
build:asan_everything --copt -fno-omit-frame-pointer
build:asan_everything --linkopt -fsanitize=address

test:asan_everything --test_env=GRB_LICENSE_FILE
test:asan_everything --test_env=HOME
# LSan is run with ASan by default
test:asan_everything --test_tag_filters=-no_asan,-no_lsan
test:asan_everything --run_under=//tools/dynamic_analysis:asan
test:asan_everything --test_env=ASAN_OPTIONS
test:asan_everything --test_env=LSAN_OPTIONS
test:asan_everything --test_env=ASAN_SYMBOLIZER_PATH
test:asan_everything --test_lang_filters=-py
# Typical slowdown introduced by AddressSanitizer is 2x.
# See https://clang.llvm.org/docs/AddressSanitizer.html
test:asan_everything--test_timeout=120,600,1800,7200

### LSan build. ###
build:lsan --copt -g
build:lsan --copt -fsanitize=leak
build:lsan --copt -O1
build:lsan --copt -fno-omit-frame-pointer
build:lsan --linkopt -fsanitize=leak
test:lsan --run_under=//tools/dynamic_analysis:lsan
test:lsan --test_env=LSAN_OPTIONS
test:lsan --test_env=LSAN_SYMBOLIZER_PATH
test:lsan --test_tag_filters=-gurobi,-mosek,-snopt,-no_lsan
test:lsan --test_lang_filters=-py

### LSan everything build. ###
build:lsan_everything --define=WITH_GUROBI=ON
build:lsan_everything --define=WITH_MOSEK=ON
build:lsan_everything --define=WITH_SNOPT=ON
build:lsan_everything --copt -g
build:lsan_everything --copt -fsanitize=leak
build:lsan_everything --copt -O1
build:lsan_everything --copt -fno-omit-frame-pointer
build:lsan_everything --linkopt -fsanitize=leak

test:lsan_everything --test_env=GRB_LICENSE_FILE
test:lsan_everything --test_env=HOME
test:lsan_everything --test_tag_filters=-no_lsan
test:lsan_everything --run_under=//tools/dynamic_analysis:lsan
test:lsan_everything --test_env=LSAN_OPTIONS
test:lsan_everything --test_env=LSAN_SYMBOLIZER_PATH
test:lsan_everything --test_lang_filters=-py

### MSan build. ###
build:msan --copt -g
build:msan --copt -fsanitize=memory
build:msan --copt -fsanitize-memory-track-origins
build:msan --copt -O1
build:msan --copt -fno-omit-frame-pointer
build:msan --linkopt -fsanitize=memory
test:msan --run_under=//tools/dynamic_analysis:msan
test:msan --test_tag_filters=-gurobi,-mosek,-snopt,-no_msan
test:msan --test_lang_filters=-py
test:msan --test_env=MSAN_OPTIONS
test:msan --test_env=MSAN_SYMBOLIZER_PATH
# Typical slowdown introduced by MemorySanitizer is 3x.
# See https://clang.llvm.org/docs/MemorySanitizer.html
test:msan --test_timeout=180,900,2700,10800

### MSan everything build. ###
build:msan_everything --define=WITH_GUROBI=ON
build:msan_everything --define=WITH_MOSEK=ON
build:msan_everything --define=WITH_SNOPT=ON
build:msan_everything --copt -g
build:msan_everything --copt -fsanitize=memory
build:msan_everything --copt -fsanitize-memory-track-origins
build:msan_everything --copt -O1
build:msan_everything --copt -fno-omit-frame-pointer
build:msan_everything --linkopt -fsanitize=memory

test:msan_everything --test_env=GRB_LICENSE_FILE
test:msan_everything --test_env=HOME
test:msan_everything --test_tag_filters=-no_msan
test:msan_everything --run_under=//tools/dynamic_analysis:msan
test:msan_everything --test_lang_filters=-py
test:msan_everything --test_env=MSAN_OPTIONS
test:msan_everything --test_env=MSAN_SYMBOLIZER_PATH
# Typical slowdown introduced by MemorySanitizer is 3x.
# See https://clang.llvm.org/docs/MemorySanitizer.html
test:msan_everything --test_timeout=180,900,2700,10800

### TSan build. ###
build:tsan --copt -g
build:tsan --copt -fsanitize=thread
build:tsan --copt -O1
build:tsan --copt -fno-omit-frame-pointer
# From Tsan documentation for Clang-3.9:
# fsanitize=thread flag will cause Clang to act as though the -fPIE flag
# had been supplied if compiling without -fPIC, and as though the
# -pie flag had been supplied if linking an executable
# Bug in GCC: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67308
build:tsan --noforce_pic
build:tsan --linkopt -fsanitize=thread
test:tsan --run_under=//tools/dynamic_analysis:tsan
test:tsan --test_env=TSAN_OPTIONS
test:tsan --test_tag_filters=-gurobi,-mosek,-snopt,-no_tsan
test:tsan --test_lang_filters=-py
# Typical slowdown introduced by ThreadSanitizer is about 5x-15x
# See https://clang.llvm.org/docs/ThreadSanitizer.html
test:tsan --test_timeout=300,1500,5400,18000

### TSan everything build. ###
build:tsan_everything --define=WITH_GUROBI=ON
build:tsan_everything --define=WITH_MOSEK=ON
build:tsan_everything --define=WITH_SNOPT=ON
build:tsan_everything --copt -g
build:tsan_everything --copt -fsanitize=thread
build:tsan_everything --copt -O1
build:tsan_everything --copt -fno-omit-frame-pointer
# From Tsan documentation for Clang-3.9:
# fsanitize=thread flag will cause Clang to act as though the -fPIE flag
# had been supplied if compiling without -fPIC, and as though the
# -pie flag had been supplied if linking an executable
# Bug in GCC: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67308
build:tsan_everything --noforce_pic
build:tsan_everything --linkopt -fsanitize=thread

test:tsan_everything --test_env=GRB_LICENSE_FILE
test:tsan_everything --test_env=HOME
test:tsan_everything --test_tag_filters=-no_tsan
test:tsan_everything --run_under=//tools/dynamic_analysis:tsan
test:tsan_everything --test_env=TSAN_OPTIONS
test:tsan_everything --test_lang_filters=-py
# Typical slowdown introduced by ThreadSanitizer is about 5x-15x
# See https://clang.llvm.org/docs/ThreadSanitizer.html
test:tsan_everything --test_timeout=300,1500,5400,18000

### UBSan build. ###
build:ubsan --copt -g
build:ubsan --copt -fsanitize=undefined
build:ubsan --copt -fno-sanitize=float-divide-by-zero
build:ubsan --copt -O1
build:ubsan --copt -fno-omit-frame-pointer
build:ubsan --linkopt -fsanitize=undefined
# https://groups.google.com/forum/#!topic/bazel-discuss/15h4GPixeGI
build:ubsan --linkopt /usr/lib/llvm-3.9/lib/clang/3.9.1/lib/linux/libclang_rt.ubsan_standalone_cxx-x86_64.a #noqa
build:ubsan --linkopt /usr/lib/llvm-3.9/lib/clang/3.9.1/lib/linux/libclang_rt.ubsan_standalone-x86_64.a #noqa
test:ubsan --run_under=//tools/dynamic_analysis:ubsan
test:ubsan --test_env=UBSAN_OPTIONS
test:ubsan --test_tag_filters=-gurobi,-mosek,-snopt,-no_ubsan
test:ubsan --test_lang_filters=-py
# Typical slowdown introduced by UBSan is 1.2x, increasing timeouts to 2x.
# See https://developer.apple.com/documentation/code_diagnostics/undefined_behavior_sanitizer
test:ubsan --test_timeout=120,600,1800,7200

### UBSan everything build. ###
build:ubsan_everything --define=WITH_GUROBI=ON
build:ubsan_everything --define=WITH_MOSEK=ON
build:ubsan_everything --define=WITH_SNOPT=ON
build:ubsan_everything --copt -g
build:ubsan_everything --copt -fsanitize=undefined
build:ubsan_everything --copt -fno-sanitize=float-divide-by-zero
build:ubsan_everything --copt -O1
build:ubsan_everything --copt -fno-omit-frame-pointer
build:ubsan_everything --linkopt -fsanitize=undefined
# https://groups.google.com/forum/#!topic/bazel-discuss/15h4GPixeGI
build:ubsan_everything --linkopt /usr/lib/llvm-3.9/lib/clang/3.9.1/lib/linux/libclang_rt.ubsan_standalone_cxx-x86_64.a #noqa
build:ubsan_everything --linkopt /usr/lib/llvm-3.9/lib/clang/3.9.1/lib/linux/libclang_rt.ubsan_standalone-x86_64.a #noqa
test:ubsan_everything --test_env=GRB_LICENSE_FILE
test:ubsan_everything --test_env=HOME
test:ubsan_everything --test_tag_filters=-no_ubsan
test:ubsan_everything --run_under=//tools/dynamic_analysis:ubsan
test:ubsan_everything --test_env=UBSAN_OPTIONS
test:ubsan_everything --test_lang_filters=-py
# Typical slowdown introduced by UBSan is 1.2x, increasing timeouts to 2x.
# See https://developer.apple.com/documentation/code_diagnostics/undefined_behavior_sanitizer
test:ubsan_everything --test_timeout=120,600,1800,7200

### Memcheck build. ###
build:memcheck --copt -g
build:memcheck --copt -O1
test:memcheck --run_under=//tools/dynamic_analysis:valgrind
test:memcheck --test_tag_filters=-gurobi,-mosek,-snopt,-no_memcheck
test:memcheck --test_lang_filters=-sh,-py
# Slowdown factor can range from 5-100.
# See http://valgrind.org/info/about.html
test:memcheck --test_timeout=600,3000,10800,36000  # 10x

### Memcheck everything build. ###
build:memcheck_everything --define=WITH_GUROBI=ON
build:memcheck_everything --define=WITH_MOSEK=ON
build:memcheck_everything --define=WITH_SNOPT=ON
build:memcheck_everything --copt -g
build:memcheck_everything --copt -O1

test:memcheck_everything --test_env=GRB_LICENSE_FILE
test:memcheck_everything --test_env=HOME
test:memcheck_everything --test_tag_filters=-no_memcheck
test:memcheck_everything --run_under=//tools/dynamic_analysis:valgrind
test:memcheck_everything --test_lang_filters=-sh,-py
# Slowdown factor can range from 5-100.
# See http://valgrind.org/info/about.html
test:memcheck_everything --test_timeout=600,3000,10800,36000  # 10x

# Fast memcheck.
#
# This build runs tests under valgrind, but (unlike `--config memcheck`) does
# not alter the compile flags.  Thus, the already-cached compilation results
# from a `bazel build` or `bazel test` can be reused.  This is useful to scan a
# local build for memory errors quickly.  For more specific error reporting
# when errors are found, try `-c dbg --config fastmemcheck` or `--config
# memcheck` to recompile with line numbers and lower optimization levels.
#
test:fastmemcheck --run_under=//tools/dynamic_analysis:valgrind
test:fastmemcheck --test_lang_filters=-sh,-py
# Slowdown factor can range from 5-100.
# See http://valgrind.org/info/about.html
test:fastmemcheck --test_timeout=600,3000,10800,36000  # 10x
