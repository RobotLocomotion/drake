# This is a portion of Drake's bazel.rc defaults.
# This filed is included by //tools:bazel.rc.

## Kcov Code Coverage ##

build:_kcov_common --build_tests_only
build:_kcov_common --copt=-g
build:_kcov_common --copt=-O0
build:_kcov_common --local_test_jobs=1
build:_kcov_common --nocache_test_results
build:_kcov_common --run_under=//tools/dynamic_analysis:kcov
build:_kcov_common --spawn_strategy=standalone
# These increased timeouts were set through experimentation. Because kcov runs
# in a separate process from the main program, the OS has to context-switch
# between the processes every time a line is hit, slowing down execution
# significantly.
build:_kcov_common --test_timeout=210,1050,3150,12600  # 3.5x

build:kcov --config=_kcov_common
build:kcov --test_tag_filters=-gurobi,-lint,-mosek,-no_kcov,-snopt

build:kcov_everything --config=everything
build:kcov_everything --config=_kcov_common
build:kcov_everything --test_tag_filters=-lint,-no_kcov

## Sanitizers ##

build:_san_common --build_tests_only
build:_san_common --copt=-fno-omit-frame-pointer
build:_san_common --copt=-g
build:_san_common --copt=-O1
build:_san_common --test_lang_filters=-py,-sh

### AddressSanitizer ###

build:_asan_common --config=_san_common
build:_asan_common --copt=-fsanitize=address
build:_asan_common --linkopt=-fsanitize=address
build:_asan_common --run_under=//tools/dynamic_analysis:asan
build:_asan_common --test_env=ASAN_OPTIONS
build:_asan_common --test_env=ASAN_SYMBOLIZER_PATH
build:_asan_common --test_env=LSAN_OPTIONS
# Typical slowdown introduced by AddressSanitizer is 2x.
# See https://clang.llvm.org/docs/AddressSanitizer.html
build:_asan_common --test_timeout=150,750,2250,9000  # 2.5x

build:asan --config=_asan_common
build:asan --test_tag_filters=-gurobi,-mosek,-no_asan,-no_lsan,-snopt

build:asan_everything --config=_asan_common
build:asan_everything --config=_everything_common
# LeakSanitizer is run with AddressSanitizer by default.
build:asan_everything --test_tag_filters=-no_asan,-no_lsan

### LeakSanitizer ###

build:_lsan_common --config=_san_common
build:_lsan_common --copt=-fsanitize=leak
build:_lsan_common --linkopt=-fsanitize=leak
build:_lsan_common --run_under=//tools/dynamic_analysis:lsan
build:_lsan_common --test_env=LSAN_OPTIONS
build:_lsan_common --test_env=LSAN_SYMBOLIZER_PATH

build:lsan --config=_lsan_common
build:lsan --test_tag_filters=-gurobi,-mosek,-no_lsan,-snopt

build:lsan_everything --config=_everything_common
build:lsan_everything --config=_lsan_common
build:lsan_everything --test_tag_filters=-no_lsan

### ThreadSanitizer ###

build:_tsan_common --config=_san_common
build:_tsan_common --copt=-fsanitize=thread
build:_tsan_common --linkopt=-fsanitize=thread
# From Tsan documentation for Clang-3.9:
# -fsanitize=thread flag will cause Clang to act as though the -fPIE flag
# had been supplied if compiling without -fPIC, and as though the
# -pie flag had been supplied if linking an executable
# Bug in GCC: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67308
build:_tsan_common --noforce_pic
build:_tsan_common --run_under=//tools/dynamic_analysis:tsan
build:_tsan_common --test_env=TSAN_OPTIONS
# Typical slowdown introduced by ThreadSanitizer is 5x-15x
# See https://clang.llvm.org/docs/ThreadSanitizer.html
build:_tsan_common --test_timeout=300,1500,5400,18000

build:tsan --config=_tsan_common
build:tsan --test_tag_filters=-gurobi,-mosek,-no_tsan,-snopt

build:tsan_everything --config=_everything_common
build:tsan_everything --config=_tsan_common
build:tsan_everything --test_tag_filters=-no_tsan

### UndefinedBehaviorSanitizer ###

build:_ubsan_common --config=_san_common
build:_ubsan_common --copt=-fsanitize=undefined
# Since Bazel uses clang instead of clang++, enabling -fsanitize=vptr would
# require extra linkopts that cause segmentation faults on pure C code.
build:_ubsan_common --copt=-fno-sanitize=float-divide-by-zero,vptr
# TODO(jamiesnape): Find a solution to using sanitizer blacklists with the
# autogenerated toolchain.
# build:_ubsan_common --copt=-fsanitize-blacklist=tools/dynamic_analysis/ubsan.blacklist
build:_ubsan_common --linkopt=-fsanitize=undefined
build:_ubsan_common --run_under=//tools/dynamic_analysis:ubsan
build:_ubsan_common --test_env=UBSAN_OPTIONS
# Typical slowdown introduced by UndefinedBehaviorSanitizer is 1.2x.
# See https://developer.apple.com/documentation/code_diagnostics/undefined_behavior_sanitizer
build:_ubsan_common --test_timeout=120,600,1800,7200  # 2x

build:ubsan --config=_ubsan_common
build:ubsan --test_tag_filters=-gurobi,-mosek,-no_ubsan,-snopt

build:ubsan_everything --config=_everything_common
build:ubsan_everything --config=_ubsan_common
build:ubsan_everything --test_tag_filters=-no_ubsan

## Valgrind Memcheck ##

build:_memcheck_common --build_tests_only
build:_memcheck_common --copt=-fno-omit-frame-pointer
build:_memcheck_common --copt=-g
# https://sourceforge.net/p/valgrind/mailman/valgrind-developers/?viewmonth=201806&viewday=11&style=flat
build:_memcheck_common --copt=-O2
build:_memcheck_common --run_under=//tools/dynamic_analysis:valgrind
build:_memcheck_common --test_lang_filters=-py,-sh
# Typical slowdown introduced by Valgrind Memcheck is 5x-100x.
# See http://valgrind.org/info/about.html
build:_memcheck_common --test_timeout=1500,7500,22500,90000  # 25x

build:memcheck --config=_memcheck_common
build:memcheck --test_tag_filters=-gurobi,-mosek,-no_memcheck,-snopt

build:memcheck_everything --config=_everything_common
build:memcheck_everything --config=_memcheck_common
build:memcheck_everything --test_tag_filters=-no_memcheck

# Fast memcheck.
#
# This build runs tests under valgrind, but (unlike `--config=memcheck`) does
# not alter the compile flags.  Thus, the already-cached compilation results
# from a `bazel build` or `bazel test` can be reused.  This is useful to scan a
# local build for memory errors quickly.  For more specific error reporting
# when errors are found, try `-c dbg --config=fastmemcheck` or `--config
# memcheck` to recompile with line numbers and lower optimization levels.
#
build:fastmemcheck --run_under=//tools/dynamic_analysis:valgrind
build:fastmemcheck --test_lang_filters=-py,-sh
# Slowdown factor can range from 5-100.
# See http://valgrind.org/info/about.html
build:fastmemcheck --test_timeout=1500,7500,22500,90000  # 25x
