{
    <dl-1>
    Memcheck:Leak
    ...
    fun:_dl_init
    ...
}

{
    <dl-2>
    Memcheck:Leak
    ...
    fun:_dlerror_run
}

{
    <dyld-1>
    Memcheck:Cond
    ...
    fun:_ZN4dyld4loadEPKcRKNS_11LoadContextE
}

{
    <dyld-2>
    Memcheck:Value8
    ...
    fun:_ZN4dyld4loadEPKcRKNS_11LoadContextE
}

{
    <glib-1>
    Memcheck:Leak
    ...
    fun:g_slice_alloc
    ...
}

{
    <mosek-1>
    Memcheck:Addr4
    ...
    fun:checkout_from_flexlm
    ...
}

{
    <mosek-2>
    Memcheck:Addr16
    ...
    fun:checkout_from_flexlm
    ...
}

{
    <mosek-3>
    Memcheck:Cond
    ...
    fun:MSK_sysenv_getsysinfo
    ...
}

# One of the other places MOSEK's issues with Valgrind have been suppressed quite sweepingly:
# https://github.com/casadi/casadi/blob/master/test/internal/valgrind-casadi.supp#L242
{
    <mosek-4>
    Memcheck:Cond
    fun:__intel_sse2_strcpy
    fun:MSKP_strdupenv
    ...
    fun:MSK_ehajakopr
    fun:MSK_optimize
    fun:MSK_optimizetrm
    fun:_ZNK5drake7solvers11MosekSolver5SolveERNS0_19MathematicalProgramE
}

{
    <mosek-5>
    Memcheck:Cond
    fun:MSK_hom_optlp
    fun:MSK_hs_optlp
    fun:MSK_opt_ipmslv
    fun:MSK_contoptimizer
    fun:MSK_optimizeunlicensed
    fun:MSK_optimize
    fun:MSK_optimizetrm
    fun:_ZNK5drake7solvers11MosekSolver5SolveERNS0_19MathematicalProgramE
}

{
    <mosek-6>
    Memcheck:Cond
    fun:mkl_lapack_ps_avx2_xdlansy
    fun:mkl_lapack_ps_xdlansy
    fun:mkl_lapack_dlansy
    fun:mkl_lapack_dsyevd
    fun:DSYEVD
    fun:MSK_INTEL_P4_mathenv_symeig
    fun:intpnt_sdp_ntscaling
    fun:intpnt_inititer
    fun:intpnt_conicoptimizer
    fun:MSK_intpnt_optcone
    fun:MSK_conic_optimizer
    fun:MSKP_optimizeconic
}

{
    <python-1>
    Memcheck:Addr4
    fun:PyObject_Free
    ...
}

{
    <python-2>
    Memcheck:Cond
    fun:PyObject_Free
    ...
}

{
    <python-3>
    Memcheck:Value8
    fun:PyObject_Free
    ...
}

{
    <python-4>
    Memcheck:Addr4
    obj:/usr/bin/python2.7
    ...
}

{
    <python-5>
    Memcheck:Addr4
    obj:/usr/local/bin/python
    ...
}

{
    <python-6>
    Memcheck:Cond
    obj:/usr/bin/python2.7
    ...
}

{
    <python-7>
    Memcheck:Cond
    obj:/usr/local/bin/python
    ...
}

{
    <python-8>
    Memcheck:Leak
    ...
    obj:/usr/bin/python2.7
}

{
    <python-9>
    Memcheck:Leak
    ...
    obj:/usr/local/bin/python
}

{
    <python-10>
    Memcheck:Value8
    obj:/usr/bin/python2.7
    ...
}

{
    <python-11>
    Memcheck:Value8
    obj:/usr/local/bin/python
    ...
}

# This suppresses "possibly lost" warnings for valgrind memchecks.
# The cause of the error seems to be in the btAlignedAllocDefault function
# in btAlignedAllocator.cpp file of the bullet3 library.  We believe that the function
# may return a pointer not pointing at the head of the allocated memory, which
# causes the "possibly lost" warnings. [ *((void **)(ret)-1) = (void *)(real); ]
{
    <bullet3-1>
    Memcheck:Leak
    match-leak-kinds: possible
    fun:malloc
    fun:_ZL14btAllocDefaultm
    fun:_ZL21btAlignedAllocDefaultmi
    fun:_Z22btAlignedAllocInternalmi
}

# Started happening when Gurobi got updated to 7.0.2. PR 6332.
{
    <gurobi-1>
    Memcheck:Leak
    match-leak-kinds: possible
    fun:malloc
    fun:mkl_serv_thread_free_buffers
    fun:PRIVATE*
    ...
    fun:GRBoptimize
}

# Started happening when Gurobi got updated to 7.0.2.
{
    <gurobi-2>
    Memcheck:Leak
    match-leak-kinds: possible
    fun:malloc
    fun:mkl_serv_thread_free_buffers
    fun:PRIVATE*
    ...
    fun:start_thread
}
