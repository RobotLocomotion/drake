# For additional examples, see:
# - https://gitlab.kitware.com/autopybind11/autopybind11
# - https://gitlab.kitware.com/autopybind11/autopybind11/-/tree/master/Tests
#   (look for wrapper_input.yml files)
---
files:
  customization:
    skiplist:
      member_variables:
        - DRAKE_COPYABLE_DEMAND_COPY_CAN_COMPILE
  "drake/common/random.h":
    namespaces:
      drake:
        classes:
          RandomGenerator: {}
  "drake/common/constants.h":
    namespaces:
      drake:
        enums:
          ToleranceType: {}
  "drake/common/autodiff.h":
    namespaces:
      drake:
        namespaces:
          common:
            classes:
              AutoDiffXd: {}
  "drake/lcm/drake_lcm_interface.h":
    namespaces:
      drake:
        namespaces:
          lcm:
            classes:
              DrakeLcmInterface: {}
  "drake/lcm/drake_lcm.h":
    namespaces:
      drake:
        namespaces:
          lcm:
            classes:
              DrakeLcm: {}
  "drake/lcm/drake_mock_lcm.h":
    namespaces:
      drake:
        namespaces:
          lcm:
            classes:
              DrakeMockLcm: {}
  "drake/math/rotation_matrix.h":
    namespaces:
      drake:
        namespaces:
          math:
            classes:
              RotationMatrix:
                inst: ["double", "drake::AutoDiffXd", "drake::symbolic::Expression"]
              RollPitchYaw:
                inst: ["double", "drake::AutoDiffXd", "drake::symbolic::Expression"]
  "drake/math/barycentric.h":
    namespaces:
      drake:
        namespaces:
          math:
            classes:
              BarycentricMesh:
                inst: ["double"]
  "drake/perception/point_cloud_flags.h":
    namespaces:
      drake:
        namespaces:
          perception:
            namespaces:
              pc_flags:
                enums:
                  BaseField:
                classes:
                  Fields: {}
  "drake/perception/point_cloud.h":
    namespaces:
      drake:
        namespaces:
          perception:
            classes:
              PointCloud: {}
  "drake/systems/sensors/pixel_types.h":
    namespaces:
      drake:
        namespaces:
          systems:
            namespaces:
              sensors:
                enums:
                  PixelType: {}
  "drake/systems/sensors/image.h":
    namespaces:
      drake:
        namespaces:
          systems:
            namespaces:
              sensors:
                classes:
                  Image:
                    inst: ["drake::systems::sensors::PixelType::kDepth16U"]
  "drake/perception/depth_image_to_point_cloud.h":
    namespaces:
      drake:
        namespaces:
          perception:
            classes:
              DepthImageToPointCloud: {}
  "drake/common/symbolic.h":
    namespaces:
        drake:
          namespaces:
            symbolic:
              classes:
                Variable:
                  enums:
                    Type: {}
                Monomial: {}
                Expression: {}
                Environment: {}
                Formula: {}
  "drake/systems/framework/leaf_system.h":
    namespaces:
      drake:
        namespaces:
          systems:
            classes:
              LeafSystem:
                inst: ["double", "drake::AutoDiffXd", "drake::symbolic::Expression"]
                cust_name: ["LeafSystem"]
                skiplist:
                  member_functions:
                    - DeclareAbstractState
                    - DoCalcWitnessValue
  "drake/systems/framework/system.h":
    namespaces:
      drake:
        namespaces:
          systems:
            classes:
              System:
                inst: [double, "drake::AutoDiffXd", "drake::symbolic::Expression"]
                skiplist:
                  member_functions:
                    - AddConstraint
  "drake/systems/framework/system_visitor.h":
    namespaces:
      drake:
        namespaces:
          systems:
            classes:
              SystemVisitor:
                inst: [double, "drake::AutoDiffXd", "drake::symbolic::Expression"]
  "drake/systems/framework/system_base.h":
    namespaces:
      drake:
        namespaces:
          systems:
            classes:
              SystemBase:
                skiplist:
                  member_functions:
                    - AddInputPort
                    - AddOutputPort
                classes:
                  ContextSizes: {}
  "drake/systems/framework/context_base.h":
    namespaces:
      drake:
        namespaces:
          systems:
            classes:
              ContextBase: {}
  "drake/systems/framework/context.h":
    namespaces:
      drake:
        namespaces:
          systems:
            classes:
              Context:
                inst: [double, "drake::AutoDiffXd", "drake::symbolic::Expression"]
  "drake/systems/framework/diagram_context.h":
    namespaces:
      drake:
        namespaces:
          systems:
            classes:
              DiagramContext:
                inst: [double, "drake::AutoDiffXd", "drake::symbolic::Expression"]
  "drake/systems/framework/leaf_context.h":
    namespaces:
      drake:
        namespaces:
          systems:
            classes:
              LeafContext:
                inst: [double, "drake::AutoDiffXd", "drake::symbolic::Expression"]
  "drake/systems/framework/framework_common.h":
    namespaces:
      drake:
        namespaces:
          systems:
            namespaces:
              internal:
                classes:
                  ContextMessageInterface: {}
                  SystemMessageInterface: {}
  "drake/geometry/shape_specification.h":
    namespaces:
      drake:
        namespaces:
          geometry:
            classes:
              ShapeReifier: {}
  "drake/geometry/render/render_engine.h":
    namespaces:
      drake:
        namespaces:
          geometry:
            namespaces:
              render:
                classes:
                  ClippingRange: {}
                  RenderCameraCore: {}
                  ColorRenderCamera: {}
                  DepthRange: {}
                  DepthRenderCamera: {}
                  RenderEngine: {}
  "drake/manipulation/kuka_iiwa/iiwa_command_receiver.h":
    namespaces:
      drake:
        namespaces:
          manipulation:
            namespaces:
              kuka_iiwa:
                classes:
                  IiwaCommandReceiver: {}
  "drake/manipulation/kuka_iiwa/iiwa_command_sender.h":
    namespaces:
      drake:
        namespaces:
          manipulation:
            namespaces:
              kuka_iiwa:
                classes:
                  IiwaCommandSender: {}
  "drake/manipulation/kuka_iiwa/iiwa_status_receiver.h":
    namespaces:
      drake:
        namespaces:
          manipulation:
            namespaces:
              kuka_iiwa:
                classes:
                  IiwaStatusReceiver: {}
  "drake/manipulation/kuka_iiwa/iiwa_status_sender.h":
    namespaces:
      drake:
        namespaces:
          manipulation:
            namespaces:
              kuka_iiwa:
                classes:
                  IiwaStatusSender: {}
  "drake/solvers/evaluator_base.h":
    namespaces:
      drake:
        namespaces:
          solvers:
            classes:
              EvaluatorBase: {}
  "drake/solvers/constraint.h":
    namespaces:
      drake:
        namespaces:
          solvers:
            classes:
              Constraint: {}
  "drake/multibody/optimization/centroidal_momentum_constraint.h":
    namespaces:
      drake:
        namespaces:
          multibody:
            classes:
              CentroidalMomentumConstraint:
                customization:
                  keep_alive:
                    CentroidalMomentumConstraint:
                      num_arguments: [4]
                      pairings: [["1;2","1;4"]]
