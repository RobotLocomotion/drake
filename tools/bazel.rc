
# Default to an optimized build.
build -c opt

# Default build options.
build --strip=never
build --crosstool_top=//tools:default-toolchain
# Only show warnings from Drake, not from externals.
build --output_filter="^//"

# Default test options.
test --test_output=errors

# By default, disable execution of tests that require proprietary software.
# Individual targets that use proprietary software are responsible for ensuring
# they can also build without it, typically by using a select statement.
# config_setting rules for proprietary software are provided in //tools.
test --test_tag_filters=-gurobi,-snopt

### A configuration that enables Gurobi. ###
# -- To use this config, the GUROBI_PATH environment variable must be the
# -- linux64 directory in the Gurobi 6.0.5 release.
#
# -- Gurobi checks a license file, and may need to contact a license server to
# -- check out a license. Therefore, tests that use Gurobi must have the tag
# -- "local", because they are non-hermetic. For the moment, we also require
# -- the tag "exclusive", to rate-limit license servers with a small number of
# -- licenses.
# -- TODO(david-german-tri): Find a better fix for the license server problem.
#
# -- To run tests that require Gurobi, also specify a custom set of
# -- test_tag_filters that does not exclude the "gurobi" tag.
build:gurobi --define=WITH_GUROBI=ON
# -- By default, Gurobi looks for the license file in the homedir.
test:gurobi --test_env=HOME
# -- If set, the GRB_LICENSE_FILE path takes precedence.
test:gurobi --test_env=GRB_LICENSE_FILE


### A configuration that enables SNOPT. ###
# -- To use this config, you must have access to the private repository
# -- RobotLocomotion/snopt on GitHub, and your local git must be configured
# -- with SSH keys as documented at http://drake.mit.edu/from_source.html.
#
# -- To run tests that require SNOPT, also specify a set of test_tag_filters
# -- that does not exclude the "snopt" tag.
build:snopt --define=WITH_SNOPT=ON

### A configuration that enables all optional dependencies. ###
test:everything --test_tag_filters=

# -- Options for Gurobi.
build:everything --define=WITH_GUROBI=ON
test:everything --test_env=HOME
test:everything --test_env=GRB_LICENSE_FILE
# -- Options for SNOPT.
build:everything --define=WITH_SNOPT=ON

### Unsupported Crosstool ###
# Use the default Bazel-generated CROSSTOOL.
# This may be useful for developers with unsupported workstation configurations.
build:unsupported_crosstool --crosstool_top=//external:cc_toolchain

### git submodules
# If a CMake build is performed from the same source tree, it will checkout git
# submodules, and if they have BUILD files then `bazel build //...` will find
# them and complain that the paths don't line up correctly anymore.  Here, we
# manually list out all git submodule externals' BUILD files.
#
# TODO(jwnimmer-tri) Remove this once git submodules are no longer used.
build --deleted_packages=externals/snopt,externals/snopt/cppsrc,externals/snopt/csrc,externals/snopt/libf2c

### Cpplint. ###
# By default, cpplint tests are run as part of `bazel test` alongside all of
# the other compilation and test targets.  This is a convenience shortcut to
# only do the cpplint testing and nothing else.
test:cpplint --build_tests_only
test:cpplint --test_tag_filters=cpplint

### Kcov coverage build. ###
build:kcov --copt -g
test:kcov --spawn_strategy=standalone
test:kcov --run_under //tools:kcov
test:kcov --local_test_jobs=1
test:kcov --test_tag_filters=-cpplint,-gurobi
test:kcov --nocache_test_results

### ASan build. ###
build:asan --action_env=ASAN_OPTIONS
build:asan --copt -fsanitize=address
build:asan --copt -O1
build:asan --copt -fno-omit-frame-pointer
build:asan --linkopt -fsanitize=address

### LSan build. ###
build:lsan --action_env=LSAN_OPTIONS
build:lsan --copt -fsanitize=leak
build:lsan --copt -O1
build:lsan --copt -fno-omit-frame-pointer
build:lsan --linkopt -fsanitize=leak

### TSan build. ###
build:tsan --action_env=TSAN_OPTIONS
build:tsan --copt -fsanitize=thread
build:tsan --copt -O1
build:tsan --copt -fno-omit-frame-pointer
build:tsan --linkopt -fsanitize=thread

### UBSan build. ###
build:ubsan --action_env=UBSAN_OPTIONS
build:ubsan --copt -fsanitize=undefined
build:ubsan --copt -O1
build:ubsan --copt -fno-omit-frame-pointer
build:ubsan --linkopt -fsanitize=undefined

### Memcheck build. ###
build:memcheck --copt -g
build:memcheck --run_under=//tools:valgrind

# Fast memcheck.
#
# This build runs tests under valgrind, but (unlike `--config memcheck`) does
# not alter the compile flags.  Thus, the already-cached compilation results
# from a `bazel build` or `bazel test` can be reused.  This is useful to scan a
# local build for memory errors quickly.  For more specific error reporting
# when errors are found, try `-c dbg --config fastmemcheck` or `--config
# memcheck` to recompile with line numbers and lower optimization levels.
#
build:fastmemcheck --run_under=//tools:valgrind
