
# Generated by cps2cmake https://github.com/mwoehlke/pycps
# and then subsequently edited by hand.

if(CMAKE_VERSION VERSION_LESS 3.9.0)
  message(FATAL_ERROR "CMake >= 3.9 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 3.9)
set(CMAKE_IMPORT_FILE_VERSION 1)

include(CMakeFindDependencyMacro)

get_filename_component(${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX "${${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX}" PATH)
get_filename_component(${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX "${${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX}" PATH)
get_filename_component(${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX "${${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX}" PATH)

if(${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX STREQUAL "/")
  set(${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX)
endif()

set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/modules;${CMAKE_MODULE_PATH}")
set(_drake_interface_libraries drake::drake-marker)
set(_drake_interface_compile_definitions HAVE_SPDLOG)
if(@WITH_USER_EIGEN@)
  find_dependency(Eigen3 CONFIG)
  list(APPEND _drake_interface_libraries Eigen3::Eigen)
else()
  list(APPEND _drake_interface_compile_definitions @BAZEL_EIGEN_DEFINES@)
endif()
if (@WITH_USER_FMT@)
  find_dependency(fmt CONFIG)
  list(APPEND _drake_interface_libraries fmt::fmt)
else()
  list(APPEND _drake_interface_compile_definitions @BAZEL_FMT_DEFINES@)
endif()
find_dependency(lcm 1.4 CONFIG HINTS "${${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX}/lib/cmake/lcm")
if (@WITH_USER_SPDLOG@)
  find_dependency(spdlog CONFIG)
  list(APPEND _drake_interface_libraries spdlog::spdlog)
else()
  list(APPEND _drake_interface_compile_definitions @BAZEL_SPDLOG_DEFINES@)
endif()
set(_expectedTargets drake::drake drake::drake-lcmtypes-cpp drake::drake-lcmtypes-java drake::drake-marker)

set(_targetsDefined)
set(_targetsNotDefined)

foreach(_expectedTarget ${_expectedTargets})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)

set(_apple_soname_prologue)
if(APPLE)
  set(_apple_soname_prologue "@rpath/")
endif()

add_library(drake::drake SHARED IMPORTED)
set_target_properties(drake::drake PROPERTIES
  IMPORTED_LOCATION "${${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX}/lib/libdrake.so"
  IMPORTED_SONAME "${_apple_soname_prologue}libdrake.so"
  INTERFACE_INCLUDE_DIRECTORIES "${${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "${_drake_interface_libraries}"
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_COMPILE_DEFINITIONS "${_drake_interface_compile_definitions}"
)

add_library(drake::drake-lcmtypes-cpp INTERFACE IMPORTED)
set_target_properties(drake::drake-lcmtypes-cpp PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "lcm::lcm-coretypes"
)

add_library(drake::drake-lcmtypes-java STATIC IMPORTED)
set_target_properties(drake::drake-lcmtypes-java PROPERTIES
  IMPORTED_LOCATION "${${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX}/share/java/lcmtypes_drake.jar"
  JAR_FILE "${${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX}/share/java/lcmtypes_drake.jar"
)

# TODO(eric.cousineau): Try to make the CMake target `drake-marker` private,
# such that no downstream users can use it?
add_library(drake::drake-marker SHARED IMPORTED)
set_target_properties(drake::drake-marker PROPERTIES
  IMPORTED_LOCATION "${${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX}/lib/libdrake_marker.so"
  IMPORTED_SONAME "${_apple_soname_prologue}libdrake_marker.so"
)

unset(_apple_soname_prologue)

set(${CMAKE_FIND_PACKAGE_NAME}_LIBRARIES "drake::drake")
set(${CMAKE_FIND_PACKAGE_NAME}_INCLUDE_DIRS "")

set(${CMAKE_FIND_PACKAGE_NAME}_VERSION "@DRAKE_VERSION@")
set(${CMAKE_FIND_PACKAGE_NAME}_VERSION_MAJOR "@DRAKE_VERSION_MAJOR@")
set(${CMAKE_FIND_PACKAGE_NAME}_VERSION_MINOR "@DRAKE_VERSION_MINOR@")
set(${CMAKE_FIND_PACKAGE_NAME}_VERSION_PATCH "@DRAKE_VERSION_PATCH@")
set(${CMAKE_FIND_PACKAGE_NAME}_VERSION_TWEAK "@DRAKE_VERSION_TWEAK@")


set(${CMAKE_FIND_PACKAGE_NAME}_PYTHON_DIR "${${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX}/lib/python@PYTHON_VERSION@/site-packages")
# Allow users to easily check Drake's expected CPython version.
set(${CMAKE_FIND_PACKAGE_NAME}_PYTHON_VERSION "@PYTHON_VERSION@")

unset(${CMAKE_FIND_PACKAGE_NAME}_IMPORT_PREFIX)
unset(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)

