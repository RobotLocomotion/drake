# -*- python -*-

package(default_visibility = ["//visibility:private"])

load(
    "@drake//tools/install:install.bzl",
    "cmake_config",
    "install",
    "install_cmake_config",
)
load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_googletest",
    "drake_cc_test",
    "drake_transitive_installed_hdrs_filegroup",
)
load("//tools/lint:lint.bzl", "add_lint_tests")
load(":build_components.bzl", "LIBDRAKE_COMPONENTS")
load(
    "//third_party:com_github_bazelbuild_rules_cc/whole_archive.bzl",
    "cc_whole_archive_library",
)

# TODO(eric.cousineau): Try to make the CMake target `drake-marker` private,
# such that no downstream users can use it?
cmake_config(
    cps_file_name = "drake.cps",
    package = "drake",
)

install_cmake_config(
    package = "drake",
    versioned = 0,
)

# Annotate all of the LIBDRAKE_COMPONENTS as `alwayslink = True`, so that we
# use the --whole-archive linker flag on them when creating libdrake.so
cc_whole_archive_library(
    name = "libdrake_components_whole_archive",
    deps = LIBDRAKE_COMPONENTS,
)

# The Drake binary package libdrake.so contains all the symbols from all the
# LIBDRAKE_COMPONENTS plus the statically-linked Drake externals used by the
# LIBDRAKE_COMPONENTS.  We use linkstatic=1 here so that the library will not
# contain any references to constituent shared libraries inside the build tree.
cc_binary(
    name = "libdrake.so",
    linkshared = 1,
    linkstatic = 1,
    deps = [
        ":libdrake_components_whole_archive",
        ":libdrake_runtime_so_deps",
    ],
)

# Gather all of libdrake.so's dependent headers, excluding headers that are
# stored in the attic.  (Those will be used only after some path mangling.)
drake_transitive_installed_hdrs_filegroup(
    name = "libdrake_headers_no_attic",
    never_startswith = [
        # The attic headers come in via `only_startswith = "attic/"` in a
        # different rule, below.
        "attic/",
        # Drake's lcmtypes are installed via the //lcmtypes:install rule,
        # because they part of a different CMake component than Drake main C++
        # library.  They should not be part of libdrake.so's installed headers.
        # (For CMake details, refer to //tools/install/libdrake:drake.cps.in.)
        "lcmtypes/",
    ],
    deps = LIBDRAKE_COMPONENTS,
)

# Install libdrake.so along with all transitive headers in the same workspace
# (i.e. in Drake itself; not externals).
install(
    name = "install",
    install_tests = [
        "test/find_package_drake_install_test.py",
        "test/snopt_visibility_install_test.py",
    ],
    targets = ["libdrake.so"],
    hdrs = [":libdrake_headers_no_attic"],
    hdr_dest = "include/drake",
    allowed_externals = ["//:LICENSE.TXT"],  # Root for our #include paths.
    visibility = ["//:__pkg__"],
    deps = [
        ":install_attic_headers",
        ":install_cmake_config",
    ],
)

# Gather the headers that are stored in the attic.
drake_transitive_installed_hdrs_filegroup(
    name = "libdrake_headers_only_attic",
    only_startswith = "attic/",
    deps = LIBDRAKE_COMPONENTS,
)

# Install headers that are stored in the attic by stripping off the "attic/"
# component of the pathname.
install(
    name = "install_attic_headers",
    hdrs = [":libdrake_headers_only_attic"],
    hdr_dest = "include/drake",
    hdr_strip_prefix = ["attic"],
    allowed_externals = ["//:LICENSE.TXT"],
)

# Depend on a shared library used by dReal iff dReal is enabled.
cc_library(
    name = "dreal_deps",
    deps = select({
        "//conditions:default": [
            "@nlopt",
            "@ibex",
        ],
        "//tools:no_dreal": [],
    }),
)

# Depend on IPOPT's shared library iff IPOPT is enabled.
cc_library(
    name = "ipopt_deps",
    deps = select({
        "//conditions:default": [
            "@ipopt",
        ],
        "//tools:no_ipopt": [],
    }),
)

# Depend on Gurobi's shared library iff Gurobi is enabled.
cc_library(
    name = "gurobi_deps",
    deps = select({
        "//tools:with_gurobi": ["@gurobi//:gurobi_c"],
        "//conditions:default": [],
    }),
)

# Depend on Mosek's shared library iff Mosek is enabled.
cc_library(
    name = "mosek_deps",
    deps = select({
        "//tools:with_mosek": ["@mosek"],
        "//conditions:default": [],
    }),
)

# Depend on NLOPT's shared library iff NLOPT is enabled.
cc_library(
    name = "nlopt_deps",
    deps = select({
        "//conditions:default": [
            "@nlopt",
        ],
        "//tools:no_nlopt": [],
    }),
)

# Depend on the subset of VTK's shared libraries that Drake uses.
cc_library(
    name = "vtk_deps",
    deps = [
        # TODO(jwnimmer-tri) This duplicates the list of VTK libraries needed
        # by //sensors.  We should find a way for ":drake_shared_library" to be
        # declared without having to repeat this list here.
        "@vtk//:vtkCommonCore",
        "@vtk//:vtkCommonDataModel",
        "@vtk//:vtkCommonTransforms",
        "@vtk//:vtkFiltersGeneral",
        "@vtk//:vtkFiltersSources",
        "@vtk//:vtkIOGeometry",
        "@vtk//:vtkIOImage",
        "@vtk//:vtkRenderingCore",
        "@vtk//:vtkRenderingOSPRay",
        "@vtk//:vtkRenderingOpenGL2",
    ],
)

# Provide a cc_library target that provides libdrake.so, its headers, its
# header-only dependencies, and its required *.so's.  This is aliased by
# `//:drake_shared_library`, which is what downstream users will consume if
# they wish to link to `libdrake.so`.
cc_library(
    name = "drake_shared_library",
    srcs = [":libdrake.so"],
    hdrs = [":libdrake_headers_no_attic"],
    # N.B. To pull in transitive `data` dependencies, we must list
    # `libdrake.so` as a data target.
    data = [":libdrake.so"],
    include_prefix = "drake",
    strip_include_prefix = "/",
    visibility = ["//:__pkg__"],
    deps = [
        ":libdrake_header_only_deps",
        ":libdrake_headers_only_attic_cc_library",
        ":libdrake_runtime_so_deps",
    ],
)

# The list of depended-on *.so files. These should ONLY be shared libraries; do
# not add static dependencies here.
#
# TODO(jwnimmer-tri) Ideally, Bazel should be able to handle the depended-on
# *.so files for us, without us having to know up-front here which dependencies
# are coming from the WORKSPACE in the form of *.so.
cc_library(
    name = "libdrake_runtime_so_deps",
    deps = [
        ":dreal_deps",
        ":gurobi_deps",
        ":ipopt_deps",
        ":mosek_deps",
        ":nlopt_deps",
        ":vtk_deps",
        "//common:drake_marker_shared_library",
        "@ignition_math",
        "@lcm",
        "@spdlog",
        "@tinyxml2",
        "@yaml_cpp",
    ],
)

# The list of depended-on header-only libraries that libdrake's header files
# depend on.  Do not add any object code (shared nor static) here.
#
# TODO(jwnimmer-tri) Ideally, drake_cc_library's installed_headers support
# would capture a list of headerfile dependencies, so that we don't need to
# write out the "list of libraries directly mentioned in Drake headers" below.
cc_library(
    name = "libdrake_header_only_deps",
    deps = [
        "//lcmtypes:lcmtypes_drake_cc",
        "@eigen",
        "@fmt",
        "@lcmtypes_bot2_core",
        "@lcmtypes_robotlocomotion",
        "@optitrack_driver//lcmtypes:optitrack_lcmtypes",
    ],
)

# Include headers that are stored in the attic by stripping off the "attic/"
# component of the pathname.
cc_library(
    name = "libdrake_headers_only_attic_cc_library",
    hdrs = [":libdrake_headers_only_attic"],
    include_prefix = "drake",
    strip_include_prefix = "/attic",
)

drake_cc_test(
    name = "drake_shared_library_test",
    # Using `drake_shared_library` can cause timeouts in debug mode.
    timeout = "moderate",
    deps = [":drake_shared_library"],
)

drake_cc_googletest(
    name = "fast_math_test",
    tags = ["no_kcov"],  # See #10788.
    deps = [
        "//:drake_shared_library",
    ],
)

add_lint_tests(
    python_lint_extra_srcs = ["build_components_refresh.py"],
)
