# -*- python -*-

load(
    "@drake//tools/workspace:cmake_configure_file.bzl",
    "cmake_configure_file",
)
load(
    "@drake//tools/workspace:generate_include_header.bzl",
    "drake_generate_include_header",
)
load(
    "@drake//tools/workspace:check_lists_consistency.bzl",
    "check_lists_consistency",
)
load(
    "@drake//tools/install:install.bzl",
    "cmake_config",
    "install",
    "install_cmake_config",
)
load("@drake//tools/workspace:generate_file.bzl", "generate_file")

licenses(["notice"])  # Apache-2.0

package(default_visibility = ["//visibility:public"])

config_setting(
    name = "linux",
    values = {"cpu": "k8"},
    visibility = ["//visibility:private"],
)

PROJECT_MAJOR = 6

PROJECT_MINOR = 6

PROJECT_PATCH = 0

# Generates config.hh based on the version numbers in CMake code.
cmake_configure_file(
    name = "config",
    src = "include/ignition/math/config.hh.in",
    out = "include/ignition/math/config.hh",
    cmakelists = ["CMakeLists.txt"],
    defines = [
        "IGN_DESIGNATION=math",
        "PROJECT_VERSION_MAJOR=%d" % (PROJECT_MAJOR),
        "PROJECT_VERSION_MINOR=%d" % (PROJECT_MINOR),
        "PROJECT_VERSION_PATCH=%d" % (PROJECT_PATCH),
        "PROJECT_VERSION=%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR),
        "PROJECT_VERSION_FULL=%d.%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),  # noqa
        "PROJECT_NAME_NO_VERSION=ignition-math",
    ],
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/math/Export.hh",
    content = """
#pragma once

// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_MATH_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.

#ifdef IGNITION_MATH_VISIBLE
#undef IGNITION_MATH_VISIBLE
#endif
#define IGNITION_MATH_VISIBLE __attribute__ ((visibility("default")))

#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

public_headers_no_gen = [
    "include/ignition/math/Angle.hh",
    "include/ignition/math/AxisAlignedBox.hh",
    "include/ignition/math/Box.hh",
    "include/ignition/math/Color.hh",
    "include/ignition/math/Cylinder.hh",
    "include/ignition/math/DiffDriveOdometry.hh",
    "include/ignition/math/Filter.hh",
    "include/ignition/math/Frustum.hh",
    "include/ignition/math/GaussMarkovProcess.hh",
    "include/ignition/math/Helpers.hh",
    "include/ignition/math/Inertial.hh",
    "include/ignition/math/Kmeans.hh",
    "include/ignition/math/Line2.hh",
    "include/ignition/math/Line3.hh",
    "include/ignition/math/MassMatrix3.hh",
    "include/ignition/math/Material.hh",
    "include/ignition/math/MaterialType.hh",
    "include/ignition/math/Matrix3.hh",
    "include/ignition/math/Matrix4.hh",
    "include/ignition/math/MovingWindowFilter.hh",
    "include/ignition/math/OrientedBox.hh",
    "include/ignition/math/PID.hh",
    "include/ignition/math/Plane.hh",
    "include/ignition/math/Pose3.hh",
    "include/ignition/math/Quaternion.hh",
    "include/ignition/math/Rand.hh",
    "include/ignition/math/RollingMean.hh",
    "include/ignition/math/RotationSpline.hh",
    "include/ignition/math/SemanticVersion.hh",
    "include/ignition/math/SignalStats.hh",
    "include/ignition/math/Sphere.hh",
    "include/ignition/math/SphericalCoordinates.hh",
    "include/ignition/math/Spline.hh",
    "include/ignition/math/Stopwatch.hh",
    "include/ignition/math/Temperature.hh",
    "include/ignition/math/Triangle.hh",
    "include/ignition/math/Triangle3.hh",
    "include/ignition/math/Vector2.hh",
    "include/ignition/math/Vector3.hh",
    "include/ignition/math/Vector3Stats.hh",
    "include/ignition/math/Vector4.hh",
    "include/ignition/math/detail/Box.hh",
    "include/ignition/math/detail/Cylinder.hh",
    "include/ignition/math/detail/Sphere.hh",
    "include/ignition/math/graph/Edge.hh",
    "include/ignition/math/graph/Graph.hh",
    "include/ignition/math/graph/GraphAlgorithms.hh",
    "include/ignition/math/graph/Vertex.hh",
]

private_headers = [
    "src/FrustumPrivate.hh",
    "src/KmeansPrivate.hh",
    "src/MaterialType.hh",
    "src/RotationSplinePrivate.hh",
    "src/SignalStatsPrivate.hh",
    "src/SplinePrivate.hh",
    "src/Vector3StatsPrivate.hh",
]

# Generates math.hh, which consists of #include statements for all of the
# public headers in the library.  The first line is
# '#include <ignition/math/config.hh>' followed by one line like
# '#include <ignition/math/Angle.hh>' for each non-generated header.
drake_generate_include_header(
    name = "mathhh_genrule",
    out = "include/ignition/math.hh",
    hdrs = public_headers_no_gen + [
        "include/ignition/math/config.hh",
        "include/ignition/math/Export.hh",
    ],
)

check_lists_consistency(
    file_list = private_headers + public_headers_no_gen,
    glob = ["include/**/*.hh"],
)

public_headers = public_headers_no_gen + [
    "include/ignition/math/config.hh",
    "include/ignition/math/Export.hh",
    "include/ignition/math.hh",
]

# Generates the library exported to users.  The explicitly listed srcs= matches
# upstream's explicitly listed sources plus private headers.  The explicitly
# listed hdrs= matches upstream's public headers.
cc_binary(
    name = "libdrake_ignition_math.so",
    srcs = [
        "src/Angle.cc",
        "src/AxisAlignedBox.cc",
        "src/Color.cc",
        "src/DiffDriveOdometry.cc",
        "src/Frustum.cc",
        "src/GaussMarkovProcess.cc",
        "src/Helpers.cc",
        "src/Kmeans.cc",
        "src/Material.cc",
        "src/PID.cc",
        "src/Rand.cc",
        "src/RollingMean.cc",
        "src/RotationSpline.cc",
        "src/RotationSplinePrivate.cc",
        "src/SemanticVersion.cc",
        "src/SignalStats.cc",
        "src/SphericalCoordinates.cc",
        "src/Spline.cc",
        "src/SplinePrivate.cc",
        "src/Stopwatch.cc",
        "src/Temperature.cc",
        "src/Vector3Stats.cc",
    ] + private_headers + public_headers,
    copts = [
        "-fvisibility-inlines-hidden",
        "-w",
    ],
    includes = ["include"],
    linkopts = select({
        ":linux": ["-Wl,-soname,libdrake_ignition_math.so"],
        "//conditions:default": [],
    }),
    linkshared = 1,
    visibility = [],
)

cc_library(
    name = "ignition_math",
    srcs = ["libdrake_ignition_math.so"],
    hdrs = public_headers,
    includes = ["include"],
    visibility = ["//visibility:public"],
)

CMAKE_PACKAGE = "ignition-math%d" % (PROJECT_MAJOR)

cmake_config(
    package = CMAKE_PACKAGE,
    script = "@drake//tools/workspace/ignition_math:package-create-cps.py",
    version_file = ":config",
)

# Creates rule :install_cmake_config.
install_cmake_config(package = CMAKE_PACKAGE)

install(
    name = "install",
    workspace = CMAKE_PACKAGE,
    targets = [":libdrake_ignition_math.so"],
    hdrs = public_headers,
    hdr_dest = "include/" + CMAKE_PACKAGE,
    hdr_strip_prefix = ["include"],
    docs = [
        "COPYING",
        "LICENSE",
    ],
    deps = [":install_cmake_config"],
)
