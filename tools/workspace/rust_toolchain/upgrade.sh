#!/bin/bash

# upgrade.sh - Upgrades the lockfile for Drake's Rust toolchain.
#
# This program is only tested / supported on Ubuntu.

set -eu -o pipefail
cd $(dirname $(python3 -c 'import os; print(os.path.realpath("'"$0"'"))'))

# Fetch *all* Rust toolchains via `bazel sync`. This downloads a lot of stuff.
# Be sure you're on a good network and have --repository_cache enabled in your
# `$HOME/.bazelrc`.
rm -rf upgrade.output_base
(cd upgrade && bazel --output_base=../upgrade.output_base sync)
readonly external=upgrade.output_base/external

# Copy the instrumented repository rules into our lock directory.
rm -rf lock
mkdir -p lock/details
readonly bzl=lock/archives.bzl
echo '# This file is automatically generated by upgrade.sh.' > ${bzl}
echo 'ARCHIVES = [' >> ${bzl}
for name in $(cd ${external} && ls -d rust_*__stable* | sort)
do
  cp upgrade.output_base/external/"${name}"/BUILD.bazel \
      lock/details/BUILD."${name}".bazel
  echo 'dict(' >> ${bzl}
  echo 'name = "'${name}'",' >> ${bzl}
  echo 'build_file = Label("@drake//tools/workspace/rust_toolchain:lock/details/BUILD.'${name}'.bazel"),' >> ${bzl}
  json=${external}/${name}/download_and_extract.json
  if [[ -f $json ]]; then
    echo 'downloads = json.encode(' >> ${bzl}
    sed -e 's#","#",\n"#g;' $json >> ${bzl}
    echo '),' >> ${bzl}
  else
    echo 'downloads = "[]",' >> ${bzl}
  fi
  echo '),' >> ${bzl}
done
echo ']' >> ${bzl}
bazel build //tools/lint:buildifier
../../../bazel-bin/tools/lint/buildifier ${bzl}

# Clean up
rm -rf upgrade.output_base
