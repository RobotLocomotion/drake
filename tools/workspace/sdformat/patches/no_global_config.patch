Change the global singleton into a bomb.

Use the default config when parsing the built-in root.sdf, and
in the ign_sdf command-line tool.

--- src/ParserConfig.cc.orig	2021-09-30 15:33:35.000000000 -0700
+++ src/ParserConfig.cc	2022-03-14 22:49:17.262811731 -0700
@@ -57,8 +57,7 @@
 /////////////////////////////////////////////////
 ParserConfig &ParserConfig::GlobalConfig()
 {
-  static auto *defaultConfig = new ParserConfig;
-  return *defaultConfig;
+  throw std::runtime_error("Drake must never use ParserConfig::GlobalConfig()");
 }
 
 /////////////////////////////////////////////////

--- src/parser.cc.orig	2021-09-30 15:33:35.000000000 -0700
+++ src/parser.cc	2022-03-14 23:16:20.973451521 -0700
@@ -597,7 +597,7 @@
 
     ElementPtr element(new Element);
 
-    initFile(filename, element);
+    initFile(filename, ParserConfig{}, element);
 
     // override description for include elements
     tinyxml2::XMLElement *description = child->FirstChildElement("description");
--- src/ign.cc.orig	2021-09-30 15:33:35.000000000 -0700
+++ src/ign.cc	2022-03-15 00:13:58.609410856 -0700
@@ -36,7 +36,7 @@
   int result = 0;
 
   sdf::Root root;
-  sdf::Errors errors = root.Load(_path);
+  sdf::Errors errors = root.Load(_path, sdf::ParserConfig{});
   if (!errors.empty())
   {
     for (auto &error : errors)
@@ -85,8 +85,12 @@
     return -1;
   }
 
-  if (!sdf::readFile(_path, sdf))
+  if (!sdf::readFile(_path, sdf::ParserConfig{}, sdf, errors))
   {
+    for (auto &error : errors)
+    {
+      std::cerr << error << std::endl;
+    }
     std::cerr << "Error: SDF parsing the xml failed.\n";
     return -1;
   }
@@ -147,8 +152,13 @@
     return -1;
   }
 
-  if (!sdf::readFile(_path, sdf))
+  sdf::Errors errors;
+  if (!sdf::readFile(_path, sdf::ParserConfig{}, sdf, errors))
   {
+    for (auto &error : errors)
+    {
+      std::cerr << error << std::endl;
+    }
     std::cerr << "Error: SDF parsing the xml failed.\n";
     return -1;
   }
@@ -170,7 +180,7 @@
   }
 
   sdf::Root root;
-  sdf::Errors errors = root.Load(_path);
+  sdf::Errors errors = root.Load(_path, sdf::ParserConfig{});
   if (!errors.empty())
   {
     std::cerr << errors << std::endl;
