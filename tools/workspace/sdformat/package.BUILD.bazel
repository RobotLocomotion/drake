# -*- python -*-

load(
    "@drake//tools/skylark:py.bzl",
    "py_binary",
)
load(
    "@drake//tools/workspace:cmake_configure_file.bzl",
    "cmake_configure_file",
)
load(
    "@drake//tools/workspace:generate_include_header.bzl",
    "drake_generate_include_header",
)
load(
    "@drake//tools/install:install.bzl",
    "install",
)

licenses(["notice"])  # Apache-2.0 AND BSD-3-Clause AND BSL-1.0

package(default_visibility = ["//visibility:public"])

cc_library(
    name = "urdfdom",
    srcs = [
        "src/urdf/urdf_parser/joint.cpp",
        "src/urdf/urdf_parser/link.cpp",
        "src/urdf/urdf_parser/model.cpp",
        "src/urdf/urdf_parser/pose.cpp",
        "src/urdf/urdf_parser/twist.cpp",
        "src/urdf/urdf_parser/urdf_model_state.cpp",
        "src/urdf/urdf_parser/urdf_sensor.cpp",
        "src/urdf/urdf_parser/world.cpp",
    ],
    hdrs = [
        "src/urdf/urdf_exception/exception.h",
        "src/urdf/urdf_model/color.h",
        "src/urdf/urdf_model/joint.h",
        "src/urdf/urdf_model/link.h",
        "src/urdf/urdf_model/model.h",
        "src/urdf/urdf_model/pose.h",
        "src/urdf/urdf_model/twist.h",
        "src/urdf/urdf_model/types.h",
        "src/urdf/urdf_model/utils.h",
        "src/urdf/urdf_model_state/model_state.h",
        "src/urdf/urdf_model_state/twist.h",
        "src/urdf/urdf_model_state/types.h",
        "src/urdf/urdf_parser/exportdecl.h",
        "src/urdf/urdf_parser/urdf_parser.h",
        "src/urdf/urdf_sensor/sensor.h",
        "src/urdf/urdf_sensor/types.h",
        "src/urdf/urdf_world/types.h",
        "src/urdf/urdf_world/world.h",
    ],
    # TODO(jamiesnape): Enable visibility after resolving warnings such as
    # "Direct access in function means the weak symbol cannot be overridden at
    # runtime. This was likely caused by different translation units being
    # compiled with different visibility settings."
    copts = ["-w"],
    defines = ["URDFDOM_STATIC"],
    includes = ["src/urdf"],
    linkstatic = 1,
    visibility = ["//visibility:private"],
    deps = ["@tinyxml2"],
)

# Generates sdf_config.h based on the version numbers in CMake code.
cmake_configure_file(
    name = "config",
    src = "cmake/sdf_config.h.in",
    out = "include/sdf/sdf_config.h",
    cmakelists = ["CMakeLists.txt"],
    defines = [
        "PROJECT_NAME=SDFormat",
        "SDF_VERSION_NAME=",
        "SDF_PKG_VERSION=",
        "CMAKE_INSTALL_FULL_DATAROOTDIR=does/not/exist",
    ],
    visibility = ["//visibility:private"],
)

# Public headers are indicated in sdformat's `include/sdf/CMakeLists.txt`.
SDFORMAT_MOST_PUBLIC_HDRS = [
    "include/sdf/Actor.hh",
    "include/sdf/AirPressure.hh",
    "include/sdf/Altimeter.hh",
    "include/sdf/Assert.hh",
    "include/sdf/Atmosphere.hh",
    "include/sdf/Box.hh",
    "include/sdf/Camera.hh",
    "include/sdf/Collision.hh",
    "include/sdf/Console.hh",
    "include/sdf/Cylinder.hh",
    "include/sdf/Element.hh",
    "include/sdf/Error.hh",
    "include/sdf/Exception.hh",
    "include/sdf/Filesystem.hh",
    "include/sdf/Frame.hh",
    "include/sdf/Geometry.hh",
    "include/sdf/Gui.hh",
    "include/sdf/Heightmap.hh",
    "include/sdf/Imu.hh",
    "include/sdf/Joint.hh",
    "include/sdf/JointAxis.hh",
    "include/sdf/Lidar.hh",
    "include/sdf/Light.hh",
    "include/sdf/Link.hh",
    "include/sdf/Magnetometer.hh",
    "include/sdf/Material.hh",
    "include/sdf/Mesh.hh",
    "include/sdf/Model.hh",
    "include/sdf/Noise.hh",
    "include/sdf/Param.hh",
    "include/sdf/Pbr.hh",
    "include/sdf/Physics.hh",
    "include/sdf/Plane.hh",
    "include/sdf/Root.hh",
    "include/sdf/SDFImpl.hh",
    "include/sdf/Scene.hh",
    "include/sdf/SemanticPose.hh",
    "include/sdf/Sensor.hh",
    "include/sdf/Sky.hh",
    "include/sdf/Sphere.hh",
    "include/sdf/Surface.hh",
    "include/sdf/Types.hh",
    "include/sdf/Visual.hh",
    "include/sdf/World.hh",
    "include/sdf/parser.hh",
    "include/sdf/system_util.hh",
]

# Generates sdf.hh, which consists of #include statements for all of the public
# headers in the library.  There is one line like '#include <sdf/Assert.hh>'
# for each non-generated header, followed at the end by a
# single '#include <sdf/sdf_config.h>'.
drake_generate_include_header(
    name = "sdfhh_genrule",
    out = "include/sdf/sdf.hh",
    hdrs = SDFORMAT_MOST_PUBLIC_HDRS + [":config"],
    visibility = ["//visibility:private"],
)

# Generates EmbeddedSdf.cc.
genrule(
    name = "embed_sdf_genrule",
    srcs = glob([
        "sdf/**/*.sdf",
        "sdf/**/*.convert",
    ]),
    outs = ["src/EmbeddedSdf.cc"],
    cmd = "$(execpath :embed_sdf) $(SRCS) > $@",  # noqa
    tools = [":embed_sdf"],
)

py_binary(
    name = "embed_sdf",
    srcs = ["@drake//tools/workspace/sdformat:embed_sdf.py"],
)

SDFORMAT_ALL_PUBLIC_HDRS = SDFORMAT_MOST_PUBLIC_HDRS + [
    "include/sdf/sdf.hh",  # from genrule above
    "include/sdf/sdf_config.h",  # from cmake_configure_file above
]

# Generates the library exported to users. The explicitly listed srcs= matches
# upstream's explicitly listed sources (sdformat/src/CMakeLists.txt). The
# explicitly listed hdrs= matches upstream's private headers. ign.hh and ign.cc
# are not incorporated in this library, but are incorporated into the
# `ign_sdf_cmdline` library defined below.
cc_library(
    name = "sdformat",
    srcs = [
        "src/Actor.cc",
        "src/AirPressure.cc",
        "src/Altimeter.cc",
        "src/Atmosphere.cc",
        "src/Box.cc",
        "src/Camera.cc",
        "src/Collision.cc",
        "src/Console.cc",
        "src/Converter.cc",
        "src/Converter.hh",
        "src/Cylinder.cc",
        "src/Element.cc",
        "src/EmbeddedSdf.hh",
        "src/Error.cc",
        "src/Exception.cc",
        "src/ExceptionPrivate.hh",
        "src/Filesystem.cc",
        "src/Frame.cc",
        "src/FrameSemantics.cc",
        "src/FrameSemantics.hh",
        "src/Geometry.cc",
        "src/Gui.cc",
        "src/Heightmap.cc",
        "src/Imu.cc",
        "src/Joint.cc",
        "src/JointAxis.cc",
        "src/Lidar.cc",
        "src/Light.cc",
        "src/Link.cc",
        "src/Magnetometer.cc",
        "src/Material.cc",
        "src/Mesh.cc",
        "src/Model.cc",
        "src/Noise.cc",
        "src/Param.cc",
        "src/Pbr.cc",
        "src/Physics.cc",
        "src/Plane.cc",
        "src/Root.cc",
        "src/SDF.cc",
        "src/SDFExtension.cc",
        "src/SDFExtension.hh",
        "src/SDFImplPrivate.hh",
        "src/Scene.cc",
        "src/SemanticPose.cc",
        "src/Sensor.cc",
        "src/Sky.cc",
        "src/Sphere.cc",
        "src/Surface.cc",
        "src/Types.cc",
        "src/Utils.cc",
        "src/Utils.hh",
        "src/Visual.cc",
        "src/World.cc",
        "src/XmlUtils.cc",
        "src/XmlUtils.hh",
        "src/parser.cc",
        "src/parser_private.hh",
        "src/parser_urdf.cc",
        "src/parser_urdf.hh",
        ":src/EmbeddedSdf.cc",
    ],
    hdrs = SDFORMAT_ALL_PUBLIC_HDRS,
    # TODO(jamiesnape): Enable visibility after resolving warnings such as
    # "Direct access in function means the weak symbol cannot be overridden at
    # runtime. This was likely caused by different translation units being
    # compiled with different visibility settings."
    copts = ["-w"],
    defines = ["SDFORMAT_STATIC_DEFINE", "SDFORMAT_DISABLE_CONSOLE_LOGFILE"],
    includes = ["include"],
    linkstatic = 1,
    deps = [
        ":urdfdom",
        "@ignition_math",
        "@tinyxml2",
    ],
)

cc_library(
    name = "ign_sdf_cmdline",
    srcs = [
        "src/ign.cc",
        "src/ign.hh",
    ],
    copts = ["-w"],
    linkstatic = 1,
    deps = [
        ":sdformat",
    ],
)

install(
    name = "install",
    docs = [
        "COPYING",
        "LICENSE",
    ],
)
