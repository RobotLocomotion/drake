We use VTK to load glTF files in various contexts. Not every context requires
all of the glTF data (skins, animation, images). This allows us to omit
portions of the defined glTF. This makes parsing faster for the parts we need
and means that we can load *partial* glTF files, as long as we omit the missing
bits.

The changes *could* be upstreamed to VTK, but it's not clear if they should be.

--- IO/Geometry/vtkGLTFDocumentLoader.h
+++ IO/Geometry/vtkGLTFDocumentLoader.h
@@ -54,6 +54,13 @@ public:
   vtkTypeMacro(vtkGLTFDocumentLoader, vtkObject);
   void PrintSelf(ostream& os, vtkIndent indent) override;
 
+  // Controls the configuration of what gets loaded.
+  struct Config {
+    bool include_animation{true};
+    bool include_images{true};
+    bool include_skins{true};
+  };
+
   /**
    * Define an openGL draw target.
    */
@@ -614,6 +621,9 @@ public:
   vtkGetMacro(GLBStart, vtkTypeInt64);
   ///@}
 
+  void SetConfig(const Config& config) { config_ = config; }
+  const Config& GetConfig() const { return config_; }
+
 protected:
   vtkGLTFDocumentLoader() = default;
   ~vtkGLTFDocumentLoader() override = default;
@@ -665,6 +675,7 @@ private:
   bool LoadImageData();
 
   std::shared_ptr<Model> InternalModel;
+  Config config_;
 
   static const std::vector<std::string> SupportedExtensions;
   std::vector<std::string> UsedExtensions;

--- IO/Geometry/vtkGLTFDocumentLoader.cxx
+++ IO/Geometry/vtkGLTFDocumentLoader.cxx
@@ -983,15 +983,25 @@ bool vtkGLTFDocumentLoader::LoadModelData(const std::vector<char>& glbBuffer)
     this->InvokeEvent(vtkCommand::ProgressEvent, static_cast<void*>(&progress));
   }
   // Read additional buffer data
-  if (!this->LoadAnimationData())
+  if (config_.include_animation)
   {
-    return false;
+    if (!this->LoadAnimationData())
+    {
+      return false;
+    }
   }
-  if (!this->LoadImageData())
+  if (config_.include_images)
   {
-    return false;
+    if (!this->LoadImageData())
+    {
+      return false;
+    }
   }
-  return this->LoadSkinMatrixData();
+  if (config_.include_skins)
+  {
+    return this->LoadSkinMatrixData();
+  }
+  return true;
 }
 
 /** vtk object building and animation operations **/
 