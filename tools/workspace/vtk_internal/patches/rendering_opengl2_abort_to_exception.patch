[vtk] Rendering: throw std::runtime_error rather than abort()

Headless jupyter kernels will get restarted without any useful information
about what is going on.

--- Rendering/OpenGL2/vtkXOpenGLRenderWindow.cxx
+++ Rendering/OpenGL2/vtkXOpenGLRenderWindow.cxx
@@ -61,6 +61,8 @@ typedef ptrdiff_t GLsizeiptr;
 #include "vtkRendererCollection.h"
 #include "vtkStringOutputWindow.h"

+#include <exception>
+#include <string>
 #include <sstream>

 #include <X11/Xatom.h>
@@ -77,6 +79,14 @@ typedef ptrdiff_t GLsizeiptr;
  * it populates the global namespace.
  */
 VTK_ABI_NAMESPACE_BEGIN
+
+namespace {
+std::string SummarizeDisplayEnv() {
+  const char* const display = vtksys::SystemTools::GetEnv("DISPLAY");
+  return display == nullptr ? std::string("DISPLAY is not set") : std::string("DISPLAY=") + display;
+}
+}  // namespace
+
 struct vtkXVisualInfo : public XVisualInfo
 {
 };
@@ -251,9 +261,10 @@ vtkXVisualInfo* vtkXOpenGLRenderWindow::GetDesiredVisualInfo()

     if (this->DisplayId == nullptr)
     {
-      vtkErrorMacro(<< "bad X server connection. DISPLAY=" << vtksys::SystemTools::GetEnv("DISPLAY")
-                    << ". Aborting.\n");
-      abort();
+      throw std::runtime_error(
+        "bad X server connection. DISPLAY=" +
+        SummarizeDisplayEnv() +
+        ". Aborting.");
     }

     this->OwnDisplay = 1;
@@ -462,9 +473,10 @@ void vtkXOpenGLRenderWindow::CreateAWindow()
     this->DisplayId = XOpenDisplay(static_cast<char*>(nullptr));
     if (this->DisplayId == nullptr)
     {
-      vtkErrorMacro(<< "bad X server connection. DISPLAY=" << vtksys::SystemTools::GetEnv("DISPLAY")
-                    << ". Aborting.\n");
-      abort();
+      throw std::runtime_error(
+        "bad X server connection. DISPLAY=" +
+        SummarizeDisplayEnv() +
+        ". Aborting.");
     }
     this->OwnDisplay = 1;
   }
@@ -482,8 +494,7 @@ void vtkXOpenGLRenderWindow::CreateAWindow()
     v = this->GetDesiredVisualInfo();
     if (!v)
     {
-      vtkErrorMacro(<< "Could not find a decent visual\n");
-      abort();
+      throw std::runtime_error("Could not find a decent visual");
     }
     this->ColorMap = XCreateColormap(
       this->DisplayId, XRootWindow(this->DisplayId, v->screen), v->visual, AllocNone);
@@ -555,16 +566,7 @@ void vtkXOpenGLRenderWindow::CreateAWindow()
   // is GLX extension is supported?
   if (!glXQueryExtension(this->DisplayId, nullptr, nullptr))
   {
-    vtkErrorMacro("GLX not found.  Aborting.");
-    if (this->HasObserver(vtkCommand::ExitEvent))
-    {
-      this->InvokeEvent(vtkCommand::ExitEvent, nullptr);
-      return;
-    }
-    else
-    {
-      abort();
-    }
+    throw std::runtime_error("GLX not found.  Aborting.");
   }

   // try for 32 context
@@ -649,16 +651,7 @@ void vtkXOpenGLRenderWindow::CreateAWindow()

   if (!this->Internal->ContextId)
   {
-    vtkErrorMacro("Cannot create GLX context.  Aborting.");
-    if (this->HasObserver(vtkCommand::ExitEvent))
-    {
-      this->InvokeEvent(vtkCommand::ExitEvent, nullptr);
-      return;
-    }
-    else
-    {
-      abort();
-    }
+    throw std::runtime_error("Cannot create GLX context.  Aborting.");
   }

   if (this->OwnWindow && this->ShowWindow)
@@ -1215,9 +1208,10 @@ int* vtkXOpenGLRenderWindow::GetScreenSize()
     this->DisplayId = XOpenDisplay(static_cast<char*>(nullptr));
     if (this->DisplayId == nullptr)
     {
-      vtkErrorMacro(<< "bad X server connection. DISPLAY=" << vtksys::SystemTools::GetEnv("DISPLAY")
-                    << ". Aborting.\n");
-      abort();
+      throw std::runtime_error(
+        "bad X server connection. DISPLAY=" +
+        SummarizeDisplayEnv() +
+        ". Aborting.\n");
     }
     else
     {
@@ -1335,9 +1329,10 @@ void vtkXOpenGLRenderWindow::SetWindowInfo(const char* info)
     this->DisplayId = XOpenDisplay(static_cast<char*>(nullptr));
     if (this->DisplayId == nullptr)
     {
-      vtkErrorMacro(<< "bad X server connection. DISPLAY=" << vtksys::SystemTools::GetEnv("DISPLAY")
-                    << ". Aborting.\n");
-      abort();
+      throw std::runtime_error(
+        "bad X server connection. DISPLAY=" +
+        SummarizeDisplayEnv() +
+        ". Aborting.");
     }
     else
     {
@@ -1370,9 +1365,10 @@ void vtkXOpenGLRenderWindow::SetParentInfo(const char* info)
     this->DisplayId = XOpenDisplay(static_cast<char*>(nullptr));
     if (this->DisplayId == nullptr)
     {
-      vtkErrorMacro(<< "bad X server connection. DISPLAY=" << vtksys::SystemTools::GetEnv("DISPLAY")
-                    << ". Aborting.\n");
-      abort();
+      throw std::runtime_error(
+        "bad X server connection. DISPLAY=" +
+        SummarizeDisplayEnv() +
+        ". Aborting.");
     }
     else
     {
