# This file contains configuration settings for how Drake should configure its
# private build of VTK.
#
# Each key in the MODULE_SETTINGS dict provides the settings for the VTK module
# of that name. If a module does not need any settings beyond the defaults, it
# can be omitted form the dict.
#
# The kinds of settings available for a module are documented in rules.bzl on
# the vtk_cc_module() rule.

MODULE_SETTINGS = {
    "ABI": {
        "cmake_defines": [
            "VTK_ABI_NAMESPACE_BEGIN=inline namespace drake_vendor __attribute__ ((visibility (\"hidden\"))) {",  # noqa
            "VTK_ABI_NAMESPACE_END=}",
        ],
    },
    "VTK::kwiml": {
        "cmake_defines": [
            "KWIML_VERSION=0.0.0",
            "KWIML_VERSION_DECIMAL=0",
        ],
    },
    "VTK::metaio": {
        "hdrs_glob_exclude": [
            # We use `patches/metaio.patch` instead of a configure file.
            "**/metaIOConfig.h.in",
        ],
        "srcs_glob_extra": [
            "Utilities/MetaIO/**/*.cxx",
        ],
    },
    "VTK::vtksys": {
        # This module has one-by-one opt-in flags for each small feature within
        # the module. The VTK CMake script chooses which features to enable. To
        # match that logic here, we'll opt-out the default srcs glob and opt-in
        # to specific files that match how upstream VTK configures KWSys.
        "srcs_glob_exclude": ["**"],
        "srcs_extra": [
            "Utilities/KWSys/vtksys/Base64.c",
            "Utilities/KWSys/vtksys/CommandLineArguments.cxx",
            "Utilities/KWSys/vtksys/Directory.cxx",
            "Utilities/KWSys/vtksys/DynamicLoader.cxx",
            "Utilities/KWSys/vtksys/EncodingC.c",
            "Utilities/KWSys/vtksys/EncodingCXX.cxx",
            "Utilities/KWSys/vtksys/FStream.cxx",
            "Utilities/KWSys/vtksys/Glob.cxx",
            "Utilities/KWSys/vtksys/MD5.c",
            "Utilities/KWSys/vtksys/ProcessUNIX.c",
            "Utilities/KWSys/vtksys/RegularExpression.cxx",
            "Utilities/KWSys/vtksys/String.c",
            "Utilities/KWSys/vtksys/Status.cxx",
            "Utilities/KWSys/vtksys/System.c",
            "Utilities/KWSys/vtksys/SystemInformation.cxx",
            "Utilities/KWSys/vtksys/SystemTools.cxx",
        ],
        "cmake_defines": [
            # Match the VTK defaults.
            "KWSYS_NAMESPACE=vtksys",
            "KWSYS_NAME_IS_KWSYS=0",
            "KWSYS_SYSTEMTOOLS_USE_TRANSLATION_MAP=1",
            # Features that are available on the host platform.
            "KWSYS_STL_HAS_WSTRING=1",
            # The *module* prefix and suffix are the same on Linux and macOS.
            # https://gitlab.kitware.com/cmake/cmake/-/issues/21189
            "KWSYS_DynamicLoader_PREFIX=lib",
            "KWSYS_DynamicLoader_SUFFIX=.so",
            # Library API choices.
            "KWSYS_BUILD_SHARED=0",
            "KWSYS_CXX_HAS_EXT_STDIO_FILEBUF_H=0",
        ],
        "copts_extra": [
            # Match the VTK defaults.
            "-DKWSYS_NAMESPACE=vtksys",
            # Features that are available on the host platform.
            "-DKWSYS_SYS_HAS_IFADDRS_H",
            "-DKWSYS_CXX_HAS_SETENV",
            "-DKWSYS_CXX_HAS_UNSETENV",
            "-DKWSYS_CXX_HAS_UTIMENSAT",
        ] + select({
            ":osx": [
                "-DKWSYS_CXX_STAT_HAS_ST_MTIMESPEC",
            ],
            "//conditions:default": [
                "-DKWSYS_CXX_STAT_HAS_ST_MTIM",
            ],
        }),
    },
    "VTK::CommonCore": {
        "visibility": ["//visibility:public"],
        "hdrs_extra": [
            # These header files are generated by custom configure_file logic.
            # See generate_common_core_sources() in rules.bzl.
            ":common_core_array_dispatch_array_list",
            ":common_core_type_list_macros",
            ":common_core_vtk_type_arrays_hdrs",
        ],
        "hdrs_glob_exclude": [
            # These header files are consumed by custom configure_file logic.
            # See generate_common_core_sources() in rules.bzl.
            "Common/Core/vtkArrayDispatchArrayList.h.in",
            "Common/Core/vtkTypeListMacros.h.in",
            "Common/Core/vtkTypedArray.h.in",
        ],
        "included_cxxs": [
            "Common/Core/vtkMersenneTwister_Private.cxx",
            "Common/Core/vtkVariantToNumeric.cxx",
        ],
        "srcs_extra": [
            # Sources in subdirs are not globbed by default.
            "Common/Core/SMP/Common/vtkSMPToolsAPI.cxx",
            "Common/Core/SMP/Sequential/vtkSMPToolsImpl.cxx",
            # These header files are generated by custom configure_file logic.
            # See generate_common_core_sources() in rules.bzl.
            ":common_core_array_instantiations",
            ":common_core_vtk_type_arrays_srcs",
        ],
        "srcs_glob_exclude": [
            # Optional files that we choose not to enable.
            "Common/Core/vtkAndroid*",
            "Common/Core/vtkWin32*",
        ],
        "cmake_defines_cmakelists": [
            # Scrape the VTK_..._VERSION definitions from this file.
            "CMake/vtkVersion.cmake",
        ],
        "cmake_defines": [
            # Features that are available on the host platform.
            "VTK_HAS_ISFINITE=1",
            "VTK_HAS_ISINF=1",
            "VTK_HAS_ISNAN=1",
            "VTK_HAS_STD_ISFINITE=1",
            "VTK_HAS_STD_ISINF=1",
            "VTK_HAS_STD_ISNAN=1",
            "VTK_USE_64BIT_IDS=1",
            "VTK_USE_64BIT_TIMESTAMPS=1",
            # Threading.
            "VTK_MAX_THREADS=1",
            "VTK_SMP_DEFAULT_IMPLEMENTATION_SEQUENTIAL=1",
            "VTK_SMP_ENABLE_SEQUENTIAL=1",
            "VTK_SMP_IMPLEMENTATION_TYPE=Sequential",
            "VTK_USE_PTHREADS=1",
            # Library API choices.
            "VTK_ALL_NEW_OBJECT_FACTORY=1",
            "VTK_ALWAYS_OPTIMIZE_ARRAY_ITERATORS=1",
            "VTK_LEGACY_REMOVE=1",
            "VTK_USE_FUTURE_CONST=1",
            "VTK_WARN_ON_DISPATCH_FAILURE=1",
        ],
        "cmake_undefines": [
            # Features that are NOT available on the host platform.
            "VTK_HAS_FEENABLEEXCEPT",
            "VTK_HAS_FINITE",
            "VTK_HAS__FINITE",
            "VTK_HAS__ISNAN",
            "VTK_REQUIRE_LARGE_FILE_SUPPORT",
            # All of Drake's supported CPUs are little-endian. If we ever do
            # need to support, this we can patch the header file to always
            # use the built-in __BIG_ENDIAN__ (instead of only on macOS).
            "VTK_WORDS_BIGENDIAN",
            # Threading.
            "VTK_SMP_DEFAULT_IMPLEMENTATION_OPENMP",
            "VTK_SMP_DEFAULT_IMPLEMENTATION_STDTHREAD",
            "VTK_SMP_DEFAULT_IMPLEMENTATION_TBB",
            "VTK_SMP_ENABLE_OPENMP",
            "VTK_SMP_ENABLE_STDTHREAD",
            "VTK_SMP_ENABLE_TBB",
            "VTK_USE_WIN32_THREADS",
            # Library API choices.
            "VTK_BUILD_SHARED_LIBS",
            "VTK_DEBUG_LEAKS",
            "VTK_DEBUG_RANGE_ITERATORS",
            "VTK_LEGACY_SILENT",
            "VTK_USE_MEMKIND",
            "VTK_USE_SCALED_SOA_ARRAYS",
        ],
        # Allow a circular dependency between CommonCore <=> CommonDataModel.
        # See also patches/common_core_vs_data_model_cycle.patch.
        "copts_extra": [
            "-DvtkCommonDataModel_ENABLED",
        ],
        "deps_extra": [
            ":Common_DataModel_vtkDataObject",
        ],
    },
    "VTK::CommonMath": {
        "srcs_glob_exclude": [
            # Skip this class, in order to avoid a dependency on kissfft.
            "**/vtkFFT.cxx",
        ],
        "module_deps_ignore": [
            "VTK::kissfft",
        ],
    },
    "VTK::CommonMisc": {
        "srcs_glob_exclude": [
            # Skip this class, in order to avoid a dependency on exprtk.
            "**/vtkExprTkFunctionParser.cxx",
        ],
        "module_deps_ignore": [
            "VTK::exprtk",
        ],
    },
    "VTK::CommonSystem": {
        "copts_extra": [
            # Features that are available on the host platform.
            "-DVTK_HAVE_GETSOCKNAME_WITH_SOCKLEN_T",
            "-DVTK_HAVE_SO_REUSEADDR",
        ],
    },
    "VTK::CommonTransforms": {
        "visibility": ["//visibility:public"],
    },
    "VTK::DICOMParser": {
        "cmake_defines": [
            "DICOM_STATIC=1",
            # Match upstream's hard-coded CMakeLists.txt setting.
            "DICOM_ANSI_STDLIB=1",
        ],
        "cmake_undefines": [
            "DICOM_DLL",
        ],
    },
    "VTK::FiltersCore": {
        "srcs_glob_exclude": [
            # Skip this class, in order to avoid a dependency on exprtk.
            "**/vtkArrayCalculator.cxx",
            # This file includes a header from VTK::FiltersPoint, violating
            # dependency layering. CMake is oblivious, but Bazel notices.
            # We don't seem to need it for anything, so we'll just skip it.
            "**/VoronoiKernel.cxx",
        ],
    },
    "VTK::FiltersGeneral": {
        "included_cxxs": [
            "Filters/General/vtkTableBasedClipCases.cxx",
        ],
        "srcs_glob_exclude": [
            # Skip these classes, in order to avoid a dependency on kissfft.
            "**/vtkEqualizerFilter.cxx",
            "**/vtkTableFFT.cxx",
            # Dead code that doesn't even compile.
            # https://gitlab.kitware.com/vtk/vtk/-/issues/19044
            "**/vtkNonOverlappingAMRLevelIdScalars.cxx",
        ],
    },
    "VTK::FiltersHybrid": {
        "included_cxxs": [
            "Filters/Hybrid/vtkEarthSourceData.cxx",
        ],
    },
    "VTK::FiltersSources": {
        "visibility": ["//visibility:public"],
    },
    "VTK::IOCore": {
        "srcs_glob_exclude": [
            # Skip this class, in order to avoid a dependency on lzma.
            "**/vtkLZMADataCompressor.cxx",
        ],
        "module_deps_ignore": [
            "VTK::lzma",
        ],
    },
    "VTK::IOExport": {
        "visibility": ["//visibility:public"],
        # This module has a lot of exporter classes that we don't need, which
        # themselves have a lot of wide dependencies. We'll opt-out of the
        # default srcs glob, and instead just specify the one class we need.
        "srcs_glob_exclude": ["**"],
        "srcs_extra": [
            "IO/Export/vtkExporter.cxx",
            "IO/Export/vtkGLTFExporter.cxx",
        ],
        "module_deps_ignore": [
            "VTK::DomainsChemistry",
            "VTK::FiltersCore",
            "VTK::FiltersGeometry",
            "VTK::IOImage",
            "VTK::IOXML",
            "VTK::ImagingCore",
            "VTK::RenderingContext2D",
            "VTK::RenderingFreeType",
            "VTK::RenderingVtkJS",
            "VTK::libharu",
        ],
    },
    "VTK::IOGeometry": {
        "visibility": ["//visibility:public"],
    },
    "VTK::IOImage": {
        "visibility": ["//visibility:public"],
    },
    "VTK::IOImport": {
        "visibility": ["//visibility:public"],
        # This module has a lot of importer classes that we don't need. We'll
        # opt-out of the default srcs glob, and instead just specify the one
        # class we need.
        "srcs_glob_exclude": ["**"],
        "srcs_extra": [
            "IO/Import/vtkImporter.cxx",
            "IO/Import/vtkGLTFImporter.cxx",
        ],
    },
    "VTK::RenderingCore": {
        "visibility": ["//visibility:public"],
        "copts_extra": [
            # Match the VTK defaults.
            "-DVTK_OPENGL2",
        ],
    },
    "VTK::RenderingOpenGL2": {
        "visibility": ["//visibility:public"],
        "cmake_defines": select({
            ":osx": [
                "VTK_USE_COCOA",
            ],
            "//conditions:default": [
                "VTK_USE_X",
            ],
        }),
        "cmake_undefines": [
            "VTK_DEFAULT_RENDER_WINDOW_OFFSCREEN",
            "VTK_OPENGL_ENABLE_STREAM_ANNOTATIONS",
            "VTK_OPENGL_HAS_EGL",
            "VTK_OPENGL_HAS_OSMESA",
            "VTK_REPORT_OPENGL_ERRORS",
            "VTK_REPORT_OPENGL_ERRORS_IN_RELEASE_BUILDS",
            "VTK_USE_CORE_GRAPHICS",
            "VTK_USE_DIRECTX",
            "VTK_USE_NVCONTROL",
        ] + select({
            ":osx": [
                "VTK_USE_X",
            ],
            "//conditions:default": [
                "VTK_USE_COCOA",
            ],
        }),
        "hdrs_extra": [
            ":generated_rendering_opengl2_sources",
        ],
        "srcs_glob_exclude": [
            # This is configure-time setup code, not library code.
            "**/vtkProbe*",
            # Exclude all renderers by default; we'll incorporate the necessary
            # ones using with srcs_extra immediately below.
            "**/vtkCocoa*",
            "**/vtkEGL*",
            "**/vtkOSOpenGL*",
            "**/vtkSDL2OpenGL*",
            "**/vtkWin32OpenGL*",
            "**/vtkXOpenGL*",
        ],
        "srcs_objc_non_arc": select({
            ":osx": [
                "Rendering/OpenGL2/vtkCocoaGLView.mm",
                "Rendering/OpenGL2/vtkCocoaRenderWindow.mm",
            ],
            "//conditions:default": [],
        }),
        "srcs_extra": select({
            ":osx": [],
            "//conditions:default": [
                "Rendering/OpenGL2/vtkXOpenGLRenderWindow.cxx",
            ],
        }) + [
            # The vtkObjectFactory.cmake logic for vtk_object_factory_configure
            # is too difficult to implement in Bazel at the moment. Instead,
            # we'll commit the two generated files and directly mention them.
            "@drake//tools/workspace/vtk_internal:gen/vtkRenderingOpenGL2ObjectFactory.h",  # noqa
            "@drake//tools/workspace/vtk_internal:gen/vtkRenderingOpenGL2ObjectFactory.cxx",  # noqa
        ],
        "linkopts_extra": select({
            ":osx": [
                # Mimic vtk_module_link(... "-framework Cocoa").
                "-framework Cocoa",
            ],
            "//conditions:default": [],
        }),
        "deps_extra": select({
            ":osx": [],
            "//conditions:default": [
                # Mimic vtk_module_link(... X11::X11).
                "@x11",
            ],
        }),
    },
    "VTK::RenderingUI": {
        # This module has a lot of platform-specific importer classes that we
        # don't need. We'll opt-out of the default srcs glob, and instead just
        # specify the one class we need.
        "srcs_glob_exclude": ["**"],
        "srcs_extra": [
            "Rendering/UI/vtkGenericRenderWindowInteractor.cxx",
        ],
    },
    # Dependencies that come from Drake's WORKSPACE.
    "VTK::fmt": {
        "cmake_defines": [
            "VTK_MODULE_USE_EXTERNAL_VTK_fmt=1",
        ],
        "deps_extra": [
            "@fmt",
        ],
    },
    "VTK::glew": {
        "cmake_defines": [
            "VTK_MODULE_USE_EXTERNAL_vtkglew=1",
        ],
        "cmake_undefines": [
            "VTK_GLEW_SHARED",
            "VTK_MODULE_vtkglew_GLES3",
        ],
        "deps_extra": [
            "@glew",
        ],
    },
    "VTK::jpeg": {
        "cmake_defines": [
            "VTK_MODULE_USE_EXTERNAL_vtkjpeg=1",
        ],
        "hdrs_glob_exclude": [
            "ThirdParty/jpeg/vtkjpeg/**",
        ],
        "deps_extra": [
            # TODO(jwnimmer-tri) VTK is the only user of this library.
            # We should write our own WORKSPACE rule to build it sensibly,
            # or switch to VTK's vendored version.
            "@libjpeg",
        ],
    },
    "VTK::lz4": {
        "cmake_defines": [
            "VTK_MODULE_USE_EXTERNAL_vtklz4=1",
        ],
        "deps_extra": [
            # TODO(jwnimmer-tri) VTK is the only user of this library.
            # We should write our own WORKSPACE rule to build it sensibly,
            # or switch to VTK's vendored version.
            "@liblz4",
        ],
    },
    "VTK::nlohmannjson": {
        "cmake_defines": [
            "VTK_MODULE_USE_EXTERNAL_vtknlohmannjson=1",
        ],
        "deps_extra": [
            "@nlohmann_internal//:nlohmann",
        ],
    },
    "VTK::opengl": {
        "deps_extra": [
            "@opengl",
        ],
    },
    "VTK::png": {
        "cmake_defines": [
            "VTK_MODULE_USE_EXTERNAL_vtkpng=1",
        ],
        "deps_extra": [
            "@libpng",
        ],
    },
    "VTK::tiff": {
        "cmake_defines": [
            "VTK_MODULE_USE_EXTERNAL_vtktiff=1",
        ],
        "deps_extra": [
            # TODO(jwnimmer-tri) VTK is the only user of this library.
            # We should write our own WORKSPACE rule to build it sensibly,
            # or switch to VTK's vendored version.
            "@libtiff",
        ],
    },
    "VTK::zlib": {
        "cmake_defines": [
            "VTK_MODULE_USE_EXTERNAL_vtkzlib=1",
        ],
        "deps_extra": [
            "@zlib",
        ],
    },
    # Dependencies that we let VTK build and vendor on its own, because
    # nothing else in Drake needs these.
    "VTK::doubleconversion": {
        "cmake_undefines": [
            "VTK_MODULE_USE_EXTERNAL_vtkdoubleconversion",
        ],
        "srcs_glob_extra": [
            "ThirdParty/doubleconversion/**/*.cc",
        ],
    },
    "VTK::pugixml": {
        "cmake_undefines": [
            "VTK_MODULE_USE_EXTERNAL_vtkpugixml",
        ],
        "hdrs_glob_exclude": [
            # We use `patches/pugixml.patch` instead of a configure file.
            "**/pugiconfig.hpp.in",
        ],
        "srcs_glob_extra": [
            "ThirdParty/pugixml/**/*.cpp",
        ],
    },
    "VTK::utf8": {
        "cmake_undefines": [
            "VTK_MODULE_USE_EXTERNAL_vtkutf8",
        ],
    },
}
