Suppress warnings for deliberately "leaking" boxed solver

The clarabel c++/rust FFI code uses a pattern involving temporary
Box-ing of the solver (owned elsewhere) to permit calling it. Recent
versions of the rust toolchain started warning about the apparent memory
leak. This patch suppresses the warnings at the affected lines of code.

This patch should be upstreamed.

--- rust_wrapper/src/solver/implementations/default/data_updating.rs
+++ rust_wrapper/src/solver/implementations/default/data_updating.rs
@@ -38,7 +38,7 @@ unsafe fn _internal_DefaultSolver_update_csc<T: FloatT>(
     }
 
     // Leave the solver object on the heap
-    Box::into_raw(solver);
+    #[allow(unused_must_use)] { Box::into_raw(solver); }
 
     // Ensure Rust does not free the memory of arrays managed by C
     forget(mat);
@@ -68,7 +68,7 @@ unsafe fn _internal_DefaultSolver_update<T: FloatT>(
     }
 
     // Leave the solver object on the heap
-    Box::into_raw(solver);
+    #[allow(unused_must_use)] { Box::into_raw(solver); }
 
     // Ensure Rust does not free the memory of arrays managed by C
     forget(nzval);
@@ -99,8 +99,8 @@ unsafe fn _internal_DefaultSolver_update_partial<T: FloatT>(
     }
 
     // Leave the solver object on the heap
-    Box::into_raw(solver);
+    #[allow(unused_must_use)] { Box::into_raw(solver); }
 
     // Ensure Rust does not free the memory of arrays managed by C
     forget(index);
     
--- rust_wrapper/src/solver/implementations/default/solver.rs
+++ rust_wrapper/src/solver/implementations/default/solver.rs
@@ -129,7 +129,7 @@ fn _internal_DefaultSolver_solve<T: FloatT>(solver: *mut c_void) {
     solver.solve();
 
     // Leave the solver object on the heap
-    Box::into_raw(solver);
+    #[allow(unused_must_use)] { Box::into_raw(solver); }
 }
 
 #[no_mangle]
@@ -192,7 +192,7 @@ where T: FloatT + DeserializeOwned + Serialize,
     solver.write_to_file(&mut file).unwrap();
 
     // Leave the solver object on the heap
-    Box::into_raw(solver);
+    #[allow(unused_must_use)] { Box::into_raw(solver); }
 }
 
 #[no_mangle]
@@ -290,7 +290,7 @@ fn _internal_DefaultSolver_solution<T: FloatT>(solver: *mut c_void) -> DefaultSo
     let solution = DefaultSolution::<T>::from(&mut solver.solution);
 
     // Leave the solver object on the heap
-    Box::into_raw(solver);
+    #[allow(unused_must_use)] { Box::into_raw(solver); }
 
     // Return the solution as a C struct
     solution
@@ -319,7 +319,7 @@ fn _internal_DefaultSolver_info<T: FloatT>(solver: *mut c_void) -> ClarabelDefau
     let info = ClarabelDefaultInfo::<T>::from(&mut solver.info);
 
     // Leave the solver object on the heap
-    Box::into_raw(solver);
+    #[allow(unused_must_use)] { Box::into_raw(solver); }
 
     // Return the info as a C struct
     info
