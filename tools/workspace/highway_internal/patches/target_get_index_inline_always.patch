[highway_internal] Force GetIndex() method to always be inline

Prior upstream work on the HWY_INLINE macro definition made it
effectively no-op in non-MSVC debug builds.  In the specific case of
ChosenTarget::GetIndex(), it must always be inline for correctness of
the target configuration scheme.

Introduce a new macro HWY_ALWAYS_INLINE and use it to repair the
GetIndex() method.

Note that the first change block below gives compatible definitions for
an `#if MSVC` stanza. This is not strictly necessary for Drake, but
keeps the patch itself compiler-neutral. The second change block is for
all remaining compilers, and the third change block applies the repair.

These changes should not be upstreamed to highway. The deeper issue is
that highway currently relies on delicate handling of deliberate ODR
violations. Analyzing and fixing ODR issues in highway is beyond the
scope of work needed for Drake.

--- hwy/base.h
+++ hwy/base.h
@@ -91,7 +91,8 @@
 
 #define HWY_FUNCTION __FUNCSIG__  // function name + template args
 #define HWY_RESTRICT __restrict
-#define HWY_INLINE __forceinline
+#define HWY_ALWAYS_INLINE __forceinline
+#define HWY_INLINE HWY_ALWAYS_INLINE
 #define HWY_NOINLINE __declspec(noinline)
 #define HWY_FLATTEN
 #define HWY_NORETURN __declspec(noreturn)
@@ -112,10 +113,11 @@
 
 #define HWY_FUNCTION __PRETTY_FUNCTION__  // function name + template args
 #define HWY_RESTRICT __restrict__
+#define HWY_ALWAYS_INLINE inline __attribute__((always_inline))
 // force inlining without optimization enabled creates very inefficient code
 // that can cause compiler timeout
 #ifdef __OPTIMIZE__
-#define HWY_INLINE inline __attribute__((always_inline))
+#define HWY_INLINE HWY_ALWAYS_INLINE
 #else
 #define HWY_INLINE inline
 #endif

--- hwy/targets.h
+++ hwy/targets.h
@@ -315,7 +315,7 @@ struct ChosenTarget {
   // of HWY_CHOSEN_TARGET_MASK_TARGETS defined in the translation unit that
   // calls it, which may be different from others. This means we only enable
   // those targets that were actually compiled in this module.
-  size_t HWY_INLINE GetIndex() const {
+  size_t HWY_ALWAYS_INLINE GetIndex() const {
     return hwy::Num0BitsBelowLS1Bit_Nonzero64(
         static_cast<uint64_t>(LoadMask() & HWY_CHOSEN_TARGET_MASK_TARGETS));
   }
