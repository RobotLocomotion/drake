We convert <drake:visual> to <visual> after SDF parsing. This means
we're going to modify the sdf::Link instances in place, adding new
sdf::Visual instances

To support this change, the new <visual> elements need to have their
"PoseRelativeToGraph" property set. We've modified Link::AddVisual() to
automatically update added visual's graphs to the link's graph (this is
what happens when we call Link::SetPoseRelativeToGraph()). This should
be otherwise benign.

This change could be upstreamed. However, it's not clear if sdformat
wants to encourage this kind of post-parse modification. If it does,
then the same logic should be applied to the sdf::Link's other child
elements: Collision, Light, Sensor, Emitter, and Projector.

--- src/Link.cc
+++ src/Link.cc
@@ -940,6 +940,13 @@ bool Link::AddVisual(const Visual &_visual)
   if (this->VisualNameExists(_visual.Name()))
     return false;
   this->dataPtr->visuals.push_back(_visual);
+
+  // Configure the visual's pose-relative-to graph in case the visual gets
+  // added *after* the Link has been configured.
+  auto& visual = this->dataPtr->visuals.back();
+  visual.SetXmlParentName(this->dataPtr->name);
+  visual.SetPoseRelativeToGraph(this->dataPtr->poseRelativeToGraph);
+
   return true;
 }
 
