# -*- python -*-

load(
    "@drake//tools/install:install.bzl",
    "install",
)
load(
    "@drake//tools/workspace:cmake_configure_file.bzl",
    "cmake_configure_file",
)
load(
    "@drake//tools/workspace:generate_include_header.bzl",
    "drake_generate_include_header",
)

licenses(["restricted"])  # LGPL-2.1-or-later AND LGPL-3.0-only

package(default_visibility = ["//visibility:private"])

# First we build filib from the .tgz and patch file in the ibex repository.

cmake_configure_file(
    name = "rounding_control_config",
    src = "filibsrc-3.0.2.2/rounding_control/rounding_control_config.hpp.in",
    out = "filibsrc-3.0.2.2/rounding_control/rounding_control_config.hpp",
    defines = ["define_have_sse=#define HAVE_SSE", "define_have_x87="],
)

# Note: We cannot glob the files since they are generated by the
# `extract_filib` rule.  Instead, we list them explicitly here.
_FILIB_FILES = [
    "filibsrc-3.0.2.2/" + s
    for s in [
        "interval/stdfun/filib_consts.hpp",
        "interval/interval_fo.hpp",
        "interval/filib.hpp",
        "interval/interval.hpp",
        "ieee/primitive.hpp",
        "fp_traits/fp_traits_float.hpp",
        "fp_traits/fp_traits_x87_const.hpp",
        "fp_traits/fp_traits_double.hpp",
        "fp_traits/fp_traits_sse_const.hpp",
        "fp_traits/fp_traits.hpp",
        "rounding_control/rounding_control_config.hpp.in",
        "rounding_control/rounding_control_stub.hpp",
        "rounding_control/rounding_control_float.hpp",
        "rounding_control/rounding_control_double.hpp",
        "rounding_control/rounding_control.hpp",
        "interval/stdfun/interval/asin.icc",
        "interval/stdfun/interval/sqr.icc",
        "interval/stdfun/interval/pow.icc",
        "interval/stdfun/interval/tanh.icc",
        "interval/stdfun/interval/sqrt.icc",
        "interval/stdfun/interval/log10.icc",
        "interval/stdfun/interval/log.icc",
        "interval/stdfun/interval/exp2.icc",
        "interval/stdfun/interval/acosh.icc",
        "interval/stdfun/interval/acot.icc",
        "interval/stdfun/interval/coth.icc",
        "interval/stdfun/interval/expm1.icc",
        "interval/stdfun/interval/exp.icc",
        "interval/stdfun/interval/log1p.icc",
        "interval/stdfun/interval/tan.icc",
        "interval/stdfun/interval/atanh.icc",
        "interval/stdfun/interval/cot.icc",
        "interval/stdfun/interval/exp10.icc",
        "interval/stdfun/interval/log2.icc",
        "interval/stdfun/interval/asinh.icc",
        "interval/stdfun/interval/acoth.icc",
        "interval/stdfun/interval/sin.icc",
        "interval/stdfun/interval/acos.icc",
        "interval/stdfun/interval/cos.icc",
        "interval/stdfun/interval/sinh.icc",
        "interval/stdfun/interval/atan.icc",
        "interval/stdfun/interval/cosh.icc",
        "interval/stdfun/filib_tools.icc",
        "interval/stdfun/point/q_log.icc",
        "interval/stdfun/point/q_lg10.icc",
        "interval/stdfun/point/q_cot.icc",
        "interval/stdfun/point/q_tan.icc",
        "interval/stdfun/point/q_acot.icc",
        "interval/stdfun/point/q_exp.icc",
        "interval/stdfun/point/q_sqrt.icc",
        "interval/stdfun/point/q_expm.icc",
        "interval/stdfun/point/q_acos.icc",
        "interval/stdfun/point/q_sqr.icc",
        "interval/stdfun/point/q_atnh.icc",
        "interval/stdfun/point/q_atn1.icc",
        "interval/stdfun/point/q_rtrg.icc",
        "interval/stdfun/point/q_cth1.icc",
        "interval/stdfun/point/q_asin.icc",
        "interval/stdfun/point/q_errm.icc",
        "interval/stdfun/point/q_acth.icc",
        "interval/stdfun/point/q_sinh.icc",
        "interval/stdfun/point/q_cosh.icc",
        "interval/stdfun/point/q_sin.icc",
        "interval/stdfun/point/q_cos1.icc",
        "interval/stdfun/point/q_ep1.icc",
        "interval/stdfun/point/q_log2.icc",
        "interval/stdfun/point/q_ex10.icc",
        "interval/stdfun/point/q_cos.icc",
        "interval/stdfun/point/q_tanh.icc",
        "interval/stdfun/point/q_log1.icc",
        "interval/stdfun/point/q_asnh.icc",
        "interval/stdfun/point/q_sin1.icc",
        "interval/stdfun/point/q_atan.icc",
        "interval/stdfun/point/q_epm1.icc",
        "interval/stdfun/point/q_coth.icc",
        "interval/stdfun/point/q_acsh.icc",
        "interval/stdfun/point/q_exp2.icc",
        "interval/interval_arith.icc",
        "interval/interval.icc",
        "interval/tools.icc",
        "fp_traits/fp_traits_double_x87_multiplicative.icc",
        "fp_traits/fp_traits_float_sse_native_switched.icc",
        "fp_traits/fp_traits_double_sse_multiplicative.icc",
        "fp_traits/fp_traits_float_generic_multiplicative.icc",
        "fp_traits/fp_traits_float_sse_native_directed.icc",
        "fp_traits/fp_traits_float_sse_native_onesided_global.icc",
        "fp_traits/fp_traits_float_x87_multiplicative.icc",
        "fp_traits/fp_traits_double_sse_pred_succ_rounding.icc",
        "fp_traits/fp_traits_double_sse_native_onesided_global.icc",
        "fp_traits/fp_traits_double_generic_pred_succ_rounding.icc",
        "fp_traits/fp_traits_double_sse_native_switched.icc",
        "fp_traits/fp_traits_double_generic_native_switched.icc",
        "fp_traits/fp_traits_float_generic_native_onesided_global.icc",
        "fp_traits/fp_traits_double_sse_no_rounding.icc",
        "fp_traits/fp_traits_double_x87_pred_succ_rounding.icc",
        "fp_traits/fp_traits_float_x87_native_switched.icc",
        "fp_traits/fp_traits_double_sse_native_directed.icc",
        "fp_traits/fp_traits_float_x87_native_onesided_global.icc",
        "fp_traits/fp_traits_float_x87_no_rounding.icc",
        "fp_traits/fp_traits_double_generic_native_onesided_global.icc",
        "fp_traits/fp_traits_double_generic_native_directed.icc",
        "fp_traits/fp_traits_double_x87_native_directed.icc",
        "fp_traits/fp_traits_double_generic_no_rounding.icc",
        "fp_traits/fp_traits_float_x87_native_directed.icc",
        "fp_traits/fp_traits_base_double.icc",
        "fp_traits/fp_traits_double_x87_native_switched.icc",
        "fp_traits/fp_traits_float_sse_multiplicative.icc",
        "fp_traits/fp_traits_float_generic_native_switched.icc",
        "fp_traits/fp_traits_double_x87_native_onesided_global.icc",
        "fp_traits/fp_traits_float_generic_native_directed.icc",
        "fp_traits/fp_traits_base_float.icc",
        "fp_traits/fp_traits_float_sse_no_rounding.icc",
        "fp_traits/fp_traits_double_x87_no_rounding.icc",
        "fp_traits/fp_traits_double_generic_multiplicative.icc",
        "fp_traits/fp_traits_float_generic_no_rounding.icc",
        "rounding_control/rounding_control_float_iso9x.icc",
        "rounding_control/rounding_control_float_asmmsvci386.icc",
        "rounding_control/rounding_control_double_asmmsvci386.icc",
        "rounding_control/rounding_control_double_asmsparc.icc",
        "rounding_control/rounding_control_double_void.icc",
        "rounding_control/rounding_control_float_void.icc",
        "rounding_control/rounding_control_float_asmsparc.icc",
        "rounding_control/rounding_control_double_iso9x.icc",
        "interval/stdfun/filib_consts.cpp",
        "ieee/primitive.cpp",
        "fp_traits/fp_traits_base_float_setup.cpp",
        "fp_traits/fp_traits_sse_const.cpp",
        "fp_traits/fp_traits_float_setup.cpp",
        "fp_traits/fp_traits_double_setup.cpp",
        "fp_traits/fp_traits_x87_const.cpp",
        "fp_traits/fp_traits_base_double_setup.cpp",
    ]
]

_FILIB_CONFIGURED_FILES = [
    s[:-3] if s[-3:] == ".in" else s
    for s in _FILIB_FILES
]
_FILIB_HEADER_FILES = [
    s
    for s in _FILIB_CONFIGURED_FILES
    if s[-4:] == ".hpp" or s[-4:] == ".icc"
]
_FILIB_SOURCE_FILES = [s for s in _FILIB_CONFIGURED_FILES if ".cpp" in s]

genrule(
    name = "extract_filib",
    srcs = [
        "interval_lib_wrapper/filib/3rd/filibsrc-3.0.2.2.tar.gz",
        "interval_lib_wrapper/filib/3rd/filibsrc-3.0.2.2.all.all.patch",
    ],
    outs = _FILIB_FILES,
    cmd = "tar --no-same-owner -xzf $(location interval_lib_wrapper/filib/3rd/filibsrc-3.0.2.2.tar.gz) -C $(@D) && patch --quiet -p1 -d $(@D) <$(location interval_lib_wrapper/filib/3rd/filibsrc-3.0.2.2.all.all.patch)",  # noqa
)

# Excerpt from the Filib CMakeLists.txt (contained in the .tar.gz file):
# With Filib, we need to add flags "-frounding-math" and "-ffloat-store"
# It is necessary to use filib, to avoid problem with x80 processor.
# This option prevents undesirable excess precision on machines such as the
# 68000 where the floating registers (of the 68881) keep more precision than a
# "double" is supposed to have. Similarly for the x86 architecture. For most
# programs, the excess precision does only good, but a few programs rely on the
# precise definition of IEEE floating point. Use -ffloat-store for such
# programs, after modifying them to store all pertinent intermediate
# computations into variables.
cc_library(
    name = "filib",
    srcs = _FILIB_SOURCE_FILES,
    hdrs = _FILIB_HEADER_FILES,
    includes = ["filibsrc-3.0.2.2"],
    copts = ["-w", "-frounding-math", "-ffloat-store", "-DHAVE_BOOST"],
    linkstatic = True,
)

# Now we actually build IBEX.  First we define the variables that must get
# pushed into the three .in files during the cmake configure step.  The values
# were obtained primarily by running the ibex cmake build and inspecting the
# resulting files generated from the .in sources.

OPERATORS_INCLUDES = """
#include "ibex_atanhc.h"
#include "ibex_atanhccc.h"
#include "ibex_crossproduct.h"
#include "ibex_sinc.h"
#include "ibex_trace.h"
"""

OPERATORS_FCT_DEF = """
inline Interval atanhc(const Interval& x) {
  return UnaryOperator<ATANHC,Interval,Interval>::fwd(x);
}
inline Interval atanhccc(const Interval& x) {
  return UnaryOperator<ATANHCCC,Interval,Interval>::fwd(x);
}
inline IntervalVector cross(const IntervalVector& x1, const IntervalVector& x2)
{
  return BinaryOperator<CROSS_PRODUCT,IntervalVector,IntervalVector,
                        IntervalVector>::fwd(x1,x2);
}
inline Interval sinc(const Interval& x) {
  return UnaryOperator<SINC,Interval,Interval>::fwd(x);
}
inline IntervalVector trace(const IntervalMatrix& x) {
  return UnaryOperator<TRACE,IntervalMatrix,IntervalVector>::fwd(x);
}
"""

OPERATORS_MACRO_UNARY = """
ADD_UNARY_OPERATOR(ATANHC,Interval,Interval);
ADD_UNARY_OPERATOR(ATANHCCC,Interval,Interval);
ADD_UNARY_OPERATOR(SINC,Interval,Interval);
ADD_UNARY_OPERATOR(TRACE,IntervalMatrix,IntervalVector);
"""

OPERATORS_MACRO_BINARY = """
ADD_BINARY_OPERATOR(CROSS_PRODUCT,IntervalVector,IntervalVector,IntervalVector);
"""

IBEX_CONFIG = [
    "IBEX_VERSION=2.8.6",
    # The default INTERVAL_LIB (gaol) is GPL.  filib is lesser-GPL.
    "INTERVAL_LIB=filib",
    "LP_LIB=clp",
    "OPERATORS_INCLUDES=" + OPERATORS_INCLUDES,
    "OPERATORS_FCT_DEF=" + OPERATORS_FCT_DEF,
    "OPERATORS_MACRO_UNARY=" + OPERATORS_MACRO_UNARY,
    "OPERATORS_MACRO_BINARY=" + OPERATORS_MACRO_BINARY,
]

# Loop through the .in files and run cmake_configure_file.
[
    cmake_configure_file(
        name = "gen_" + file,
        src = file + ".in",
        out = file,
        defines = IBEX_CONFIG,
        visibility = ["//visibility:private"],
    )
    for file in [
        "src/ibex_Setting.h",
        "src/symbolic/ibex_ExprOperators.h",
        "src/symbolic/ibex_ExprOperators.cpp",
    ]
]

_IBEX_HEADERS = glob([
    "src/**/*.h",
    "plugins/optim/src/**/*.h",
], exclude = [
    "src/bin/*",
]) + [
    ":src/ibex_Setting.h",
    ":src/symbolic/ibex_ExprOperators.h",
    "interval_lib_wrapper/filib/ibex_IntervalLibWrapper.h",
    "interval_lib_wrapper/filib/ibex_IntervalLibWrapper.inl",
    "lp_lib_wrapper/clp/ibex_LPLibWrapper.h",
]

_IBEX_INCLUDES = glob(
    ["src/*", "plugins/optim/src/*"],
    exclude = ["src/wscript", "src/*.*"],
    exclude_directories = 0,
) + [
    "interval_lib_wrapper/filib",
    "lp_lib_wrapper/clp",
    "src",
]

drake_generate_include_header(
    name = "gen_ibex_h",
    out = "src/ibex.h",
    hdrs = _IBEX_HEADERS,
    strip_prefix = ["src/"],
)

cc_library(
    name = "ibex_headers",
    hdrs = _IBEX_HEADERS + _FILIB_HEADER_FILES + [
        ":src/ibex.h",
        "src/parser/parser.tab.hh",
    ],
    includes = _IBEX_INCLUDES + [
        "filibsrc-3.0.2.2",
        "",  # For plugins
    ],
)

# Note: We have committed the flex and yacc generated outputs to our fork of
# ibex to avoid the unnecessary dependency here.  If we need to revisit this
# decision, the genrules needed are:
# "/usr/bin/flex -Pibex -o $(@D)/lexer.lex.cc $(location src/parser/#lexer.l)"
# to generate "src/parser/lexer.lex.cc" and
# "/usr/bin/bison --report=all --name-prefix=ibex --file-prefix=parser -d
#   -o $(@D)/src/parser/parser.tab.cc $(location src/parser/parser.yc)"
# to generate ["src/parser/parser.tab.cc", "src/parser/parser.tab.hh"].
# To do this properly in bazel,
# "@dreal//third_party/com_github_google_kythe/tools/build_rules:lexyacc.bzl"
# is close to what we need to pull in flex and bison.

# We only build a shared-library flavor of libdrake_ibex.so, because it is
# LGPL-licensed and thus should never be linked statically.  Building C++
# shared libraries in Bazel is a bit arcane.  This rule creates the runtime
# artifact -- a loadable shared library.  The `name = "ibex"` rule below
# provides the compile-time artifact that combines the shared library with
# its headers.
cc_binary(
    name = "libdrake_ibex.so",
    srcs = glob([
        "src/**/*.cpp",
        "src/parser/*.cc",
        "plugins/optim/src/**/*.cpp",
    ], exclude = [
        "src/bin/*",
    ]) + [
        # These files must be generated:
        "interval_lib_wrapper/filib/ibex_IntervalLibWrapper.cpp",
        "lp_lib_wrapper/clp/ibex_LPLibWrapper.cpp",
        ":src/symbolic/ibex_ExprOperators.cpp",
    ],
    copts = ["-w -std=c++11"],
    linkopts = [
        "-lbz2",
        "-lm",
    ] + select({
        "@drake//tools/cc_toolchain:linux": [
            "-Wl,-soname,libdrake_ibex.so",
        ],
        "@//conditions:default": [],
    }),
    deps = [
        ":filib",
        ":ibex_headers",
        "@blas",
        "@clp",
        "@lapack",
        "@zlib",
    ],
    linkstatic = True,
    linkshared = True,
)

# This is the compile-time target for libdrake_ibex.  See above for details.
cc_library(
    name = "ibex",
    srcs = ["libdrake_ibex.so"],
    deps = [
        ":ibex_headers",
        "@clp",  # Need to pass on this dependency.
    ],
    visibility = ["//visibility:public"],
)

install(
    name = "install",
    targets = [":libdrake_ibex.so"],
    hdrs = _IBEX_HEADERS + [":src/ibex.h"],
    hdr_dest = "include/ibex",
    hdr_strip_prefix = _IBEX_INCLUDES,
    docs = [
        "COPYING.LESSER",
        "LICENSE",
    ],
    visibility = ["//visibility:public"],
)
