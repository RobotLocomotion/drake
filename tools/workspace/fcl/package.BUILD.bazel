# -*- python -*-

load(
    "@drake//tools/workspace:cmake_configure_file.bzl",
    "cmake_configure_file",
)
load(
    "@drake//tools/install:install.bzl",
    "install",
)
load(
    "@drake//tools/workspace:generate_export_header.bzl",
    "generate_export_header",
)
load(
    "@drake//tools/workspace:generate_include_header.bzl",
    "drake_generate_include_header",
)

package(
    default_visibility = ["//visibility:public"],
)

# Generate header to provide ABI export symbols for fcl.
generate_export_header(
    out = "include/fcl/export.h",
    lib = "fcl",
    static_define = "FCL_STATIC_DEFINE",
)

# Generates config.h based on the version numbers in CMake code.
cmake_configure_file(
    name = "config",
    src = "include/fcl/config.h.in",
    out = "include/fcl/config.h",
    cmakelists = [
        "CMakeModules/FCLVersion.cmake",
        "@octomap//:cmakelists_with_version",
    ],
    defines = ["FCL_HAVE_OCTOMAP"],
    visibility = ["//visibility:private"],
)

# Generates fcl.h, which consists of #include statements for *all* of the other
# headers in the library (!!!).  The first line is '#pragma once' followed by
# one line like '#include "fcl/common/types.h"' for each non-generated header.
drake_generate_include_header(
    name = "fcl_h_genrule",
    out = "include/fcl/fcl.h",
    hdrs = glob(["include/**/*.h"]),
)

# The globbed srcs= and hdrs= matches upstream's explicit globs of the same.
# fcl/export.h is a generated file so it is not automatically included by
# the hdrs glob expression
cc_library(
    name = "fcl",
    srcs = glob(["src/**/*.cpp"]),
    hdrs = glob(["include/**/*.h"]) + [
        ":config",
        ":fcl_h_genrule",
        "include/fcl/export.h",
    ],
    copts = ["-fvisibility=hidden"],
    defines = [
        "FCL_STATIC_DEFINE",
        "FCL_HAVE_OCTOMAP",
    ],
    includes = ["include"],
    linkstatic = 1,
    deps = [
        "@ccd",
        "@eigen",
        "@octomap",
    ],
)

install(
    name = "install",
    docs = ["LICENSE"],
)
