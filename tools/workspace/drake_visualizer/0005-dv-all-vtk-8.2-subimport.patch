diff --git a/src/python/director/cameracontrol.py b/src/python/director/cameracontrol.py
index 946622d0..88d1ba7c 100644
--- a/src/python/director/cameracontrol.py
+++ b/src/python/director/cameracontrol.py
@@ -1,4 +1,4 @@
-import vtk
+import director.thirdparty.vtk as vtk
 import time
 import numpy as np
 from director import transformUtils
diff --git a/src/python/director/fieldcontainer.py b/src/python/director/fieldcontainer.py
index 696a3f66..b4ae7f12 100644
--- a/src/python/director/fieldcontainer.py
+++ b/src/python/director/fieldcontainer.py
@@ -1,4 +1,4 @@
-import vtk
+import director.thirdparty.vtk as vtk
 import numpy as np
 
 def _max_length(strings):
diff --git a/src/python/director/perception.py b/src/python/director/perception.py
index 257120cc..9d5df39f 100644
--- a/src/python/director/perception.py
+++ b/src/python/director/perception.py
@@ -1,6 +1,6 @@
 import os
 import sys
-import vtk
+import director.thirdparty.vtk as vtk
 import math
 import PythonQt
 from PythonQt import QtCore, QtGui
@@ -809,7 +809,7 @@ class MapServerSource(TimerCallback):
             self.reader.SetDistanceRange(self.folder.getProperty('Min Range'), self.folder.getProperty('Max Range'))
             self.reader.SetEdgeAngleThreshold(self.folder.getProperty('Edge Filter Angle'))
             self.reader.SetHeightRange(self.folder.getProperty('Min Height'), self.folder.getProperty('Max Height'))
-            
+
         viewIds = self.reader.GetViewIds()
         viewIds = vnp.numpy_support.vtk_to_numpy(viewIds) if viewIds.GetNumberOfTuples() else []
         for viewId in viewIds:
@@ -838,7 +838,7 @@ def init(view):
     lidarNames = queue.getLidarNames()
     for lidar in lidarNames:
         if queue.displayLidar(lidar):
-            
+
             l = LidarSource(view, queue.getLidarChannelName(lidar), queue.getLidarCoordinateFrame(lidar), queue.getLidarFriendlyName(lidar), queue.getLidarIntensity(lidar))
             l.start()
             lidarDriver = l
@@ -861,4 +861,4 @@ def init(view):
     spindleDebug.addToView(view)
     om.addToObjectModel(spindleDebug, sensorsFolder)
 
-    return multisenseDriver, mapServerSource
\ No newline at end of file
+    return multisenseDriver, mapServerSource
diff --git a/src/python/director/segmentation.py b/src/python/director/segmentation.py
index e309659d..5f3702ae 100644
--- a/src/python/director/segmentation.py
+++ b/src/python/director/segmentation.py
@@ -1,7 +1,7 @@
 import os
 import sys
 import math
-import vtk
+import director.thirdparty.vtk as vtk
 import time
 import functools
 import traceback
@@ -225,7 +225,7 @@ class DisparityPointCloudItem(vis.PolyDataItem):
 
         if polyData.GetNumberOfPoints() > 0 and not self.lastUtime:
             self.setProperty('Color By', 'rgb_colors')
-           
+
 
         self.lastUtime = utime
 
@@ -2411,7 +2411,7 @@ def makeMovable(obj, initialTransform=None):
 
 def segmentTable(polyData, searchPoint):
     '''
-    NB: If you wish to use the table frame use segmentTableAndFrame instead 
+    NB: If you wish to use the table frame use segmentTableAndFrame instead
     ##################
     Segment a horizontal table surface (perpendicular to +Z) in the given polyData
     Input:
@@ -2530,12 +2530,12 @@ def segmentTableAndFrame(polyData, searchPoint):
     viewFrame = SegmentationContext.getGlobalInstance().getViewFrame()
     viewDirection = SegmentationContext.getGlobalInstance().getViewDirection()
     robotYaw = math.atan2( viewDirection[1], viewDirection[0] )*180.0/np.pi
-    linkFrame = transformUtils.frameFromPositionAndRPY( viewFrame.GetPosition() , [0,0, robotYaw ] )    
+    linkFrame = transformUtils.frameFromPositionAndRPY( viewFrame.GetPosition() , [0,0, robotYaw ] )
 
     # Function returns corner point that is far right from the robot
     cornerTransform, rectDepth, rectWidth, _ = findMinimumBoundingRectangle(tablePoints, linkFrame)
     rectHeight = 0.02 # arbitrary table width
-   
+
     # recover mid point
     t = transformUtils.copyFrame(cornerTransform)
     t.PreMultiply()
diff --git a/src/python/director/vtkAll.py b/src/python/director/vtkAll.py
index d6182df4..b7938777 100644
--- a/src/python/director/vtkAll.py
+++ b/src/python/director/vtkAll.py
@@ -1,4 +1,4 @@
-from vtk import *
+from director.thirdparty.vtk import *
 from director.vtkDRCFiltersPython import *
 
 try:
diff --git a/src/python/director/vtkNumpy.py b/src/python/director/vtkNumpy.py
index 63bb6034..01c8605f 100644
--- a/src/python/director/vtkNumpy.py
+++ b/src/python/director/vtkNumpy.py
@@ -1,6 +1,9 @@
 from director.shallowCopy import shallowCopy
 import director.vtkAll as vtk
-from vtk.util import numpy_support
+from director.thirdparty.vtk.util import numpy_support
+import sys
+import os
+sys.path.insert(0, f"{os.path.dirname(__file__)}/thirdparty")
 import numpy as np
 
 
