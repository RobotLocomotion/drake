#!/bin/bash
#
# Drake script to upgrade our requirements lockfile.
# - Users should make edits to pyproject.toml, and then
# - run this script to compile pyproject.toml to pdm.lock.

set -eux -o pipefail

commit=
files_to_commit=()
while [ "${1:-}" != "" ]; do
    case "$1" in
        --commit)
            commit=1
            ;;
        *)
            echo "Invalid command line argument, $1." >&2
            exit 5
    esac
    shift
done

check_working_tree() {
    paths_modified=($(
        (git status --untracked-files=no --porcelain=v1 -- . || true) | \
        (grep -vE '^.. pdm.lock$' || true)))
    if [ ${#paths_modified[@]} != 0 ]; then
        git status --untracked-files=no .
        set +x
        echo >&2
        echo "Refusing to proceed while your working tree is dirty." >&2
        echo "Commit your changes first or run without --commit." >&2
        exit 1
    fi
}

# Chdir to the Drake root.
cd "$(dirname $0)/../../.."
readonly drake_python="$(bazel info output_base).drake_python"
readonly project="${drake_python}/project"
readonly venv_pdm="${drake_python}/venv.pdm"
readonly python="${venv_pdm}/bin/python"
readonly workspace="$(pwd)/tools/workspace/python"

# If committing, check that the working tree is clean (enough). Note that the
# lock file is ignored.
[ -z "${commit}" ] || check_working_tree

# Ensure venv exists.
bazel fetch @python --force

# Update the lock file.
readonly lockfile="./setup/python/pdm.lock"
"${venv_pdm}/bin/pdm" lock -d -p "${project}" -L "${lockfile}"

# Update pins for PDM itself
readonly requirements="./setup/python/requirements.txt"
cat > "${requirements}" <<EOF
# This file does NOT describe the requirements for Drake itself, but for
# setting up the Python virtual environment that Drake will manage. It is used
# by Drake's @python, and also when preparing a virtual environment to support
# a Drake installation.
#
# This file is generated by tools/workspace/python/venv_upgrade.
EOF
"${venv_pdm}/bin/pdm" export -p "${project}" -G pdm --no-default |
    grep -vE '^#' >> "${requirements}"
files_to_commit+=( "$(git diff --name-only HEAD -- "${requirements}")" )

if [ ${#files_to_commit[@]} -gt 0 ]; then
    # PDM needs to be updated.
    bazel fetch @python

    # Update the lock file (again).
    "${venv_pdm}/bin/pdm" lock -d -p "${project}" -L "${lockfile}"
fi

# Check for changes to the lock file.
files_to_commit+=( "$(git diff --name-only HEAD -- "${lockfile}")" )

# If committing, do the commit.
if [ -n "${commit}" ]; then
    if [ ${#files_to_commit[@]} == 0 ]; then
        set +x
        echo
        echo "No changes need to be committed."
        exit 0
    fi

    message="[setup] Upgrade Python venv to latest"
    git commit -m "${message}" -o "${files_to_commit[@]}"
fi
