#!/bin/bash
#
# Drake script to upgrade our requirements lockfile.
# - Users should make edits to pyproject.toml, and then
# - run this script to compile pyproject.toml to pdm.lock.
#
# The --reuse option may be given to apply changes to pyproject.toml while
# attempting to preserve existing version pins.
#
# This script should also be run periodically to update pinned Python packages
# to the latest available versions.

set -eux -o pipefail

commit=
files_to_commit=()
lock_args=()
while [ "${1:-}" != "" ]; do
    case "$1" in
        --reuse)
            lock_args+=( --update-reuse )
            ;;
        --commit)
            commit=1
            ;;
        *)
            echo "Invalid command line argument, $1." >&2
            exit 5
    esac
    shift
done

check_working_tree() {
    paths_modified=($(
        (git status --untracked-files=no --porcelain=v1 -- . || true) | \
        (grep -vE '^.. pdm.lock$' || true)))
    if [ ${#paths_modified[@]} != 0 ]; then
        git status --untracked-files=no .
        set +x
        echo >&2
        echo "Refusing to proceed while your working tree is dirty." >&2
        echo "Commit your changes first or run without --commit." >&2
        exit 1
    fi
}

update_requirements() {
    # Once it's installed from a basic 'bootstrap' requirements.txt (see
    # setup/python/requirements.txt.in), we can use our dependency management
    # tool (PDM) to generate a complete lock file for itself. We do this by
    # mentioning it in a separate dependency group (which will get updated
    # along with the other groups) that we here export to a requirements.txt.
    # Note the use of --no-default to restrict what we export to *only* the
    # named group, excluding the usual dependencies needed to build Drake.
    #
    # The 'bootstrap' file also contains a custom header that, with some slight
    # tweaking, we will use for the generated file.
    sed $'/will be generated/{s/will be/is/\nq\n}' < "$1.in" > "$1"
    "${venv_pdm}/bin/pdm" export -p "${project}" -G pdm --no-default |
        grep -vE '^#' >> "$1"
}

# Chdir to the Drake root.
cd "$(dirname $0)/../../.."
readonly drake_python="$(bazel info output_base).drake_python"
readonly project="${drake_python}/project"
readonly venv_pdm="${drake_python}/venv.pdm"
readonly python="${venv_pdm}/bin/python"
readonly workspace="$(pwd)/tools/workspace/python"

# If committing, check that the working tree is clean (enough). Note that the
# lock file is ignored.
[ -z "${commit}" ] || check_working_tree

# Ensure venv exists.
bazel fetch @python --force

# Update the lock file.
readonly lockfile="./setup/python/pdm.lock"
lock_args+=( -d -p "${project}" -L "${lockfile}" )
"${venv_pdm}/bin/pdm" lock "${lock_args[@]}"

# Update pins for PDM itself
readonly requirements="./setup/python/requirements.txt"
update_requirements "${requirements}"
files_to_commit+=( "$(git diff --name-only HEAD -- "${requirements}")" )

if [ ${#files_to_commit[@]} -gt 0 ]; then
    # PDM needs to be updated.
    bazel fetch @python

    # Update the lock files (again).
    update_requirements "${requirements}"
    "${venv_pdm}/bin/pdm" lock "${lock_args[@]}"
fi

# Check for changes to the lock file.
files_to_commit+=( "$(git diff --name-only HEAD -- "${lockfile}")" )

# If committing, do the commit.
if [ -n "${commit}" ]; then
    if [ ${#files_to_commit[@]} == 0 ]; then
        set +x
        echo
        echo "No changes need to be committed."
        exit 0
    fi

    message="[setup] Upgrade Python venv to latest"
    git commit -m "${message}" -o "${files_to_commit[@]}"
fi
