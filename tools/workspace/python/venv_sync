#!/bin/bash
#
# Drake script to set up the Python venv based on information in setup/python.
# Uses https://pdm-project.org/ under the hood.
#
# Users must NOT run this manually.

set -eux -o pipefail

# Globals (will be set from command line arguments).
python=
repository=

# Create virtual environment at specified path (if it doesn't exist).
mkvenv() {
    if [ ! -d "$1" ]; then
        "${python}" -m venv "$1"
    fi
}

# Process command line arguments.
while [ "${1:-}" != "" ]; do
    case "$1" in
        --python)
            # The python interpreter to use.
            readonly python="$2"
            shift
            ;;
        --repository)
            # The bazel repository rule root to interface with. We'll use the
            # response file found there, and write back the `bin` symlink.
            readonly repository="$2"
            shift
            ;;
        *)
            echo 'Invalid command line argument' >&2
            exit 5
    esac
    shift
done
if [[ -z "${python}" ]]; then
    echo "error: --python is required"
    exit 1
fi
if [[ -z "${repository}" ]]; then
    echo "error: --repository is required"
    exit 1
fi

# Place the venv(s) in a sibling directory to the output base. That should be a
# suitable disk location for build artifacts, but without polluting the actual
# output base that Bazel owns.
readonly bazel_output_base="$(cd "${repository}/../.." && pwd)"
readonly drake_python="${bazel_output_base}.drake_python"
mkdir -p "${drake_python}"

# Install PDM into a virtual environment. We segregate PDM from the environment
# it is managing, so that changes to the managed environment cannot break PDM.
readonly venv_pdm="${drake_python}/venv.pdm"
mkvenv "${venv_pdm}"
# TODO(jeremy.nimmer) Ideally, we also would pin all of the dependencies of
# PDM here, but it's not obvious to me how to do that in a way which is easy to
# upgrade/re-pin over time.
"${venv_pdm}/bin/pip" install -U pdm==2.22.0

# Don't nag about new versions of PDM; we'll update the above pin when we want
# to use something newer, and otherwise want to use the pinned version, so
# being informed about newer versions is just noise.
export PDM_CHECK_UPDATE=0

# Prepare the PDM "project directory".
readonly drake_root="$(cd "$(dirname $0)/../../.." && pwd)"
readonly setup="${drake_root}/setup/python"
readonly project="${drake_python}/project"
mkdir -p "${project}"
ln -nsf "${setup}/pyproject.toml" "${project}/pyproject.toml"
ln -nsf "${setup}/pdm.lock" "${project}/pdm.lock"

# Prepare the venv that will hold Drake's requirements.
readonly venv_drake="${drake_python}/venv.drake"
mkvenv "${venv_drake}"
"${venv_pdm}/bin/pdm" use -p "${project}" -f "${venv_drake}"

# Ask PDM to install whatever dependencies we need.
readonly install_args=( $(cat "${repository}/@pdm-install-args") )
"${venv_pdm}/bin/pdm" sync \
    -p "${project}" \
    --clean-unselected \
    "${install_args[@]}"

# Symlink our venv bin path for the repository.bzl to use.
ln -nsf "${venv_drake}/bin" "${repository}/bin"
