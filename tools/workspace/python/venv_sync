#!/bin/bash
#
# Drake script to set up the Python venv.
# Uses https://github.com/jazzband/pip-tools under the hood for setup.
#
# Users must NOT run this manually.

set -eux -o pipefail

# Process command line arguments.
python=
repository=
while [ "${1:-}" != "" ]; do
  case "$1" in
    --python)
      # The python interpreter to use.
      readonly python="$2"
      shift
      ;;
    --repository)
      # The bazel repository rule root to interface with. We'll use the
      # `requirements.txt` found there to specify the venv contents, and we'll
      # communicate our result by writing back a `venv_python3.txt` file to the
      # same location, containing the path to our venv.drake/bin/python3.
      readonly repository="$2"
      shift
      ;;
    *)
      echo 'Invalid command line argument' >&2
      exit 5
  esac
  shift
done
if [[ -z "${python}" ]]; then
  echo "error: --python is required"
  exit 1
fi
if [[ -z "${repository}" ]]; then
  echo "error: --repository is required"
  exit 1
fi

# Place the venv(s) in a sibling directory to the output base. That should be a
# suitable disk location for build artifacts, but without polluting the actual
# output base that Bazel owns.
bazel_output_base=$(cd "${repository}/../.." && pwd)
venv_base="${bazel_output_base}.venv"
mkdir -p "${venv_base}"

# Install pip-tools into a virtual environment. As suggested by the pip-tools
# docs, we segregate the pip-tools apps from the environment they are managing,
# so that changes to the managed environment cannot break pip-tools.
readonly venv_jazzband="${venv_base}/venv.jazzband"
if [ ! -d "${venv_jazzband}" ]; then
  "${python}" -m venv "${venv_jazzband}"
fi
# TODO(jeremy.nimmer) Ideally, we also would pin all of the dependencies of
# pip-tools here, but it's not obvious to me how to do that in a way which is
# easy to upgrade/re-pin over time.
"${venv_jazzband}/bin/pip" install -U pip-tools==7.4.1

# Prepare the venv that will hold Drake's requirements.
readonly venv_drake="${venv_base}/venv.drake"
if [ ! -d "${venv_drake}" ]; then
  "${python}" -m venv "${venv_drake}"
fi
# Any environment managed by pip-tools requires a sufficiently new version of
# pip as compared to the Ubuntu 22.04 default.
"${venv_drake}/bin/pip" install -U pip==24.2

# Run the pip-sync tool.
"${venv_jazzband}/bin/pip-sync" \
    --verbose \
    --python-executable="${venv_drake}/bin/python3" \
    "${repository}/requirements.txt"

# Compute the checksum of our requirements file.
readonly checksum=$(cd "${repository}" && "${python}" <<EOF
import hashlib
from pathlib import Path
data = Path("requirements.txt").read_bytes()
digest = hashlib.sha256(data).hexdigest()
print(digest, end=None, flush=True)
EOF
)
[[ -n "${checksum}" ]]

# Symlink our venv bin path for the repository.bzl to use. We'll salt it with
# the requirements checksum so that Bazel will invalidate all Python targets
# when the checksum changes.
mkdir "${repository}/${checksum}"
ln -nsf "${venv_drake}/bin" "${repository}/${checksum}/bin"

# Tell repository.bzl which path to use.
echo -n "${checksum}/bin/python3" > "${repository}/venv_python3.txt"
