tinyobj offers the api ObjReader::ParseFromString(). This API delegates to the
LoadObj() from stream API. It creates streams for the obj and mtl contents.
The default behavior of std::stringbuf is to *copy* the strings. Instead, we
introduce a string buffer that simply aliases the string's underlying character
array to save the copy.

This is only controversial in so far that std::istream::putback() is an API that
can allow an *input* stream to modify its otherwise read-only buffer. But we
rely on the fact that tinyobj parsing doesn't attempt to do so.

This should probably be upstreamed to tinyobj.

--- tiny_obj_loader.h
+++ tiny_obj_loader.h
@@ -3502,11 +3502,26 @@ bool ObjReader::ParseFromFile(const std::string &filename,
   return valid_;
 }
 
+namespace {
+// This provides a string buffer for std::istream that doesn't copy the input
+// string. Instead, it aliases the string's character array. This is only
+// safe as long as the parsing never calls std::istream::putback() with a
+// *different* character than read -- as that would mutate the string.
+struct AliasingStringReadBuf : public std::streambuf {
+ public:
+  AliasingStringReadBuf(const std::string& str) {
+    char* s = const_cast<char*>(str.c_str());
+    setg(s, s, s + str.size());
+  }
+};
+
+}
+
 bool ObjReader::ParseFromString(const std::string &obj_text,
                                 const std::string &mtl_text,
                                 const ObjReaderConfig &config) {
-  std::stringbuf obj_buf(obj_text);
-  std::stringbuf mtl_buf(mtl_text);
+  AliasingStringReadBuf obj_buf(obj_text);
+  AliasingStringReadBuf mtl_buf(mtl_text);
 
   std::istream obj_ifs(&obj_buf);
   std::istream mtl_ifs(&mtl_buf);
