# -*- mode: python -*-
# vi: set ft=python :

"""
Makes the umsgpack module from u-msgpack-python available to be used as a
Python dependency. On Ubuntu Xenial, a u-msgpack-python archive is downloaded
from GitHub (https://git.io/fxbIK) or a specified mirror and unpacked. On
Ubuntu Bionic the python-u-msgpack package must be installed using apt. On
macOS, u-msgpack-python must be installed using pip2.

Example:
    WORKSPACE:
        load("@drake//tools/workspace:mirrors.bzl", "DEFAULT_MIRRORS")
        load(
            "@drake//tools/workspace/u_msgpack_python:repository.bzl",
            "u_msgpack_python_repository",
        )
        u_msgpack_python_repository(name = "foo", mirrors = DEFAULT_MIRRORS)

    BUILD:
        py_library(
            name = "foobar",
            deps = ["@foo//:umsgpack"],
            srcs = ["bar.py"],
        )

Arguments:
    name: A unique name for this rule. The rule must not be named umsgpack.
    mirrors: A dictionary of mirrors, see tools/workspace/mirrors.bzl for an
             example.
"""

load("@drake//tools/workspace:os.bzl", "determine_os")

def _impl(repository_ctx):
    if repository_ctx.name == "umsgpack":
        fail("Rule must NOT be named umsgpack")

    os_result = determine_os(repository_ctx)

    if os_result.error:
        fail(os_result.error)

    # TODO(jamiesnape): Support Python 3.x where appropriate.

    if os_result.is_macos:
        repository_ctx.symlink(
            "/usr/local/lib/python2.7/site-packages/umsgpack.py",
            "umsgpack.py",
        )

    elif os_result.ubuntu_release == "16.04":
        urls = [
            x.format(
                repository = "vsergeev/u-msgpack-python",
                commit = "v2.1",
            )
            for x in repository_ctx.attr.mirrors.get("github")
        ]
        repository_ctx.download_and_extract(
            urls,
            sha256 = "38e780b2ecfd6bae09c1f82d6adc4ade2579558296cfa944751081fc5c7c6b29",  # noqa
            stripPrefix = "u-msgpack-python-2.1",
        )

    elif os_result.ubuntu_release == "18.04":
        repository_ctx.symlink(
            "/usr/lib/python2.7/dist-packages/umsgpack.py",
            "umsgpack.py",
        )

    else:
        fail("Operating system is NOT supported", attr = os_result)

    if not repository_ctx.path("umsgpack.py").exists:
        fail("File umsgpack.py does NOT exist")

    file_content = """# -*- python -*-

# DO NOT EDIT: generated by u_msgpack_python_repository()

licenses(["notice"])  # MIT

py_library(
    name = "umsgpack",
    srcs = ["umsgpack.py"],
    imports = ["."],
    visibility = ["//visibility:public"],
)
"""

    if os_result.ubuntu_release == "16.04":
        file_content += """
load("@drake//tools/install:install.bzl", "install")

install(
    name = "install",
    targets = [":umsgpack"],
    docs = ["LICENSE"],
    doc_dest = "share/doc/umsgpack",
    visibility = ["//visibility:public"],
)
"""
    else:
        file_content += """
load("@drake//tools/install:install.bzl", "install_files")

install_files(
    name = "install",
    dest = ".",
    files = [],
    visibility = ["//visibility:public"],
)
"""

    repository_ctx.file(
        "BUILD.bazel",
        content = file_content,
        executable = False,
    )

u_msgpack_python_repository = repository_rule(
    attrs = {
        "mirrors": attr.string_list_dict(),
    },
    implementation = _impl,
)
