#!/bin/bash
#
# Drake script to upgrade our requirements lockfile.
# - Users should make edits to requirements.in, and then
# - run this script to compile requirements.in to requirements.txt, and then
# - run ./sync to upgrade the venv to match the new requirements.txt.

set -eux -o pipefail

generate_requirements() {
    in_name="$1.in"
    out_name="$1.txt"

    # Operate in temporary directory.
    cd "$tmpdir"

    # Remove any existing lockfile to avoid it being used as a baseline.
    rm -f "$out_name"

    # Compile requirements.in to its locked form of requirements.txt.
    "$venv_root"/venv.jazzband/bin/pip-compile \
        --verbose \
        --output-file "$out_name" \
        "$in_name"

    # Edit the comment atop the file that explains how to upgrade.
    echo '# This file is generated by' \
         'drake/tools/workspace/venv/upgrade;' \
         'do not edit' > requirements.tmp
    tail -n+6 "$out_name" >> requirements.tmp
    mv \
        requirements.tmp \
        "$workspace_root/setup/$platform/source_distribution/$out_name"
}

# Determine what platform we are on.
if [[ "$(uname)" == "Darwin" ]]; then
    readonly platform=mac
else
    readonly platform=ubuntu
fi

# Chdir to the Drake root.
cd "$(dirname $0)/../../.."
readonly workspace_root="$(pwd)"
readonly venv_root="$workspace_root/bazel-venv"

# Create temporary directory.
tmpdir="$(mktemp -d)"
tmpdir="$(cd "$tmpdir" && pwd)"
trap 'rm -rf "$tmpdir"' EXIT

# Copy input file to temporary directory.
cp \
    "$workspace_root/setup/$platform/source_distribution"/requirements*.in \
    "$tmpdir/"

generate_requirements requirements-without-test
generate_requirements requirements-with-test
