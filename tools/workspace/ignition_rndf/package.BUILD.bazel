# -*- python -*-

load(
    "@drake//tools/workspace:cmake_configure_file.bzl",
    "cmake_configure_file",
)
load(
    "@drake//tools/workspace:generate_include_header.bzl",
    "drake_generate_include_header",
)
load(
    "@drake//tools/workspace:check_lists_consistency.bzl",
    "check_lists_consistency",
)
load(
    "@drake//tools/install:install.bzl",
    "cmake_config",
    "install",
    "install_cmake_config",
)
load("@drake//tools/workspace:generate_file.bzl", "generate_file")

licenses(["notice"])  # Apache-2.0

package(default_visibility = ["//visibility:public"])

config_setting(
    name = "linux",
    values = {"cpu": "k8"},
    visibility = ["//visibility:private"],
)

PROJECT_NAME = "ignition-rndf"

PROJECT_MAJOR = 0

PROJECT_MINOR = 1

PROJECT_PATCH = 5

# Generates config.hh based on the version numbers in CMake code.
cmake_configure_file(
    name = "config",
    src = "include/ignition/rndf/config.hh.in",
    out = "include/ignition/rndf/config.hh",
    cmakelists = ["CMakeLists.txt"],
    defines = [
        # It would be nice to get this information directly from
        # CMakeLists.txt, but it ends up being too hard. We'd have to extend
        # the cmake_configure_file functionality to create variables from
        # "project" command as well as manipulate strings, and I'm not sure it
        # is worth it.  We just hard code some values that should not change.
        "PROJECT_NAME=%s" % (PROJECT_NAME),
        "PROJECT_NAME_LOWER=%s" % (PROJECT_NAME),
        "PROJECT_MAJOR_VERSION=%d" % (PROJECT_MAJOR),
        "PROJECT_MINOR_VERSION=%d" % (PROJECT_MINOR),
        "PROJECT_PATCH_VERSION=%d" % (PROJECT_PATCH),
        "PROJECT_VERSION_MAJOR=%d" % (PROJECT_MAJOR),
        "PROJECT_VERSION_MINOR=%d" % (PROJECT_MINOR),
        "PROJECT_VERSION_PATCH=%d" % (PROJECT_PATCH),
        "PROJECT_VERSION=%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR),
        "PROJECT_VERSION_FULL=%d.%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),  # noqa
    ],
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/rndf/Export.hh",
    content = """
#pragma once

// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_RNDF_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.

#ifdef IGNITION_RNDF_VISIBLE
#undef IGNITION_RNDF_VISIBLE
#endif
#define IGNITION_RNDF_VISIBLE __attribute__ ((visibility("default")))

#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

public_headers_no_gen = [
    "include/ignition/rndf/Checkpoint.hh",
    "include/ignition/rndf/Exit.hh",
    "include/ignition/rndf/Helpers.hh",
    "include/ignition/rndf/Lane.hh",
    "include/ignition/rndf/ParkingSpot.hh",
    "include/ignition/rndf/ParserUtils.hh",
    "include/ignition/rndf/Perimeter.hh",
    "include/ignition/rndf/RNDF.hh",
    "include/ignition/rndf/RNDFNode.hh",
    "include/ignition/rndf/Segment.hh",
    "include/ignition/rndf/UniqueId.hh",
    "include/ignition/rndf/Waypoint.hh",
    "include/ignition/rndf/Zone.hh",
]

# Generates rndf.hh, which consists of #include statements for all of the
# public headers in the library.  The first line is
# '#include <ignition/rndf/config.hh>' followed by one line like
# '#include <ignition/rndf/Checkpoint.hh>' for each non-generated header.
drake_generate_include_header(
    name = "rndfhh_genrule",
    out = "include/ignition/rndf.hh",
    hdrs = public_headers_no_gen + [
        "include/ignition/rndf/config.hh",
        "include/ignition/rndf/Export.hh",
    ],
    visibility = ["//visibility:private"],
)

check_lists_consistency(
    file_list = public_headers_no_gen,
    glob = ["include/**/*.hh"],
)

public_headers = public_headers_no_gen + [
    "include/ignition/rndf/config.hh",
    "include/ignition/rndf/Export.hh",
    "include/ignition/rndf.hh",
]

cc_binary(
    name = "libdrake_ignition_rndf0.so",
    srcs = [
        "src/Checkpoint.cc",
        "src/Exit.cc",
        "src/Lane.cc",
        "src/ParkingSpot.cc",
        "src/ParserUtils.cc",
        "src/Perimeter.cc",
        "src/RNDF.cc",
        "src/RNDFNode.cc",
        "src/Segment.cc",
        "src/UniqueId.cc",
        "src/Waypoint.cc",
        "src/Zone.cc",
    ] + public_headers,
    copts = [
        "-fvisibility-inlines-hidden",
        "-w",
    ],
    includes = ["include"],
    linkopts = select({
        ":linux": ["-Wl,-soname,libdrake_ignition_rndf0.so"],
        "//conditions:default": [],
    }),
    linkshared = 1,
    visibility = [],
    deps = [
        "@ignition_math",
    ],
)

cc_library(
    name = "ignition_rndf",
    srcs = ["libdrake_ignition_rndf0.so"],
    hdrs = public_headers,
    includes = ["include"],
    visibility = ["//visibility:public"],
    deps = [
        "@ignition_math",
    ],
)

CMAKE_PACKAGE = "ignition-rndf0"

cmake_config(
    package = CMAKE_PACKAGE,
    script = "@drake//tools/workspace/ignition_rndf:package-create-cps.py",
    version_file = ":config",
    deps = ["@ignition_math//:cps"],
)

# Creates rule :install_cmake_config.
install_cmake_config(package = CMAKE_PACKAGE)

install(
    name = "install",
    workspace = CMAKE_PACKAGE,
    targets = [":libdrake_ignition_rndf0.so"],
    hdrs = public_headers,
    hdr_dest = "include/" + CMAKE_PACKAGE,
    hdr_strip_prefix = ["include"],
    docs = [
        "COPYING",
        "LICENSE",
    ],
    deps = [":install_cmake_config"],
)
