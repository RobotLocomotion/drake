[openusd_internal] Fix operator== overloading for C++20

C++20 adds new feature named "rewritten comparison operators" where it
automatically considers both argument orders for operator==. This
leads to two problems for OpenUSD:

(1) The operator== on TfWeakPtrFacade base class was written to accept
the more specific CRTP derived type as its argument, so the types of
`this` and `p` were different, so the swapped ordering was formally
ambiguous. We can fix this by using matching the type of `this` and
`p`. There's no need to downcast to the derived type for any reason.

(2) There were two different implementations of TfRefPtr vs TfWeakPtr
comparisons (with flipped arguments). One implementation tried to
delegate to the other one, but in C++20 ends up as a self-call and
infinite recursion. We need to nix one of overloads in when compiling
in C++20 mode.

We should probably upstream something like this, or at least file an
issue around C++ 20 support generally.

--- pxr/base/tf/weakPtrFacade.h
+++ pxr/base/tf/weakPtrFacade.h
@@ -111,14 +111,12 @@ public:
     typedef Type element_type;
     
     template <class Other>
-    bool operator == (PtrTemplate<Other> const &p) const {
-        if (false)
-            return _FetchPointer() == TfWeakPtrFacadeAccess::FetchPointer(p);
+    bool operator==(TfWeakPtrFacade const &p) const {
         return GetUniqueIdentifier() == p.GetUniqueIdentifier();
     }
 
     template <class Other>
-    bool operator != (PtrTemplate<Other> const &p) const {
+    bool operator!=(TfWeakPtrFacade const &p) const {
         return !(*this == p);
     }
 
@@ -135,6 +133,7 @@ public:
         return !(*this == p);
     }
 
+#if __cplusplus < 202002L
     template <class T>
     friend bool operator == (const TfRefPtr<T>& p1, Derived const &p2) {
         return p2 == p1;
@@ -144,6 +143,7 @@ public:
     friend bool operator != (const TfRefPtr<T>& p1, Derived const &p2) {
         return !(p1 == p2);
     }
+#endif
 
     template <class Other>
     bool operator < (PtrTemplate<Other> const &p) const {
