# -*- python -*-

package(default_visibility = ["//visibility:public"])

load(
    "@drake//tools/install:install.bzl",
    "install",
)
load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_library",
    "drake_transitive_installed_hdrs_filegroup",
)
load(
    "@drake//tools/skylark:drake_java.bzl",
    "drake_java_binary",
)
load(
    "@drake//tools/skylark:drake_py.bzl",
    "drake_py_library",
    "drake_py_test",
)
load(
    "@drake//tools/skylark:drake_lcm.bzl",
    "drake_lcm_cc_library",
    "drake_lcm_java_library",
    "drake_lcm_py_library",
)
load("//tools/lint:lint.bzl", "add_lint_tests")

_DEPRECATION_2021_04 = " ".join([
    "DRAKE DEPRECATED: This LCM message is unused within Drake and therefore",
    "is being removed. The deprecated code will be removed from Drake on or",
    "after 2021-04-01.",
])

drake_lcm_cc_library(
    name = "acrobot",
    lcm_package = "drake",
    lcm_srcs = [
        "lcmt_acrobot_u.lcm",
        "lcmt_acrobot_x.lcm",
        "lcmt_acrobot_y.lcm",
    ],
)

drake_lcm_cc_library(
    name = "body_acceleration",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_body_acceleration.lcm"],
    tags = ["manual"],
)

drake_lcm_cc_library(
    name = "body_motion_data",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_body_motion_data.lcm"],
    tags = ["manual"],
    deps = [":piecewise_polynomial"],
)

drake_lcm_cc_library(
    name = "body_wrench_data",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_body_wrench_data.lcm"],
    tags = ["manual"],
)

drake_lcm_cc_library(
    name = "call_python",
    lcm_package = "drake",
    lcm_srcs = [
        "lcmt_call_python.lcm",
        "lcmt_call_python_data.lcm",
    ],
)

drake_lcm_cc_library(
    name = "constrained_values",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_constrained_values.lcm"],
    tags = ["manual"],
)

drake_lcm_cc_library(
    name = "contact_results_for_viz",
    lcm_package = "drake",
    lcm_srcs = ["lcmt_contact_results_for_viz.lcm"],
    deps = [
        ":hydroelastic_contact_surface_for_viz",
        ":point_pair_contact_info_for_viz",
    ],
)

drake_lcm_cc_library(
    name = "contact_information",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_contact_information.lcm"],
    tags = ["manual"],
)

drake_lcm_cc_library(
    name = "experimental_deformable_mesh",
    lcm_package = "drake",
    lcm_srcs = [
        "experimental_lcmt_deformable_tri.lcm",
        "experimental_lcmt_deformable_tri_mesh_init.lcm",
        "experimental_lcmt_deformable_tri_meshes_init.lcm",
        "experimental_lcmt_deformable_tri_mesh_update.lcm",
        "experimental_lcmt_deformable_tri_meshes_update.lcm",
    ],
)

drake_lcm_cc_library(
    name = "desired_body_motion",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_desired_body_motion.lcm"],
    tags = ["manual"],
    deps = [":constrained_values"],
)

drake_lcm_cc_library(
    name = "desired_centroidal_momentum_dot",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_desired_centroidal_momentum_dot.lcm"],
    tags = ["manual"],
    deps = [":constrained_values"],
)

drake_lcm_cc_library(
    name = "desired_dof_motions",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_desired_dof_motions.lcm"],
    tags = ["manual"],
    deps = [":constrained_values"],
)

drake_lcm_cc_library(
    name = "hydroelastic_contact_surface_for_viz",
    lcm_package = "drake",
    lcm_srcs = ["lcmt_hydroelastic_contact_surface_for_viz.lcm"],
    deps = [
        ":hydroelastic_contact_surface_tri_for_viz",
        ":hydroelastic_quadrature_per_point_data_for_viz",
    ],
)

drake_lcm_cc_library(
    name = "hydroelastic_contact_surface_tri_for_viz",
    lcm_package = "drake",
    lcm_srcs = ["lcmt_hydroelastic_contact_surface_tri_for_viz.lcm"],
)

drake_lcm_cc_library(
    name = "hydroelastic_quadrature_per_point_data_for_viz",
    lcm_package = "drake",
    lcm_srcs = ["lcmt_hydroelastic_quadrature_per_point_data_for_viz.lcm"],
)

drake_lcm_cc_library(
    name = "inverse_dynamics_debug_info",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_inverse_dynamics_debug_info.lcm"],
    tags = ["manual"],
)

drake_lcm_cc_library(
    name = "joint_pd_override",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_joint_pd_override.lcm"],
    tags = ["manual"],
)

drake_lcm_cc_library(
    name = "manipulator_plan_move_end_effector",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_manipulator_plan_move_end_effector.lcm"],
    tags = ["manual"],
    deps = ["@lcmtypes_bot2_core"],
)

drake_lcm_cc_library(
    name = "piecewise_polynomial",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_piecewise_polynomial.lcm"],
    tags = ["manual"],
    deps = [":polynomial_matrix"],
)

drake_lcm_cc_library(
    name = "point_pair_contact_info_for_viz",
    lcm_package = "drake",
    lcm_srcs = ["lcmt_point_pair_contact_info_for_viz.lcm"],
)

drake_lcm_cc_library(
    name = "polynomial",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_polynomial.lcm"],
    tags = ["manual"],
)

drake_lcm_cc_library(
    name = "plan_eval_debug_info",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_plan_eval_debug_info.lcm"],
    tags = ["manual"],
)

drake_lcm_cc_library(
    name = "polynomial_matrix",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_polynomial_matrix.lcm"],
    tags = ["manual"],
    deps = [":polynomial"],
)

drake_lcm_cc_library(
    name = "qp_controller_input",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_qp_controller_input.lcm"],
    tags = ["manual"],
    deps = [
        ":body_motion_data",
        ":body_wrench_data",
        ":joint_pd_override",
        ":support_data",
        ":whole_body_data",
        ":zmp_data",
    ],
)

drake_lcm_cc_library(
    name = "qp_input",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_qp_input.lcm"],
    tags = ["manual"],
    deps = [
        ":contact_information",
        ":desired_body_motion",
        ":desired_centroidal_momentum_dot",
        ":desired_dof_motions",
    ],
)

drake_lcm_cc_library(
    name = "planar_manipuland_status",
    lcm_package = "drake",
    lcm_srcs = ["lcmt_planar_manipuland_status.lcm"],
)

drake_lcm_cc_library(
    name = "planar_gripper",
    lcm_package = "drake",
    lcm_srcs = [
        "lcmt_planar_gripper_command.lcm",
        "lcmt_planar_gripper_status.lcm",
        "lcmt_planar_gripper_finger_command.lcm",
        "lcmt_planar_gripper_finger_face_assignment.lcm",
        "lcmt_planar_gripper_finger_face_assignments.lcm",
        "lcmt_planar_gripper_finger_status.lcm",
        "lcmt_planar_plant_state.lcm",
        "lcmt_force_torque.lcm",
    ],
)

drake_lcm_cc_library(
    name = "resolved_contact",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_resolved_contact.lcm"],
    tags = ["manual"],
)

drake_lcm_cc_library(
    name = "robot_plan",
    lcm_package = "drake",
    lcm_srcs = [
        "lcmt_robot_plan.lcm",
        "lcmt_robot_state.lcm",
    ],
)

drake_lcm_cc_library(
    name = "scope",
    lcm_package = "drake",
    lcm_srcs = ["lcmt_scope.lcm"],
)

drake_lcm_cc_library(
    name = "support_data",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_support_data.lcm"],
    tags = ["manual"],
)

drake_lcm_cc_library(
    name = "whole_body_data",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_whole_body_data.lcm"],
    tags = ["manual"],
)

drake_lcm_cc_library(
    name = "zmp_data",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_zmp_data.lcm"],
    tags = ["manual"],
)

drake_lcm_cc_library(
    name = "zmp_com_observer_state",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = ["lcmt_zmp_com_observer_state.lcm"],
    tags = ["manual"],
)

drake_lcm_cc_library(
    name = "drake_signal",
    lcm_package = "drake",
    lcm_srcs = ["lcmt_drake_signal.lcm"],
)

drake_lcm_cc_library(
    name = "viewer",
    lcm_package = "drake",
    lcm_srcs = [
        "lcmt_viewer_command.lcm",
        "lcmt_viewer_draw.lcm",
        "lcmt_viewer_geometry_data.lcm",
        "lcmt_viewer_link_data.lcm",
        "lcmt_viewer_load_robot.lcm",
    ],
)

drake_lcm_cc_library(
    name = "allegro",
    lcm_package = "drake",
    lcm_srcs = [
        "lcmt_allegro_command.lcm",
        "lcmt_allegro_status.lcm",
    ],
)

drake_lcm_cc_library(
    name = "iiwa",
    lcm_package = "drake",
    lcm_srcs = [
        "lcmt_iiwa_command.lcm",
        "lcmt_iiwa_status.lcm",
        "lcmt_iiwa_status_telemetry.lcm",
    ],
)

drake_lcm_cc_library(
    name = "schunk",
    lcm_package = "drake",
    lcm_srcs = [
        "lcmt_schunk_wsg_command.lcm",
        "lcmt_schunk_wsg_status.lcm",
    ],
)

drake_lcm_cc_library(
    name = "jaco",
    lcm_package = "drake",
    lcm_srcs = [
        "lcmt_jaco_command.lcm",
        "lcmt_jaco_status.lcm",
    ],
)

drake_lcm_cc_library(
    name = "panda",
    lcm_package = "drake",
    lcm_srcs = [
        "lcmt_panda_command.lcm",
        "lcmt_panda_status.lcm",
    ],
)

drake_lcm_cc_library(
    name = "viewer2_comms",
    deprecation = _DEPRECATION_2021_04,
    lcm_package = "drake",
    lcm_srcs = [
        "lcmt_viewer2_comms.lcm",
    ],
    tags = ["manual"],
)

# Generate the *.py sources, but keep __init__.py separate, so that it doesn't
# get installed.  The install will use this (private) library.  Users should
# depend on ":lcmtypes_drake_py", immediately below.
drake_lcm_py_library(
    name = "_generated_lcmtypes_drake_py",
    # We'll rely on the //:module_py path munging instead.
    add_current_package_to_imports = False,
    lcm_package = "drake",
    lcm_srcs = glob(["*.lcm"]),
    visibility = ["//visibility:private"],
)

drake_py_library(
    name = "lcmtypes_drake_py",
    srcs = ["__init__.py"],
    deps = [
        ":_generated_lcmtypes_drake_py",
        "@lcmtypes_bot2_core//:lcmtypes_bot2_core_py",
    ],
)

drake_lcm_java_library(
    name = "lcmtypes_drake_java",
    lcm_package = "drake",
    lcm_srcs = glob(["*.lcm"]),
    deps = ["@lcmtypes_bot2_core//:lcmtypes_bot2_core_java"],
)

# This should list every LCM type that is known to Drake.
LCMTYPES_CC = [
    ":acrobot",
    ":allegro",
    ":body_acceleration",
    ":body_motion_data",
    ":body_wrench_data",
    ":call_python",
    ":constrained_values",
    ":contact_information",
    ":contact_results_for_viz",
    ":desired_body_motion",
    ":desired_centroidal_momentum_dot",
    ":desired_dof_motions",
    ":drake_signal",
    ":hydroelastic_contact_surface_for_viz",
    ":hydroelastic_contact_surface_tri_for_viz",
    ":iiwa",
    ":inverse_dynamics_debug_info",
    ":jaco",
    ":joint_pd_override",
    ":manipulator_plan_move_end_effector",
    ":panda",
    ":piecewise_polynomial",
    ":planar_manipuland_status",
    ":planar_gripper",
    ":plan_eval_debug_info",
    ":point_pair_contact_info_for_viz",
    ":polynomial",
    ":polynomial_matrix",
    ":qp_controller_input",
    ":qp_input",
    ":resolved_contact",
    ":robot_plan",
    ":schunk",
    ":scope",
    ":support_data",
    ":viewer",
    ":viewer2_comms",
    ":whole_body_data",
    ":zmp_data",
    ":zmp_com_observer_state",
]

# This rule should list every LCM type that is known to Drake or its external
# dependencies.
drake_java_binary(
    name = "drake-lcm-spy",
    main_class = "lcm.spy.Spy",
    visibility = ["//visibility:private"],
    runtime_deps = [
        ":lcmtypes_drake_java",
        "@lcmtypes_bot2_core//:lcmtypes_bot2_core_java",
        "@lcmtypes_robotlocomotion//:lcmtypes_robotlocomotion_java",
        "@optitrack_driver//lcmtypes:lcmtypes_optitrack",
    ],
)

drake_cc_library(
    name = "lcmtypes_drake_cc",
    deps = LCMTYPES_CC,
)

drake_transitive_installed_hdrs_filegroup(
    name = "lcmtypes_drake_cc_headers",
    visibility = ["//visibility:private"],
    deps = LCMTYPES_CC,
)

# The drake-lcmtypes-cpp library is distinct from (but required by) the drake
# library; refer to `tools/install/libdrake/drake.cps` for library structure.
# Therefore, we install Drake's lcmtypes C++ headers to a different directory
# than the drake library's include path; this ensures that downstream code is
# using the correct include paths for the libraries they need.  The path to
# `include/drake_lcmtypes` is provided to downstream code via `drake.cps` and
# its generated cmake config `lib/cmake/drake/drake-config.cmake.
install(
    name = "install_drake_cc_headers",
    hdrs = [":lcmtypes_drake_cc_headers"],
    hdr_dest = "include/drake_lcmtypes",
    visibility = ["//visibility:private"],
)

install(
    name = "install",
    install_tests = [":test/drake-lcm-spy_install_test.py"],
    targets = [
        ":_generated_lcmtypes_drake_py",
        ":drake-lcm-spy",
        ":drake-lcm-spy-launcher",
        ":lcmtypes_drake_java",
    ],
    rename = {
        "share/java/liblcmtypes_drake_java.jar": "lcmtypes_drake.jar",
        "bin/drake-lcm-spy-launcher.sh": "drake-lcm-spy",
    },
    deps = [
        ":install_drake_cc_headers",
        "//tools/workspace/optitrack_driver:install",
        "@lcm//:install",
        "@lcmtypes_bot2_core//:install",
        "@lcmtypes_robotlocomotion//:install",
    ],
)

# === test/ ===
drake_py_test(
    name = "polynomial_matrix_test",
    deps = [
        ":lcmtypes_drake_py",
    ],
)

add_lint_tests(
    python_lint_extra_srcs = [
        ":test/drake-lcm-spy_install_test.py",
    ],
)
