load("//tools/install:install.bzl", "install")
load("//tools/lint:lint.bzl", "add_lint_tests")
load(
    "//tools/skylark:drake_cc.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_transitive_installed_hdrs_filegroup",
)
load(
    "//tools/skylark:drake_lcm.bzl",
    "drake_lcm_cc_library",
    "drake_lcm_java_library",
    "drake_lcm_py_library",
)
load(
    "//tools/skylark:drake_py.bzl",
    "drake_py_library",
    "drake_py_test",
)
load(
    "//tools/skylark:java.bzl",
    "java_binary",
)
load("//tools/workspace:generate_file.bzl", "generate_file")
load(":defs.bzl", "ALL_LCM_SRCS")

package(default_visibility = ["//visibility:public"])

# Search for all *.lcm files.
_GLOB_ALL_LCM_SRCS = sorted(glob(["*.lcm"]))

# The list of files in the glob, but not in defs.bzl.
_MISSING_ALL = [
    x
    for x in _GLOB_ALL_LCM_SRCS
    if x not in ALL_LCM_SRCS
]

# Fail with an error message if the two lists disagree.
# TODO(jwnimmer-tri) Ideally, we'd fail at test-time, not build-time.
(len(_MISSING_ALL) == 0) or fail(
    "Please update lcmtypes/defs.bzl to add {}".format(
        _MISSING_ALL,
    ),
)

# The list of files in defs.bzl, but not in the glob.
_EXTRA_ALL = [
    x
    for x in ALL_LCM_SRCS
    if x not in _GLOB_ALL_LCM_SRCS
]

# Fail with an error message if the two lists disagree.
# TODO(jwnimmer-tri) Ideally, we'd fail at test-time, not build-time.
(len(_EXTRA_ALL) == 0) or fail(
    "Please update lcmtypes/defs.bzl remove {}".format(
        _EXTRA_ALL,
    ),
)

drake_lcm_cc_library(
    name = "lcmtypes_drake_cc",
    lcm_package = "drake",
    lcm_srcs = ALL_LCM_SRCS,
)

drake_lcm_py_library(
    name = "lcmtypes_drake_py",
    lcm_package = "drake",
    lcm_srcs = ALL_LCM_SRCS,
    deps = [
        "//:module_py",
    ],
)

drake_lcm_java_library(
    name = "lcmtypes_drake_java",
    lcm_package = "drake",
    lcm_srcs = ALL_LCM_SRCS,
)

# This should list every LCM type that is known to Drake.
LCMTYPES_CC = [
    ":acrobot",
    ":allegro",
    ":call_python",
    ":point",
    ":point_cloud",
    ":header",
    ":quaternion",
    ":image",
    ":image_array",
    ":contact_results_for_viz",
    ":drake_signal",
    ":hydroelastic_contact_surface_for_viz",
    ":iiwa",
    ":jaco",
    ":panda",
    ":planar_manipuland_status",
    ":planar_gripper",
    ":point_pair_contact_info_for_viz",
    ":robot_plan",
    ":schunk",
    ":scope",
    ":viewer",
]

[
    cc_library(
        name = colon_name[1:],
        deprecation = "DRAKE DEPRECATED: The fine-grained LCM message library \"@drake//lcmtypes:{}\" is deprecated for removal. Instead, you should depend on the all-messages library \"@drake//lcmtypes:lcmtypes_drake_cc\". The deprecated code will be removed from Drake on or after 2026-01-01.",  # noqa
        tags = ["manual"],
        visibility = ["//visibility:public"],
        deps = [":lcmtypes_drake_cc"],
    )
    for colon_name in LCMTYPES_CC
]

# This rule should list every LCM type that is known to Drake or its external
# dependencies.
java_binary(
    name = "drake-lcm-spy",
    main_class = "lcm.spy.Spy",
    visibility = ["//visibility:private"],
    runtime_deps = [
        ":lcmtypes_drake_java",
    ],
)

drake_transitive_installed_hdrs_filegroup(
    name = "lcmtypes_drake_cc_headers",
    visibility = ["//visibility:private"],
    deps = [":lcmtypes_drake_cc"],
)

install(
    name = "install_lcmtypes_cc",
    hdrs = [":lcmtypes_drake_cc_headers"],
    hdr_dest = "include",
    visibility = ["//visibility:private"],
)

install(
    name = "install_lcmtypes_python",
    targets = [":lcmtypes_drake_py"],
    visibility = ["//visibility:private"],
)

install(
    name = "install_lcmtypes_java",
    targets = [":lcmtypes_drake_java"],
    rename = {"share/java/liblcmtypes_drake_java.jar": "lcmtypes_drake.jar"},
    visibility = ["//visibility:private"],
)

config_setting(
    name = "flag_install_java_true",
    flag_values = {"//tools/flags:install_java": "True"},
)

config_setting(
    name = "flag_install_python_true",
    flag_values = {
        "//tools/flags:install_python": "True",
    },
)

install(
    name = "install",
    deps = [
        ":install_lcmtypes_cc",
    ] + select({
        ":flag_install_python_true": [
            ":install_lcmtypes_python",
        ],
        "//conditions:default": [],
    }) + select({
        ":flag_install_java_true": [
            ":install_lcmtypes_java",
        ],
        "//conditions:default": [],
    }),
)

# === test/ ===

drake_py_test(
    name = "nested_types_test",
    deps = [
        ":lcmtypes_drake_py",
    ],
)

add_lint_tests()
