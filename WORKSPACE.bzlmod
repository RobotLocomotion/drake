# -*- bazel -*-
#
# This file lists Drake's external dependencies as known to bzlmod.
#
# When bzlmod is disabled (the default), this file is NOT used.
# Instead, only WORKSPACE is used.
#
# When bzlmod is enabled, this file + MODULE.bazel are both used,
# and WORKSPACE is ignored.

# TODO(jwnimmer-tri) When Drake drops support for WORKSPACE, remember to also
# clean up the following:
# - Search for BZLMOD_ENABLED (and similar) and remove the checks. Be sure to
#   use a case-insensitive search, and check for a space instead of underscore.

workspace(name = "drake")

load("//tools/workspace:default.bzl", "add_default_workspace")

# This is the list of modules that our MODULE.bazel already incorporates.
REPOS_ALREADY_PROVIDED_BY_BAZEL_MODULES = [
    "bazel_skylib",
    "rules_cc",
    "rules_license",
    "rules_python",
]

add_default_workspace(
    repository_excludes = REPOS_ALREADY_PROVIDED_BY_BAZEL_MODULES,
)

load("@build_bazel_apple_support//crosstool:setup.bzl", "apple_cc_configure")

apple_cc_configure()

# Add some special heuristic logic for using CLion with Drake.
load("//tools/clion:repository.bzl", "drake_clion_environment")

drake_clion_environment()

load("@bazel_skylib//lib:versions.bzl", "versions")

# This needs to be in WORKSPACE or a repository rule for native.bazel_version
# to actually be defined. The minimum_bazel_version value should match the
# version passed to the find_package(Bazel) call in the root CMakeLists.txt.
versions.check(minimum_bazel_version = "7.1")

# The cargo_universe programs are only used by Drake's new_release tooling, not
# by any compilation rules. As such, we can put it directly into the WORKSPACE
# instead of into our `//tools/workspace:default.bzl` repositories.
load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")  # noqa

crate_universe_dependencies(bootstrap = True)
