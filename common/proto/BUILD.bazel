# -*- python -*-

load(
    "//tools:drake.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
)
load(
    "@drake//tools/skylark:drake_proto.bzl",
    "drake_cc_proto_library",
    "drake_py_proto_library",
)
load("@drake//tools/install:install.bzl", "install")
load("//tools/lint:lint.bzl", "add_lint_tests")

package(default_visibility = ["//visibility:public"])

drake_cc_proto_library(
    name = "matlab_rpc",
    srcs = [
        "matlab_rpc.proto",
    ],
)

drake_py_proto_library(
    name = "matlab_rpc_py",
    srcs = [
        "matlab_rpc.proto",
    ],
)

drake_cc_library(
    name = "call_matlab",
    srcs = ["call_matlab.cc"],
    hdrs = ["call_matlab.h"],
    deps = [
        ":matlab_rpc",
        ":rpc_pipe_temp_directory",
        "//common:essential",
    ],
)

drake_cc_library(
    name = "protobuf",
    srcs = ["protobuf.cc"],
    hdrs = ["protobuf.h"],
    deps = [
        "@com_google_protobuf//:protobuf",
    ],
)

drake_cc_library(
    name = "call_python",
    srcs = ["call_python.cc"],
    hdrs = ["call_python.h"],
    deps = [
        ":call_matlab",
        ":rpc_pipe_temp_directory",
        "//common:copyable_unique_ptr",
    ],
)

py_library(
    name = "call_python_client",
    srcs = ["call_python_client.py"],
    imports = ["."],
    deps = [
        ":matlab_rpc_py",
    ],
)

py_binary(
    name = "call_python_client_cli",
    srcs = ["call_python_client.py"],
    main = "call_python_client.py",
    deps = [
        # Use @drake// not just // so that "import drake.common..." works.
        # TODO(jwnimmer-tri) We should use a project-wide solution so that
        # Drake's import paths are consistent without having to use weird
        # spellings such as this one.
        "@drake//common/proto:call_python_client",
    ],
)

_UBSAN_H = "//third_party:com_github_google_protobuf/protobuf-ubsan-fixup.h"

# This library is used by //tools/skylark:drake_proto.bzl.  Developers should
# never need to mention it directly.  The source code is placed in third_party
# because it is forked from protobuf upstream, and thus copyright by Google.
cc_library(
    name = "protobuf_ubsan_fixup",
    hdrs = [_UBSAN_H],
    include_prefix = "drake/common/proto",
    strip_include_prefix = "/third_party/com_github_google_protobuf",
)

drake_cc_library(
    name = "rpc_pipe_temp_directory",
    srcs = ["rpc_pipe_temp_directory.cc"],
    hdrs = ["rpc_pipe_temp_directory.h"],
    visibility = ["//visibility:private"],
    deps = [
        "//common:essential",
        "@spruce",
    ],
)

install(
    name = "install",
    hdrs = [_UBSAN_H],
    hdr_dest = "include/drake/common/proto",
    hdr_strip_prefix = ["com_github_google_protobuf"],
    allowed_externals = [_UBSAN_H],
)

# === test/ ===

drake_cc_googletest(
    name = "call_matlab_test",
    deps = [
        ":call_matlab",
    ],
)

drake_cc_googletest(
    name = "call_python_test",
    srcs = ["test/call_python_test.cc"],
    tags = ["manual"],
    deps = [
        ":call_python",
    ],
)

# TODO(eric.cousineau): Add a test which will use an interactive matplotlib
# backend on CI only.
sh_test(
    name = "call_python_full_test",
    size = "small",
    srcs = ["test/call_python_full_test.sh"],
    data = [
        ":call_python_client_cli",
        ":call_python_test",
    ],
    # TODO(eric.cousineau): Find the source of (more) sporadic CI failures, but
    # after refactoring the script into Python.
    flaky = 1,
)

drake_cc_googletest(
    name = "protobuf_test",
    data = [
        "test/test_string.txt",
    ],
    deps = [
        ":protobuf",
        "//common",
    ],
)

drake_cc_googletest(
    name = "rpc_pipe_temp_directory_test",
    deps = [
        ":rpc_pipe_temp_directory",
    ],
)

add_lint_tests()
