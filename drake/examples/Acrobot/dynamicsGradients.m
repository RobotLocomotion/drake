function [df, d2f, d3f] = dynamicsGradients(a1, a2, a3, a4, order)
% This is an auto-generated file.
%
% See <a href="matlab: help generateGradients">generateGradients</a>. 

% Check inputs:
typecheck(a1,'AcrobotPlant');
if (nargin<4) order=1; end
if (order<1) error(' order must be >= 1'); end
sizecheck(a1,[1  1]);
sizecheck(a2,[1  1]);
sizecheck(a3,[4  1]);
sizecheck(a4,[1  1]);

% Symbol table:
Ic1=a1.Ic1;
Ic2=a1.Ic2;
a3_1=a3(1);
a3_2=a3(2);
a3_3=a3(3);
a3_4=a3(4);
a4_1=a4(1);
b1=a1.b1;
b2=a1.b2;
g=a1.g;
l1=a1.l1;
lc1=a1.lc1;
lc2=a1.lc2;
m1=a1.m1;
m2=a1.m2;


% Compute Gradients:
df = sparse(4,6);
df(1,4) = 1;
df(2,5) = 1;
df(3,2) = -(g*l1*(lc2^2*m2^2*cos(a3_1) + 2*Ic2*m2*cos(a3_1) - lc2^2*m2^2*cos(a3_1 + 2*a3_2)) + g*lc1*(2*Ic2*m1*cos(a3_1) + 2*lc2^2*m1*m2*cos(a3_1)))/(2*Ic1*Ic2 + 2*l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - 2*l1^2*lc2^2*m2^2*cos(a3_2)^2);
df(3,3) = (lc2*m2*(Ic2 + lc2^2*m2)*(a3_4^2*l1*cos(a3_2) - g*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (lc2*m2*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (l1*lc2*m2*sin(a3_2)*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2)*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
df(3,4) = -(Ic2*b1 - sin(a3_2)*(2*a3_3*l1*lc2^3*m2^2 + 2*a3_4*l1*lc2^3*m2^2 + 2*Ic2*a3_3*l1*lc2*m2 + 2*Ic2*a3_4*l1*lc2*m2) + b1*lc2^2*m2 - a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + l1^2*lc2^2*m2^2*(sin(a3_2)^2 - 1) + lc1^2*lc2^2*m1*m2);
df(3,5) = (Ic2*b2 + l1*(sin(a3_2)*(2*a3_3*lc2^3*m2^2 + 2*a3_4*lc2^3*m2^2 + 2*Ic2*a3_3*lc2*m2 + 2*Ic2*a3_4*lc2*m2) - b2*lc2*m2*(2*sin(a3_2/2)^2 - 1)) + b2*lc2^2*m2)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + l1^2*lc2^2*m2^2*(sin(a3_2)^2 - 1) + lc1^2*lc2^2*m1*m2);
df(3,6) = -(Ic2 + m2*(lc2^2 + l1*lc2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
df(4,2) = (g*(l1*lc2^2*m2^2*cos(a3_1) - Ic1*lc2*m2*cos(a3_1 + a3_2) + Ic2*l1*m2*cos(a3_1) + Ic2*lc1*m1*cos(a3_1) - l1^2*lc2*m2^2*cos(a3_1 + a3_2) + lc1*lc2^2*m1*m2*cos(a3_1) - lc1^2*lc2*m1*m2*cos(a3_1 + a3_2)) + g*cos(a3_2)*(l1^2*lc2*m2^2*cos(a3_1) - l1*lc2^2*m2^2*cos(a3_1 + a3_2) + l1*lc1*lc2*m1*m2*cos(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
df(4,3) = (2*l1*lc2*m2*sin(a3_2)*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - ((Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_4^2*l1*lc2*m2*cos(a3_2) - g*lc2*m2*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (l1*lc2*m2*sin(a3_2)*(a3_3*b1 + g*(m2*(lc2*sin(a3_1 + a3_2) + l1*sin(a3_1)) + lc1*m1*sin(a3_1)) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - ((g*lc2*m2*cos(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*cos(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_3*b1 + g*(m2*(lc2*sin(a3_1 + a3_2) + l1*sin(a3_1)) + lc1*m1*sin(a3_1)) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
df(4,4) = ((b1 - 2*a3_4*l1*lc2*m2*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*a3_3*l1*lc2*m2*sin(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
df(4,5) = -(Ic1*b2 + Ic2*b2 + cos(a3_2)*(2*b2*l1*lc2*m2 + 2*a3_3*l1^2*lc2^2*m2^2*sin(a3_2) + 2*a3_4*l1^2*lc2^2*m2^2*sin(a3_2)) + b2*l1^2*m2 + b2*lc1^2*m1 + b2*lc2^2*m2 + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
df(4,6) = (Ic1 + Ic2 + lc1^2*m1 + m2*(l1^2 + lc2^2) + 2*l1*lc2*m2*cos(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);

% d2f
if (order>=2)
  d2f = sparse(4,36);
  d2f(3,8) = (g*l1*m2*(2*Ic2*sin(a3_1) + lc2^2*m2*sin(a3_1) - lc2^2*m2*sin(a3_1 + 2*a3_2)) + 2*g*lc1*m1*sin(a3_1)*(Ic2 + lc2^2*m2))/(2*(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2));
  d2f(3,9) = -(g*l1*lc2^2*m2^2*(Ic1*Ic2*sin(a3_1 + 2*a3_2) - (l1^2*lc2^2*m2^2*sin(a3_1))/2 + (l1^2*lc2^2*m2^2*sin(a3_1 - 2*a3_2))/4 + (l1^2*lc2^2*m2^2*sin(a3_1 + 2*a3_2))/4 + (Ic2*l1^2*m2*sin(a3_1 - 2*a3_2))/2 + (Ic2*l1^2*m2*sin(a3_1 + 2*a3_2))/2 + Ic2*lc1^2*m1*sin(a3_1 + 2*a3_2) + Ic1*lc2^2*m2*sin(a3_1 + 2*a3_2) + lc1^2*lc2^2*m1*m2*sin(a3_1 + 2*a3_2) + (Ic2*l1*lc1*m1*sin(a3_1 - 2*a3_2))/2 - (Ic2*l1*lc1*m1*sin(a3_1 + 2*a3_2))/2 + (l1*lc1*lc2^2*m1*m2*sin(a3_1 - 2*a3_2))/2 - (l1*lc1*lc2^2*m1*m2*sin(a3_1 + 2*a3_2))/2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(3,14) = (l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(g*l1*m2*(2*Ic2*cos(a3_1) + lc2^2*m2*cos(a3_1) - lc2^2*m2*cos(a3_1 + 2*a3_2)) + 2*g*lc1*m1*cos(a3_1)*(Ic2 + lc2^2*m2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (g*l1*lc2^2*m2^2*sin(a3_1 + 2*a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(3,15) = (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic2 + lc2^2*m2)*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (lc2*m2*(g*sin(a3_1 + a3_2) + a3_3^2*l1*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*l1*lc2^2*m2^2*sin(a3_2)*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (l1*lc2*m2*cos(a3_2)*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (lc2*m2*(Ic2 + lc2^2*m2)*(a3_4^2*l1*sin(a3_2) - g*sin(a3_1 + a3_2) + 2*a3_3*a3_4*l1*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic2 + lc2^2*m2)*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic2 + lc2^2*m2)*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (4*l1^2*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2)*(a3_4^2*l1*cos(a3_2) - g*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*l1^2*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(3,16) = (2*l1*lc2*m2*(Ic2*a3_3*cos(a3_2) + Ic2*a3_4*cos(a3_2) + a3_3*lc2^2*m2*cos(a3_2) + a3_4*lc2^2*m2*cos(a3_2) + a3_3*l1*lc2*m2*(2*cos(a3_2)^2 - 1)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) - b1*lc2^2*m2 - Ic2*b1 + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2;
  d2f(3,17) = (l1*lc2*m2*(2*Ic2*a3_3*cos(a3_2) - b2*sin(a3_2) + 2*Ic2*a3_4*cos(a3_2) + 2*a3_3*lc2^2*m2*cos(a3_2) + 2*a3_4*lc2^2*m2*cos(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic2*b2 + l1*(b2*lc2*m2*cos(a3_2) + 2*lc2*m2*sin(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2)) + b2*lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2;
  d2f(3,18) = (l1*lc2*m2*sin(a3_2)*(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + 2*l1*lc2^3*m2^2*cos(a3_2) + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*cos(a3_2)^2 + 2*Ic2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(3,21) = (2*a3_3*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*a3_3*l1^2*lc2^2*m2^2*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) + (2*a3_4*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*a3_3*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(3,22) = (l1*lc2*m2*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + l1*lc2*m2*sin(2*a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2);
  d2f(3,23) = (2*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2);
  d2f(3,27) = (2*l1*lc2*m2*cos(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (b2*l1*lc2*m2*sin(a3_2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*b2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(a3_3 + a3_4)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(3,28) = (2*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2);
  d2f(3,29) = (2*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2);
  d2f(3,33) = (l1*lc2*m2*sin(a3_2)*(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + 2*l1*lc2^3*m2^2*cos(a3_2) + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*cos(a3_2)^2 + 2*Ic2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,8) = -(g*(l1*lc2^2*m2^2*sin(a3_1) - Ic1*lc2*m2*sin(a3_1 + a3_2) + Ic2*l1*m2*sin(a3_1) + Ic2*lc1*m1*sin(a3_1) - l1^2*lc2*m2^2*sin(a3_1 + a3_2) - lc1^2*lc2*m1*m2*sin(a3_1 + a3_2) + lc1*lc2^2*m1*m2*sin(a3_1)) + g*l1*lc2*m2*cos(a3_2)*(l1*m2*sin(a3_1) + lc1*m1*sin(a3_1) - lc2*m2*sin(a3_1 + a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(4,9) = (g*lc2*m2*sin(a3_1 + a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (g*lc2*m2*sin(a3_1 + a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (g*l1*lc2*m2*sin(a3_2)*(m2*(lc2*cos(a3_1 + a3_2) + l1*cos(a3_1)) + lc1*m1*cos(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*g*l1*lc2^2*m2^2*cos(a3_1 + a3_2)*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*g*l1^2*lc2^3*m2^3*cos(a3_1 + a3_2)*cos(a3_2)*sin(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*g*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(m2*(lc2*cos(a3_1 + a3_2) + l1*cos(a3_1)) + lc1*m1*cos(a3_1))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,14) = (g*lc2*m2*(Ic1*sin(a3_1 + a3_2) + (l1^2*m2*sin(a3_1 + a3_2))/2 + lc1^2*m1*sin(a3_1 + a3_2) + (l1^2*m2*sin(a3_1 - a3_2))/2 - (l1*lc1*m1*sin(a3_1 + a3_2))/2 + (l1*lc1*m1*sin(a3_1 - a3_2))/2 + l1*lc2*m2*sin(a3_1 + 2*a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(g*(l1*lc2^2*m2^2*cos(a3_1) - Ic1*lc2*m2*cos(a3_1 + a3_2) + Ic2*l1*m2*cos(a3_1) + Ic2*lc1*m1*cos(a3_1) - l1^2*lc2*m2^2*cos(a3_1 + a3_2) + lc1*lc2^2*m1*m2*cos(a3_1) - lc1^2*lc2*m1*m2*cos(a3_1 + a3_2)) + g*l1*lc2*m2*cos(a3_2)*(l1*m2*cos(a3_1) - lc2*m2*cos(a3_1 + a3_2) + lc1*m1*cos(a3_1))))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,15) = ((g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + ((a3_4^2*l1*lc2*m2*sin(a3_2) - g*lc2*m2*sin(a3_1 + a3_2) + 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*l1*lc2*m2*sin(a3_2)*(a3_4^2*l1*lc2*m2*cos(a3_2) - g*lc2*m2*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (l1*lc2*m2*cos(a3_2)*(a3_3*b1 + g*(m2*(lc2*sin(a3_1 + a3_2) + l1*sin(a3_1)) + lc1*m1*sin(a3_1)) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*l1*lc2*m2*cos(a3_2)*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*l1*lc2*m2*sin(a3_2)*(g*lc2*m2*cos(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (8*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_3*b1 + g*(m2*(lc2*sin(a3_1 + a3_2) + l1*sin(a3_1)) + lc1*m1*sin(a3_1)) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_3*b1 + g*(m2*(lc2*sin(a3_1 + a3_2) + l1*sin(a3_1)) + lc1*m1*sin(a3_1)) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(a3_3*b1 + g*(m2*(lc2*sin(a3_1 + a3_2) + l1*sin(a3_1)) + lc1*m1*sin(a3_1)) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (4*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_4^2*l1*lc2*m2*cos(a3_2) - g*lc2*m2*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_3*b1 + g*(m2*(lc2*sin(a3_1 + a3_2) + l1*sin(a3_1)) + lc1*m1*sin(a3_1)) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (4*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(g*lc2*m2*cos(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*cos(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,16) = (4*a3_3*l1^2*lc2^2*m2^2*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (l1*lc2*m2*sin(a3_2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*a3_4*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*a3_3*l1*lc2*m2*cos(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*a3_3*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,17) = (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic1*b2 + Ic2*b2 + b2*l1^2*m2 + b2*lc1^2*m1 + b2*lc2^2*m2 + a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) + a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*b2*l1*lc2*m2*cos(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1*lc2*m2*(Ic2*a3_3*cos(a3_2) - b2*sin(a3_2) + Ic2*a3_4*cos(a3_2) + a3_3*lc2^2*m2*cos(a3_2) + a3_4*lc2^2*m2*cos(a3_2) + a3_3*l1*lc2*m2*(2*cos(a3_2)^2 - 1) + a3_4*l1*lc2*m2*(2*cos(a3_2)^2 - 1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(4,18) = -(2*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(Ic1 + l1^2*m2 + lc1^2*m1 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,21) = (4*a3_3*l1^2*lc2^2*m2^2*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (l1*lc2*m2*sin(a3_2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*a3_4*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*a3_3*l1*lc2*m2*cos(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*a3_3*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,22) = -(2*l1*lc2*m2*sin(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(4,23) = -(l1*lc2*m2*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(4,27) = (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(a3_3 + a3_4))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) + (2*b2*l1*lc2*m2*sin(a3_2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1*lc2*m2*cos(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(a3_3 + a3_4)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*b2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,28) = -(2*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(4,29) = -(l1*lc2*m2*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(4,33) = -(2*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(Ic1 + l1^2*m2 + lc1^2*m1 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
else
  d2f=[];
end  % if (order>=2)

% d3f
if (order>=3)
  d3f = sparse(4,216);
  d3f(3,44) = (g*l1*m2*(2*Ic2*cos(a3_1) + lc2^2*m2*cos(a3_1) - lc2^2*m2*cos(a3_1 + 2*a3_2)) + 2*g*lc1*m1*cos(a3_1)*(Ic2 + lc2^2*m2))/(2*(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2));
  d3f(3,45) = -(g*l1*lc2^2*m2^2*(Ic1*Ic2*cos(a3_1 + 2*a3_2) - (l1^2*lc2^2*m2^2*cos(a3_1))/2 + (l1^2*lc2^2*m2^2*cos(a3_1 - 2*a3_2))/4 + (l1^2*lc2^2*m2^2*cos(a3_1 + 2*a3_2))/4 + (Ic2*l1^2*m2*cos(a3_1 - 2*a3_2))/2 + (Ic2*l1^2*m2*cos(a3_1 + 2*a3_2))/2 + Ic2*lc1^2*m1*cos(a3_1 + 2*a3_2) + Ic1*lc2^2*m2*cos(a3_1 + 2*a3_2) + lc1^2*lc2^2*m1*m2*cos(a3_1 + 2*a3_2) + (Ic2*l1*lc1*m1*cos(a3_1 - 2*a3_2))/2 - (Ic2*l1*lc1*m1*cos(a3_1 + 2*a3_2))/2 + (l1*lc1*lc2^2*m1*m2*cos(a3_1 - 2*a3_2))/2 - (l1*lc1*lc2^2*m1*m2*cos(a3_1 + 2*a3_2))/2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(3,50) = - (g*l1*lc2^2*m2^2*cos(a3_1 + 2*a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(g*l1*m2*(2*Ic2*sin(a3_1) + lc2^2*m2*sin(a3_1) - lc2^2*m2*sin(a3_1 + 2*a3_2)) + 2*g*lc1*m1*sin(a3_1)*(Ic2 + lc2^2*m2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(3,51) = (g*lc2*m2*cos(a3_1 + a3_2)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (g*lc2*m2*cos(a3_1 + a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*g*l1*lc2^2*m2^2*sin(a3_1 + a3_2)*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (g*l1*lc2^2*m2^2*cos(a3_1 + a3_2)*cos(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*g*l1^2*lc2^3*m2^3*cos(a3_1 + a3_2)*cos(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*g*l1^2*lc2^3*m2^3*cos(a3_1 + a3_2)*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*g*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic2 + lc2^2*m2)*(lc2*m2*cos(a3_1 + a3_2) + l1*m2*cos(a3_1) + lc1*m1*cos(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (4*g*l1^3*lc2^4*m2^4*cos(a3_1 + a3_2)*cos(a3_2)*sin(a3_2)^2)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*g*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic2 + lc2^2*m2)*(lc2*m2*cos(a3_1 + a3_2) + l1*m2*cos(a3_1) + lc1*m1*cos(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*g*l1^2*lc2^3*m2^3*sin(a3_1 + a3_2)*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*g*l1^4*lc2^5*m2^5*cos(a3_1 + a3_2)*cos(a3_2)^2*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (8*g*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic2 + lc2^2*m2)*(lc2*m2*cos(a3_1 + a3_2) + l1*m2*cos(a3_1) + lc1*m1*cos(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (4*g*l1^2*lc2^3*m2^3*sin(a3_1 + a3_2)*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(3,80) = - (g*l1*lc2^2*m2^2*cos(a3_1 + 2*a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(g*l1*m2*(2*Ic2*sin(a3_1) + lc2^2*m2*sin(a3_1) - lc2^2*m2*sin(a3_1 + 2*a3_2)) + 2*g*lc1*m1*sin(a3_1)*(Ic2 + lc2^2*m2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(3,81) = (4*g*l1^3*lc2^4*m2^4*cos(a3_2)*sin(a3_2)*(Ic1*Ic2*sin(a3_1 + 2*a3_2) - (l1^2*lc2^2*m2^2*sin(a3_1))/2 + (l1^2*lc2^2*m2^2*sin(a3_1 - 2*a3_2))/4 + (l1^2*lc2^2*m2^2*sin(a3_1 + 2*a3_2))/4 + (Ic2*l1^2*m2*sin(a3_1 - 2*a3_2))/2 + (Ic2*l1^2*m2*sin(a3_1 + 2*a3_2))/2 + Ic2*lc1^2*m1*sin(a3_1 + 2*a3_2) + Ic1*lc2^2*m2*sin(a3_1 + 2*a3_2) + lc1^2*lc2^2*m1*m2*sin(a3_1 + 2*a3_2) + (Ic2*l1*lc1*m1*sin(a3_1 - 2*a3_2))/2 - (Ic2*l1*lc1*m1*sin(a3_1 + 2*a3_2))/2 + (l1*lc1*lc2^2*m1*m2*sin(a3_1 - 2*a3_2))/2 - (l1*lc1*lc2^2*m1*m2*sin(a3_1 + 2*a3_2))/2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (g*l1*lc2^2*m2^2*(2*Ic1*Ic2*cos(a3_1 + 2*a3_2) - (l1^2*lc2^2*m2^2*cos(a3_1 - 2*a3_2))/2 + (l1^2*lc2^2*m2^2*cos(a3_1 + 2*a3_2))/2 - Ic2*l1^2*m2*cos(a3_1 - 2*a3_2) + Ic2*l1^2*m2*cos(a3_1 + 2*a3_2) + 2*Ic2*lc1^2*m1*cos(a3_1 + 2*a3_2) + 2*Ic1*lc2^2*m2*cos(a3_1 + 2*a3_2) + 2*lc1^2*lc2^2*m1*m2*cos(a3_1 + 2*a3_2) - Ic2*l1*lc1*m1*cos(a3_1 - 2*a3_2) - Ic2*l1*lc1*m1*cos(a3_1 + 2*a3_2) - l1*lc1*lc2^2*m1*m2*cos(a3_1 - 2*a3_2) - l1*lc1*lc2^2*m1*m2*cos(a3_1 + 2*a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(3,86) = (l1^2*lc2^2*m2^2*cos(a3_2)^2*(g*l1*m2*(2*Ic2*cos(a3_1) + lc2^2*m2*cos(a3_1) - lc2^2*m2*cos(a3_1 + 2*a3_2)) + 2*g*lc1*m1*cos(a3_1)*(Ic2 + lc2^2*m2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (l1^2*lc2^2*m2^2*sin(a3_2)^2*(g*l1*m2*(2*Ic2*cos(a3_1) + lc2^2*m2*cos(a3_1) - lc2^2*m2*cos(a3_1 + 2*a3_2)) + 2*g*lc1*m1*cos(a3_1)*(Ic2 + lc2^2*m2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*g*l1*lc2^2*m2^2*cos(a3_1 + 2*a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (4*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(g*l1*m2*(2*Ic2*cos(a3_1) + lc2^2*m2*cos(a3_1) - lc2^2*m2*cos(a3_1 + 2*a3_2)) + 2*g*lc1*m1*cos(a3_1)*(Ic2 + lc2^2*m2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (4*g*l1^3*lc2^4*m2^4*cos(a3_2)*sin(a3_2)*sin(a3_1 + 2*a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(3,87) = (3*l1*lc2^2*m2^2*sin(a3_2)*(g*sin(a3_1 + a3_2) + a3_3^2*l1*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (lc2*m2*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (lc2*m2*(Ic2 + lc2^2*m2)*(a3_4^2*l1*cos(a3_2) - g*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (6*l1^3*lc2^3*m2^3*sin(a3_2)^3*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (3*l1*lc2^2*m2^2*cos(a3_2)*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (l1*lc2*m2*sin(a3_2)*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (12*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (6*l1^2*lc2^3*m2^3*cos(a3_2)^2*(Ic2 + lc2^2*m2)*(a3_4^2*l1*cos(a3_2) - g*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (6*l1^2*lc2^3*m2^3*sin(a3_2)^2*(Ic2 + lc2^2*m2)*(a3_4^2*l1*cos(a3_2) - g*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (6*l1^2*lc2^3*m2^3*cos(a3_2)^2*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (6*l1^2*lc2^3*m2^3*sin(a3_2)^2*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (12*l1^3*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^2*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (24*l1^5*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^3*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (48*l1^6*lc2^6*m2^6*cos(a3_2)^3*sin(a3_2)^3*(Ic2 + lc2^2*m2)*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^4 - (48*l1^6*lc2^6*m2^6*cos(a3_2)^3*sin(a3_2)^3*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^4 + (24*l1^4*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^2*(Ic2 + lc2^2*m2)*(a3_4^2*l1*cos(a3_2) - g*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (8*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2)*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (24*l1^4*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^2*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (24*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3*(Ic2 + lc2^2*m2)*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (24*l1^4*lc2^4*m2^4*cos(a3_2)^3*sin(a3_2)*(Ic2 + lc2^2*m2)*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (24*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (24*l1^4*lc2^4*m2^4*cos(a3_2)^3*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (6*l1^2*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2)*(a3_4^2*l1*sin(a3_2) - g*sin(a3_1 + a3_2) + 2*a3_3*a3_4*l1*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (6*l1^2*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(g*sin(a3_1 + a3_2) + a3_3^2*l1*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(3,88) = (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) - b1*lc2^2*m2 - Ic2*b1 + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) - b1*lc2^2*m2 - Ic2*b1 + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2 - (2*l1*lc2*m2*(Ic2*a3_3*sin(a3_2) + Ic2*a3_4*sin(a3_2) + a3_3*lc2^2*m2*sin(a3_2) + a3_4*lc2^2*m2*sin(a3_2) + 2*a3_3*l1*lc2*m2*sin(2*a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) + (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) - b1*lc2^2*m2 - Ic2*b1 + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^3 - (8*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(Ic2*a3_3*cos(a3_2) + Ic2*a3_4*cos(a3_2) + a3_3*lc2^2*m2*cos(a3_2) + a3_4*lc2^2*m2*cos(a3_2) + a3_3*l1*lc2*m2*(2*cos(a3_2)^2 - 1)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2;
  d3f(3,89) = (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic2*b2 + l1*(b2*lc2*m2*cos(a3_2) + 2*lc2*m2*sin(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2)) + b2*lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic2*b2 + l1*(b2*lc2*m2*cos(a3_2) + 2*lc2*m2*sin(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2)) + b2*lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2 - (l1*lc2*m2*(b2*cos(a3_2) + 2*Ic2*a3_3*sin(a3_2) + 2*Ic2*a3_4*sin(a3_2) + 2*a3_3*lc2^2*m2*sin(a3_2) + 2*a3_4*lc2^2*m2*sin(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(2*Ic2*a3_3*cos(a3_2) - b2*sin(a3_2) + 2*Ic2*a3_4*cos(a3_2) + 2*a3_3*lc2^2*m2*cos(a3_2) + 2*a3_4*lc2^2*m2*cos(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2 + (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic2*b2 + l1*(b2*lc2*m2*cos(a3_2) + 2*lc2*m2*sin(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2)) + b2*lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^3 + (2*l1^3*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(b2*lc2*m2*sin(a3_2) - 2*lc2*m2*cos(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2;
  d3f(3,90) = (l1*lc2*m2*cos(a3_2)*(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + 2*l1*lc2^3*m2^2*cos(a3_2) + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*cos(a3_2)^2 + 2*Ic2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (l1^2*lc2^2*m2^2*sin(a3_2)*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + 2*l1*lc2^3*m2^2*cos(a3_2) + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*cos(a3_2)^2 + 2*Ic2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(3,93) = (4*a3_3*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2 - (2*a3_4*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2)) - (2*a3_3*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic2 + lc2^2*m2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic2 + lc2^2*m2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (4*a3_3*l1^3*lc2^3*m2^3*sin(a3_2)^3*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*a3_3*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) + (4*a3_3*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*a3_4*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (12*a3_3*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic2 + lc2^2*m2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (16*a3_3*l1^5*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^3*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(3,94) = (l1*lc2*m2*(2*Ic2*cos(a3_2) + 2*lc2^2*m2*cos(a3_2) + 2*l1*lc2*m2*(2*cos(a3_2)^2 - 1)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2;
  d3f(3,95) = (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2)*(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*sin(a3_2)^2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2;
  d3f(3,99) = (4*l1^3*lc2^3*m2^3*sin(a3_2)^3*(a3_3 + a3_4)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (b2*l1*lc2*m2*cos(a3_2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) + (2*b2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2 - (2*b2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*b2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*b2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1*lc2*m2*sin(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) + (16*l1^5*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^3*(a3_3 + a3_4)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (12*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*b2*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(3,100) = (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2)*(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*sin(a3_2)^2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2;
  d3f(3,101) = (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2)*(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*sin(a3_2)^2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2;
  d3f(3,105) = (l1*lc2*m2*cos(a3_2)*(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + 2*l1*lc2^3*m2^2*cos(a3_2) + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*cos(a3_2)^2 + 2*Ic2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (l1^2*lc2^2*m2^2*sin(a3_2)*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + 2*l1*lc2^3*m2^2*cos(a3_2) + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*cos(a3_2)^2 + 2*Ic2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(3,123) = (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic2 + lc2^2*m2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*a3_4*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*a3_3*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (6*a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2)) - (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic2 + lc2^2*m2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (4*a3_3*l1^3*lc2^3*m2^3*sin(a3_2)^3*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*a3_3*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*a3_4*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (12*a3_3*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic2 + lc2^2*m2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (16*a3_3*l1^5*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^3*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(3,124) = (2*l1*lc2*m2*(Ic2*cos(a3_2) + lc2^2*m2*cos(a3_2) + l1*lc2*m2*(2*cos(a3_2)^2 - 1)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2;
  d3f(3,125) = (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2)*(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*sin(a3_2)^2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2;
  d3f(3,129) = (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*l1^2*lc2^2*m2^2*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(3,135) = (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2)*(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*sin(a3_2)^2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(3,159) = (4*l1^3*lc2^3*m2^3*sin(a3_2)^3*(a3_3 + a3_4)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (b2*l1*lc2*m2*cos(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*b2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*b2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (4*b2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1*lc2*m2*sin(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) + (16*l1^5*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^3*(a3_3 + a3_4)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (12*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*b2*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(3,160) = (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2)*(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*sin(a3_2)^2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2;
  d3f(3,161) = (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2)*(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*sin(a3_2)^2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2;
  d3f(3,165) = (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2)*(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*sin(a3_2)^2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(3,171) = (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2)*(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*sin(a3_2)^2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(3,195) = (l1*lc2*m2*cos(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(4,44) = -(g*(l1*lc2^2*m2^2*cos(a3_1) - Ic1*lc2*m2*cos(a3_1 + a3_2) + Ic2*l1*m2*cos(a3_1) + Ic2*lc1*m1*cos(a3_1) - l1^2*lc2*m2^2*cos(a3_1 + a3_2) + lc1*lc2^2*m1*m2*cos(a3_1) - lc1^2*lc2*m1*m2*cos(a3_1 + a3_2)) + g*l1*lc2*m2*cos(a3_2)*(l1*m2*cos(a3_1) - lc2*m2*cos(a3_1 + a3_2) + lc1*m1*cos(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d3f(4,45) = (g*lc2*m2*cos(a3_1 + a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (g*lc2*m2*cos(a3_1 + a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*g*l1*lc2^2*m2^2*sin(a3_1 + a3_2)*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (g*l1*lc2*m2*sin(a3_2)*(m2*(lc2*sin(a3_1 + a3_2) + l1*sin(a3_1)) + lc1*m1*sin(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*g*l1^2*lc2^3*m2^3*sin(a3_1 + a3_2)*cos(a3_2)*sin(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*g*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(m2*(lc2*sin(a3_1 + a3_2) + l1*sin(a3_1)) + lc1*m1*sin(a3_1))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,50) = (g*lc2*m2*(Ic1*cos(a3_1 + a3_2) + (l1^2*m2*cos(a3_1 + a3_2))/2 + lc1^2*m1*cos(a3_1 + a3_2) + (l1^2*m2*cos(a3_1 - a3_2))/2 - (l1*lc1*m1*cos(a3_1 + a3_2))/2 + (l1*lc1*m1*cos(a3_1 - a3_2))/2 + l1*lc2*m2*cos(a3_1 + 2*a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(g*(l1*lc2^2*m2^2*sin(a3_1) - Ic1*lc2*m2*sin(a3_1 + a3_2) + Ic2*l1*m2*sin(a3_1) + Ic2*lc1*m1*sin(a3_1) - l1^2*lc2*m2^2*sin(a3_1 + a3_2) - lc1^2*lc2*m1*m2*sin(a3_1 + a3_2) + lc1*lc2^2*m1*m2*sin(a3_1)) + g*l1*lc2*m2*cos(a3_2)*(l1*m2*sin(a3_1) + lc1*m1*sin(a3_1) - lc2*m2*sin(a3_1 + a3_2))))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,51) = (g*lc2*m2*cos(a3_1 + a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (g*lc2*m2*cos(a3_1 + a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*g*l1*lc2^2*m2^2*sin(a3_1 + a3_2)*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (g*l1*lc2*m2*cos(a3_2)*(m2*(lc2*cos(a3_1 + a3_2) + l1*cos(a3_1)) + lc1*m1*cos(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*g*l1*lc2^2*m2^2*cos(a3_1 + a3_2)*cos(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*g*l1^2*lc2^2*m2^2*cos(a3_2)^2*(m2*(lc2*cos(a3_1 + a3_2) + l1*cos(a3_1)) + lc1*m1*cos(a3_1))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*g*l1^2*lc2^2*m2^2*sin(a3_2)^2*(m2*(lc2*cos(a3_1 + a3_2) + l1*cos(a3_1)) + lc1*m1*cos(a3_1))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (4*g*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(m2*(lc2*cos(a3_1 + a3_2) + l1*cos(a3_1)) + lc1*m1*cos(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*g*l1^3*lc2^4*m2^4*cos(a3_1 + a3_2)*cos(a3_2)*sin(a3_2)^2)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*g*l1^2*lc2^3*m2^3*cos(a3_1 + a3_2)*cos(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*g*l1^2*lc2^3*m2^3*cos(a3_1 + a3_2)*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*g*l1^2*lc2^3*m2^3*sin(a3_1 + a3_2)*cos(a3_2)*sin(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*g*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(m2*(lc2*cos(a3_1 + a3_2) + l1*cos(a3_1)) + lc1*m1*cos(a3_1))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (4*g*l1^2*lc2^3*m2^3*sin(a3_1 + a3_2)*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*g*l1^4*lc2^5*m2^5*cos(a3_1 + a3_2)*cos(a3_2)^2*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(4,80) = (g*lc2*m2*cos(a3_1 + a3_2)*(Ic1 + l1^2*m2 + lc1^2*m1) + g*l1*lc2^2*m2^2*cos(a3_1 + a3_2)*cos(a3_2) + g*l1*lc2*m2*sin(a3_2)*(l1*m2*sin(a3_1) + lc1*m1*sin(a3_1) - lc2*m2*sin(a3_1 + a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(g*(l1*lc2^2*m2^2*sin(a3_1) - Ic1*lc2*m2*sin(a3_1 + a3_2) + Ic2*l1*m2*sin(a3_1) + Ic2*lc1*m1*sin(a3_1) - l1^2*lc2*m2^2*sin(a3_1 + a3_2) - lc1^2*lc2*m1*m2*sin(a3_1 + a3_2) + lc1*lc2^2*m1*m2*sin(a3_1)) + g*l1*lc2*m2*cos(a3_2)*(l1*m2*sin(a3_1) + lc1*m1*sin(a3_1) - lc2*m2*sin(a3_1 + a3_2))))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,81) = (g*lc2*m2*cos(a3_1 + a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (g*lc2*m2*cos(a3_1 + a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*g*l1*lc2^2*m2^2*sin(a3_1 + a3_2)*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (g*l1*lc2*m2*cos(a3_2)*(m2*(lc2*cos(a3_1 + a3_2) + l1*cos(a3_1)) + lc1*m1*cos(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*g*l1*lc2^2*m2^2*cos(a3_1 + a3_2)*cos(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*g*l1^2*lc2^2*m2^2*cos(a3_2)^2*(m2*(lc2*cos(a3_1 + a3_2) + l1*cos(a3_1)) + lc1*m1*cos(a3_1))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*g*l1^2*lc2^2*m2^2*sin(a3_2)^2*(m2*(lc2*cos(a3_1 + a3_2) + l1*cos(a3_1)) + lc1*m1*cos(a3_1))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (4*g*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(m2*(lc2*cos(a3_1 + a3_2) + l1*cos(a3_1)) + lc1*m1*cos(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*g*l1^3*lc2^4*m2^4*cos(a3_1 + a3_2)*cos(a3_2)*sin(a3_2)^2)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*g*l1^2*lc2^3*m2^3*cos(a3_1 + a3_2)*cos(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*g*l1^2*lc2^3*m2^3*cos(a3_1 + a3_2)*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*g*l1^2*lc2^3*m2^3*sin(a3_1 + a3_2)*cos(a3_2)*sin(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*g*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(m2*(lc2*cos(a3_1 + a3_2) + l1*cos(a3_1)) + lc1*m1*cos(a3_1))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (4*g*l1^2*lc2^3*m2^3*sin(a3_1 + a3_2)*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*g*l1^4*lc2^5*m2^5*cos(a3_1 + a3_2)*cos(a3_2)^2*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(4,86) = (g*lc2*m2*(Ic1*cos(a3_1 + a3_2) + (l1^2*m2*cos(a3_1 + a3_2))/2 + lc1^2*m1*cos(a3_1 + a3_2) - (l1^2*m2*cos(a3_1 - a3_2))/2 - (l1*lc1*m1*cos(a3_1 + a3_2))/2 - (l1*lc1*m1*cos(a3_1 - a3_2))/2 + 2*l1*lc2*m2*cos(a3_1 + 2*a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(g*(l1*lc2^2*m2^2*cos(a3_1) - Ic1*lc2*m2*cos(a3_1 + a3_2) + Ic2*l1*m2*cos(a3_1) + Ic2*lc1*m1*cos(a3_1) - l1^2*lc2*m2^2*cos(a3_1 + a3_2) + lc1*lc2^2*m1*m2*cos(a3_1) - lc1^2*lc2*m1*m2*cos(a3_1 + a3_2)) + g*l1*lc2*m2*cos(a3_2)*(l1*m2*cos(a3_1) - lc2*m2*cos(a3_1 + a3_2) + lc1*m1*cos(a3_1))))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(g*(l1*lc2^2*m2^2*cos(a3_1) - Ic1*lc2*m2*cos(a3_1 + a3_2) + Ic2*l1*m2*cos(a3_1) + Ic2*lc1*m1*cos(a3_1) - l1^2*lc2*m2^2*cos(a3_1 + a3_2) + lc1*lc2^2*m1*m2*cos(a3_1) - lc1^2*lc2*m1*m2*cos(a3_1 + a3_2)) + g*l1*lc2*m2*cos(a3_2)*(l1*m2*cos(a3_1) - lc2*m2*cos(a3_1 + a3_2) + lc1*m1*cos(a3_1))))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(g*(l1*lc2^2*m2^2*cos(a3_1) - Ic1*lc2*m2*cos(a3_1 + a3_2) + Ic2*l1*m2*cos(a3_1) + Ic2*lc1*m1*cos(a3_1) - l1^2*lc2*m2^2*cos(a3_1 + a3_2) + lc1*lc2^2*m1*m2*cos(a3_1) - lc1^2*lc2*m1*m2*cos(a3_1 + a3_2)) + g*l1*lc2*m2*cos(a3_2)*(l1*m2*cos(a3_1) - lc2*m2*cos(a3_1 + a3_2) + lc1*m1*cos(a3_1))))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(g*lc2*m2*sin(a3_1 + a3_2)*(Ic1 + l1^2*m2 + lc1^2*m1) + g*l1*lc2^2*m2^2*sin(a3_1 + a3_2)*cos(a3_2) - g*l1*lc2*m2*sin(a3_2)*(l1*m2*cos(a3_1) - lc2*m2*cos(a3_1 + a3_2) + lc1*m1*cos(a3_1))))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*g*l1^2*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(Ic1*sin(a3_1 + a3_2) + (l1^2*m2*sin(a3_1 + a3_2))/2 + lc1^2*m1*sin(a3_1 + a3_2) + (l1^2*m2*sin(a3_1 - a3_2))/2 - (l1*lc1*m1*sin(a3_1 + a3_2))/2 + (l1*lc1*m1*sin(a3_1 - a3_2))/2 + l1*lc2*m2*sin(a3_1 + 2*a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,87) = (lc2*m2*(a3_4^2*l1*cos(a3_2) - g*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*cos(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (lc2*m2*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (6*l1*lc2^2*m2^2*sin(a3_2)*(g*sin(a3_1 + a3_2) + a3_3^2*l1*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (3*l1*lc2^2*m2^2*cos(a3_2)*(a3_4^2*l1*cos(a3_2) - g*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (l1*lc2*m2*sin(a3_2)*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (12*l1^3*lc2^3*m2^3*sin(a3_2)^3*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (3*l1*lc2^2*m2^2*sin(a3_2)*(a3_4^2*l1*sin(a3_2) - g*sin(a3_1 + a3_2) + 2*a3_3*a3_4*l1*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (6*l1^3*lc2^3*m2^3*sin(a3_2)^3*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (6*l1*lc2^2*m2^2*cos(a3_2)*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*l1*lc2*m2*sin(a3_2)*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (24*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (24*l1^3*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^2*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (48*l1^5*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^3*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (12*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (6*l1^2*lc2^3*m2^3*cos(a3_2)^2*(a3_4^2*l1*cos(a3_2) - g*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*cos(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (6*l1^2*lc2^3*m2^3*sin(a3_2)^2*(a3_4^2*l1*cos(a3_2) - g*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*cos(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (6*l1^2*lc2^3*m2^3*cos(a3_2)^2*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (12*l1^3*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^2*(a3_4^2*l1*cos(a3_2) - g*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (6*l1^2*lc2^3*m2^3*sin(a3_2)^2*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (24*l1^5*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^3*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (8*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (24*l1^4*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^2*(g*cos(a3_1 + a3_2) + a3_3^2*l1*cos(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (24*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (24*l1^4*lc2^4*m2^4*cos(a3_2)^3*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (6*l1^2*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(a3_4^2*l1*sin(a3_2) - g*sin(a3_1 + a3_2) + 2*a3_3*a3_4*l1*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (24*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (24*l1^4*lc2^4*m2^4*cos(a3_2)^3*sin(a3_2)*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (6*l1^2*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(g*sin(a3_1 + a3_2) + a3_3^2*l1*sin(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (48*l1^6*lc2^6*m2^6*cos(a3_2)^3*sin(a3_2)^3*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^4 + (48*l1^6*lc2^6*m2^6*cos(a3_2)^3*sin(a3_2)^3*(a3_4*b2 - a4_1 + g*lc2*m2*sin(a3_1 + a3_2) + a3_3^2*l1*lc2*m2*sin(a3_2))*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^4 - (24*l1^4*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^2*(a3_4^2*l1*cos(a3_2) - g*cos(a3_1 + a3_2) + 2*a3_3*a3_4*l1*cos(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (8*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(a3_3*b1 + g*lc2*m2*sin(a3_1 + a3_2) + g*l1*m2*sin(a3_1) + g*lc1*m1*sin(a3_1) - a3_4^2*l1*lc2*m2*sin(a3_2) - 2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,88) = (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (l1*lc2*m2*cos(a3_2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) + (2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*a3_3*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2 - (4*a3_3*l1^3*lc2^3*m2^3*sin(a3_2)^3*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*a3_4*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2 + (4*a3_3*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*a3_4*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*a3_3*l1*lc2*m2*sin(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (8*a3_3*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) + (2*a3_4*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (8*a3_3*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (12*a3_3*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (16*a3_3*l1^5*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^3*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (8*a3_4*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,89) = (2*l1*lc2*m2*(b2*cos(a3_2) + Ic2*a3_3*sin(a3_2) + Ic2*a3_4*sin(a3_2) + a3_3*lc2^2*m2*sin(a3_2) + a3_4*lc2^2*m2*sin(a3_2) + 2*a3_3*l1*lc2*m2*sin(2*a3_2) + 2*a3_4*l1*lc2*m2*sin(2*a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic1*b2 + Ic2*b2 + b2*l1^2*m2 + b2*lc1^2*m1 + b2*lc2^2*m2 + a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) + a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*b2*l1*lc2*m2*cos(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic1*b2 + Ic2*b2 + b2*l1^2*m2 + b2*lc1^2*m1 + b2*lc2^2*m2 + a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) + a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*b2*l1*lc2*m2*cos(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(Ic2*a3_3*cos(a3_2) - b2*sin(a3_2) + Ic2*a3_4*cos(a3_2) + a3_3*lc2^2*m2*cos(a3_2) + a3_4*lc2^2*m2*cos(a3_2) + a3_3*l1*lc2*m2*(2*cos(a3_2)^2 - 1) + a3_4*l1*lc2*m2*(2*cos(a3_2)^2 - 1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic1*b2 + Ic2*b2 + b2*l1^2*m2 + b2*lc1^2*m1 + b2*lc2^2*m2 + a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) + a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*b2*l1*lc2*m2*cos(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(4,90) = (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic1 + l1^2*m2 + lc1^2*m1 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(Ic1 + l1^2*m2 + lc1^2*m1 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(Ic1 + l1^2*m2 + lc1^2*m1 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(4,93) = (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (l1*lc2*m2*cos(a3_2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) + (2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*a3_3*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2 - (4*a3_3*l1^3*lc2^3*m2^3*sin(a3_2)^3*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*a3_4*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2 + (4*a3_3*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*a3_4*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*a3_3*l1*lc2*m2*sin(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (8*a3_3*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) + (2*a3_4*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (8*a3_3*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (12*a3_3*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (16*a3_3*l1^5*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^3*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (8*a3_4*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,94) = (4*l1^2*lc2^2*m2^2*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1*lc2*m2*cos(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,95) = (2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1*lc2*m2*(2*Ic2*cos(a3_2) + 2*lc2^2*m2*cos(a3_2) + 2*l1*lc2*m2*(2*cos(a3_2)^2 - 1)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 - l1^2*lc2^2*m2^2*(2*cos(a3_2)^2 - 1) + 2*lc1^2*lc2^2*m1*m2);
  d3f(4,99) = (2*b2*l1*lc2*m2*cos(a3_2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) + (2*l1*lc2*m2*sin(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (4*b2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2 + (2*b2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*b2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(a3_3 + a3_4))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (4*l1^3*lc2^3*m2^3*sin(a3_2)^3*(a3_3 + a3_4)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (4*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(a3_3 + a3_4))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (4*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3*(a3_3 + a3_4))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*b2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3*(a3_3 + a3_4))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2)^2 + (12*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*b2*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (16*l1^5*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^3*(a3_3 + a3_4)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(4,100) = (2*l1^2*lc2^2*m2^2*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,101) = (2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1*lc2*m2*(2*Ic2*cos(a3_2) + 2*lc2^2*m2*cos(a3_2) + 2*l1*lc2*m2*(2*cos(a3_2)^2 - 1)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 - l1^2*lc2^2*m2^2*(2*cos(a3_2)^2 - 1) + 2*lc1^2*lc2^2*m1*m2);
  d3f(4,105) = (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic1 + l1^2*m2 + lc1^2*m1 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(Ic1 + l1^2*m2 + lc1^2*m1 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(Ic1 + l1^2*m2 + lc1^2*m1 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(4,123) = (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (l1*lc2*m2*cos(a3_2)*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*a3_3*l1^3*lc2^3*m2^3*sin(a3_2)^3*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*a3_4*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (12*a3_3*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*a3_4*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*a3_3*l1*lc2*m2*sin(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (16*a3_3*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (12*a3_3*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(b1 - 2*a3_4*l1*lc2*m2*sin(a3_2))*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (16*a3_3*l1^5*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^3*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (8*a3_4*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,124) = (4*l1^2*lc2^2*m2^2*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1*lc2*m2*cos(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,125) = (2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1*lc2*m2*(Ic2*cos(a3_2) + lc2^2*m2*cos(a3_2) + l1*lc2*m2*(2*cos(a3_2)^2 - 1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d3f(4,129) = (4*l1^2*lc2^2*m2^2*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1*lc2*m2*cos(a3_2)*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,135) = (2*l1^2*lc2^2*m2^2*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,159) = (2*b2*l1*lc2*m2*cos(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (6*l1^2*lc2^2*m2^2*sin(2*a3_2)*(a3_3 + a3_4))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2)) + (2*l1*lc2*m2*sin(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (2*b2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*b2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*l1^3*lc2^3*m2^3*sin(a3_2)^3*(a3_3 + a3_4)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*l1^4*lc2^4*m2^4*cos(a3_2)*sin(a3_2)^3*(a3_3 + a3_4))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*b2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (12*l1^3*lc2^3*m2^3*cos(a3_2)^2*sin(a3_2)*(a3_3 + a3_4)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*b2*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 - (16*l1^5*lc2^5*m2^5*cos(a3_2)^2*sin(a3_2)^3*(a3_3 + a3_4)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
  d3f(4,160) = (2*l1^2*lc2^2*m2^2*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,161) = (2*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1*lc2*m2*(Ic2*cos(a3_2) + lc2^2*m2*cos(a3_2) + l1*lc2*m2*(2*cos(a3_2)^2 - 1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d3f(4,165) = (2*l1^2*lc2^2*m2^2*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,171) = (2*l1^2*lc2^2*m2^2*sin(a3_2)^2)/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2) - (2*l1*lc2*m2*cos(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) + (4*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d3f(4,195) = (8*l1^3*lc2^3*m2^3*cos(a3_2)*sin(a3_2)^2)/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1*lc2*m2*cos(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 + (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3;
else
  d3f=[];
end  % if (order>=3)


 % NOTEST
