pods_find_pkg_config(gurobi)

if(gurobi_FOUND)

  add_library_with_exports(LIB_NAME drakeQP SOURCE_FILES qp.cc)
  pods_use_pkg_config_packages(drakeQP gurobi)

  pods_install_libraries(drakeQP)
  drake_install_headers(fast_qp.h gurobi_qp.h)
  pods_install_pkg_config_file(drake-qp
    LIBS -ldrakeQP
    REQUIRES gurobi
    VERSION 0.0.1)
endif()

set(optimization_files)
list(APPEND optimization_files
  mathematical_program.cc moby_lcp_solver.cc
  system_identification.cpp linear_system_solver.cc
  equality_constrained_qp_solver.cc)
pods_find_pkg_config(ipopt)
if (ipopt_FOUND)
 list(APPEND optimization_files ipopt_solver.cc)
else()
  list(APPEND optimization_files no_ipopt.cc)
endif(ipopt_FOUND)
pods_find_pkg_config(nlopt)
if(nlopt_FOUND)
  list(APPEND optimization_files nlopt_solver.cc)
else()
  list(APPEND optimization_files no_nlopt.cc)
endif()
pods_find_pkg_config(dreal)
if(dreal_FOUND)
  list(APPEND optimization_files dreal_solver.cc)
else()
  list(APPEND optimization_files no_dreal.cc)
endif()
pods_find_pkg_config(snopt_c)
if(snopt_c_FOUND)
  list(APPEND optimization_files snopt_solver.cc)
else()
  list(APPEND optimization_files no_snopt.cc)
endif()
pods_find_pkg_config(mosek)
if(mosek_FOUND)
  list(APPEND optimization_files mosek_solver.cc mosek_wrapper.cc)
else()
  list(APPEND optimization_files no_mosek.cc)
endif()
if(gurobi_FOUND)
  list(APPEND optimization_files gurobi_solver.cc)
else()
  list(APPEND optimization_files no_gurobi.cc)
endif()


add_library_with_exports(LIB_NAME drakeOptimization SOURCE_FILES ${optimization_files})
target_link_libraries(drakeOptimization drakeCommon)
drake_install_headers(
  constraint.h
  Function.h
  mathematical_program.h
  decision_variable.h
  solution_result.h
  system_identification.h
  )
pods_install_libraries(drakeOptimization)
pods_install_pkg_config_file(drake-optimization
  LIBS -ldrakeOptimization
  REQUIRES
  VERSION 0.0.1)

if(ipopt_FOUND)
  pods_use_pkg_config_packages(drakeOptimization ipopt)
  # IPOPT builds its own version of BLAS during compilation, and links
  # it into the output library.  On (at least some) ELF systems, you
  # wind up with a symbol name collision between IPOPT's BLAS and
  # other BLAS implementations in other dynamic libraries (MATLAB, I'm
  # looking in your direction...)  Since the actual implementations
  # are incompatible, this does not end well.  Linking with the
  # -Bsymbolic flags causes the internal references to these symbols
  # inside libdrakeOptimization to be handled at compile time, and
  # prevents the dynamic linker from hijacking IPOPT's calls into
  # BLAS.
  #
  # This should probably be a test for the GNU linker instead of a platform.
  if (NOT (APPLE OR WIN32))
    set(CMAKE_SHARED_LINKER_FLAGS
      "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-Bsymbolic -Wl,-Bsymbolic-functions")
  endif()
endif()
if(nlopt_FOUND)
  pods_use_pkg_config_packages(drakeOptimization nlopt)
endif()
if(dreal_FOUND)
  pods_use_pkg_config_packages(drakeOptimization dreal)
endif()
if(snopt_c_FOUND)
  pods_use_pkg_config_packages(drakeOptimization snopt_c)
endif()
if(gurobi_FOUND)
  pods_use_pkg_config_packages(drakeOptimization gurobi)
endif()

if(mosek_FOUND)
  pods_use_pkg_config_packages(drakeOptimization mosek)
endif()

add_subdirectory(qpSpline)
add_subdirectory(test)
add_subdirectory(trajectoryOptimization)
