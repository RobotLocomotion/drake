# -*- python -*-

load(
    "//tools:drake.bzl",
    "drake_cc_binary",
    "drake_cc_googletest",
    "drake_cc_library",
)
load(
    "@drake//tools/skylark:drake_py.bzl",
    "drake_py_binary",
    "drake_py_test",
)
load("@drake//tools/install:install.bzl", "install")
load("//tools/lint:lint.bzl", "add_lint_tests")

package(default_visibility = ["//visibility:public"])

# This should encompass every non-testonly cc_library in this package,
# except for items that should only ever be linked into main() programs.
drake_cc_library(
    name = "common",
    srcs = [],
    deps = [
        ":autodiff",
        ":autodiffxd_make_coherent",
        ":cond",
        ":copyable_unique_ptr",
        ":double",
        ":drake_path",
        ":dummy_value",
        ":essential",
        ":extract_double",
        ":find_resource",
        ":hash",
        ":is_approx_equal_abstol",
        ":is_cloneable",
        ":nice_type_name",
        ":number_traits",
        ":polynomial",
        ":reinit_after_move",
        ":scoped_singleton",
        ":sorted_vectors_have_intersection",
        ":symbolic",
        ":symbolic_decompose",
        ":type_safe_index",
        ":unused",
    ],
    # Intentionally excluded items:
    # - text_logging_gflags
)

# A library of things that EVERYONE should want and MUST EAT.
# Be appropriately hesitant when adding new things here.
drake_cc_library(
    name = "essential",
    srcs = [
        "drake_assert_and_throw.cc",
        "text_logging.cc",
    ],
    hdrs = [
        "constants.h",
        "drake_assert.h",
        "drake_assertion_error.h",
        "drake_copyable.h",
        "drake_deprecated.h",
        "drake_optional.h",
        "drake_throw.h",
        "eigen_stl_types.h",
        "eigen_types.h",
        "never_destroyed.h",
        "text_logging.h",
    ],
    deps = [
        "@eigen",
        "@spdlog",
        "@stx",
    ],
)

# Specific traits and operators that are relevant to all ScalarTypes.
drake_cc_library(
    name = "cond",
    srcs = ["cond.cc"],
    hdrs = ["cond.h"],
    deps = [
        ":double",
    ],
)

drake_cc_library(
    name = "dummy_value",
    hdrs = ["dummy_value.h"],
)

drake_cc_library(
    name = "number_traits",
    hdrs = ["number_traits.h"],
)

# Drake's specific ScalarType-providing libraries.
drake_cc_library(
    name = "double",
    srcs = ["double_overloads.cc"],
    hdrs = ["double_overloads.h"],
)

drake_cc_library(
    name = "autodiff",
    hdrs = [
        "autodiff.h",
        "autodiff_overloads.h",
        "autodiffxd.h",
        "eigen_autodiff_limits.h",
        "eigen_autodiff_types.h",
    ],
    deps = [
        ":cond",
        ":dummy_value",
        ":essential",
    ],
)

drake_cc_library(
    name = "extract_double",
    hdrs = ["extract_double.h"],
    deps = [
        ":essential",
        ":nice_type_name",
        ":number_traits",
    ],
)

drake_cc_library(
    name = "hash",
    hdrs = ["hash.h"],
)

drake_cc_library(
    name = "autodiffxd_make_coherent",
    hdrs = ["autodiffxd_make_coherent.h"],
    deps = [
        ":autodiff",
        ":symbolic",
    ],
)

drake_cc_library(
    name = "polynomial",
    srcs = ["polynomial.cc"],
    hdrs = [
        "polynomial.h",
        "trig_poly.h",
    ],
    deps = [
        ":autodiff",
        ":essential",
    ],
)

drake_cc_library(
    name = "symbolic",
    # We only expose `symbolic.h` to the users of symbolic target and hide the
    # rest of the header files by adding them in `srcs` section.
    srcs = [
        "symbolic.cc",
        "symbolic_environment.cc",
        "symbolic_environment.h",
        "symbolic_expression.cc",
        "symbolic_expression.h",
        "symbolic_expression_cell.cc",
        "symbolic_expression_cell.h",
        "symbolic_expression_visitor.h",
        "symbolic_formula.cc",
        "symbolic_formula.h",
        "symbolic_formula_cell.cc",
        "symbolic_formula_cell.h",
        "symbolic_formula_visitor.h",
        "symbolic_monomial.cc",
        "symbolic_monomial.h",
        "symbolic_monomial_util.cc",
        "symbolic_monomial_util.h",
        "symbolic_polynomial.cc",
        "symbolic_polynomial.h",
        "symbolic_variable.cc",
        "symbolic_variable.h",
        "symbolic_variables.cc",
        "symbolic_variables.h",
    ],
    hdrs = [
        "symbolic.h",
    ],
    deps = [
        ":cond",
        ":dummy_value",
        ":essential",
        ":hash",
        ":number_traits",
        ":polynomial",
        "//drake/math:matrix_util",
    ],
)

drake_cc_library(
    name = "symbolic_decompose",
    srcs = [
        "symbolic_decompose.cc",
    ],
    hdrs = [
        "symbolic_decompose.h",
    ],
    deps = [
        ":symbolic",
    ],
)

drake_cc_library(
    name = "default_scalars",
    hdrs = ["default_scalars.h"],
    deps = [
        ":autodiff",
        ":essential",
        ":symbolic",
    ],
)

# Miscellaneous utilities.

DRAKE_RESOURCE_SENTINEL = "//drake:.drake-find_resource-sentinel"

drake_cc_library(
    name = "find_resource",
    srcs = ["find_resource.cc"],
    hdrs = ["find_resource.h"],
    data = [
        DRAKE_RESOURCE_SENTINEL,
    ],
    deps = [
        ":essential",
        "@spruce",
    ],
)

drake_cc_library(
    name = "drake_path",
    srcs = ["drake_path.cc"],
    hdrs = ["drake_path.h"],
    data = [
        DRAKE_RESOURCE_SENTINEL,
    ],
    visibility = ["//tools/install/libdrake:__pkg__"],
    deps = [
        ":essential",
        ":find_resource",
        "@spruce",
    ],
)

drake_cc_library(
    name = "is_approx_equal_abstol",
    hdrs = ["is_approx_equal_abstol.h"],
    deps = [
        ":essential",
    ],
)

drake_cc_library(
    name = "nice_type_name",
    srcs = ["nice_type_name.cc"],
    hdrs = ["nice_type_name.h"],
    deps = [
        ":essential",
    ],
)

drake_cc_library(
    name = "is_cloneable",
    hdrs = ["is_cloneable.h"],
)

drake_cc_library(
    name = "copyable_unique_ptr",
    hdrs = ["copyable_unique_ptr.h"],
    deps = [":is_cloneable"],
)

drake_cc_library(
    name = "reinit_after_move",
    hdrs = ["reinit_after_move.h"],
)

drake_cc_library(
    name = "sorted_vectors_have_intersection",
    hdrs = ["sorted_vectors_have_intersection.h"],
    deps = [
        ":essential",
    ],
)

drake_cc_library(
    name = "text_logging_gflags",
    hdrs = ["text_logging_gflags.h"],
    # TODO(jwnimmer-tri) Ideally, gflags BUILD would do this for us.  Figure
    # out what's going on.  Definitely don't let "-pthread" get copy-pasta'd
    # throughout our code.
    linkopts = select({
        "//tools/cc_toolchain:linux": ["-pthread"],
        "//conditions:default": [],
    }),
    deps = [
        ":essential",
        "@com_github_gflags_gflags//:gflags",
    ],
)

drake_cc_library(
    name = "type_safe_index",
    hdrs = ["type_safe_index.h"],
    deps = [
        ":essential",
        ":nice_type_name",
    ],
)

drake_cc_library(
    name = "unused",
    hdrs = ["unused.h"],
    deps = [
        ":essential",
    ],
)

drake_cc_library(
    name = "scoped_singleton",
    hdrs = ["scoped_singleton.h"],
    deps = [
        ":essential",
    ],
)

drake_cc_binary(
    name = "resource_tool",
    srcs = ["resource_tool.cc"],
    deps = [
        ":essential",
        ":find_resource",
        ":text_logging_gflags",
    ],
)

# This should probably move to the test_utilities package, but developers
# expect to find it here, so we'll leave it alone for now.
drake_py_binary(
    name = "cpplint_wrapper",
    testonly = 1,
    srcs = ["test/cpplint_wrapper.py"],
    data = [
        "//:CPPLINT.cfg",
        "@styleguide//:cpplint",
    ],
    main = "test/cpplint_wrapper.py",
)

install(
    name = "install",
    targets = [":resource_tool"],
    # TODO(jwnimmer-tri) The install rule should offer more specific options
    # for putting programs into libexec and including the workspace and/or
    # package name in the installed path.  For now, we'll just specify it
    # manually.
    runtime_dest = "libexec/drake/drake/common",
    data_dest = "share/drake/drake",
    guess_data = "WORKSPACE",
    allowed_externals = [DRAKE_RESOURCE_SENTINEL],
)

# === test/ ===

drake_cc_googletest(
    name = "autodiffxd_test",
    # The following `autodiffxd_*_test.cc` files were in a single
    # `autodiffxd_test.cc`. We found that it takes more than 150 sec to build
    # this test. So we split it into multiple .cc files. We observed about
    # 8x speed-up.
    srcs = [
        "test/autodiffxd_abs2_test.cc",
        "test/autodiffxd_abs_test.cc",
        "test/autodiffxd_acos_test.cc",
        "test/autodiffxd_addition_test.cc",
        "test/autodiffxd_asin_test.cc",
        "test/autodiffxd_atan2_test.cc",
        "test/autodiffxd_cos_test.cc",
        "test/autodiffxd_cosh_test.cc",
        "test/autodiffxd_division_test.cc",
        "test/autodiffxd_exp_test.cc",
        "test/autodiffxd_log_test.cc",
        "test/autodiffxd_max_test.cc",
        "test/autodiffxd_min_test.cc",
        "test/autodiffxd_multiplication_test.cc",
        "test/autodiffxd_pow_test.cc",
        "test/autodiffxd_sin_test.cc",
        "test/autodiffxd_sinh_test.cc",
        "test/autodiffxd_sqrt_test.cc",
        "test/autodiffxd_subtraction_test.cc",
        "test/autodiffxd_tan_test.cc",
        "test/autodiffxd_tanh_test.cc",
        "test/autodiffxd_test.h",
    ],
    deps = [
        ":autodiff",
    ],
)

drake_cc_googletest(
    name = "autodiff_overloads_test",
    deps = [
        ":autodiff",
        ":essential",
        ":extract_double",
        "//drake/common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "reinit_after_move_test",
    deps = [
        ":reinit_after_move",
    ],
)

drake_cc_googletest(
    name = "cond_test",
    deps = [
        ":cond",
    ],
)

drake_cc_googletest(
    name = "double_overloads_test",
    deps = [
        ":cond",
        ":double",
        ":essential",
    ],
)

# Functional test of DRAKE_ASSERT at runtime.
drake_cc_googletest(
    name = "drake_assert_test",
    deps = [
        ":essential",
    ],
)

# Same, but with assertions forced enabled.
drake_cc_googletest(
    name = "drake_assert_test_enabled",
    srcs = ["test/drake_assert_test.cc"],
    copts = [
        "-DDRAKE_ENABLE_ASSERTS",
        "-UDRAKE_DISABLE_ASSERTS",
    ],
    deps = [
        ":essential",
    ],
)

# Same, but with assertions forced disabled.
drake_cc_googletest(
    name = "drake_assert_test_disabled",
    srcs = ["test/drake_assert_test.cc"],
    copts = [
        "-UDRAKE_ENABLE_ASSERTS",
        "-DDRAKE_DISABLE_ASSERTS",
    ],
    deps = [
        ":essential",
    ],
)

# Functional test of DRAKE_ASSERT at compile time.
drake_cc_googletest(
    name = "drake_assert_test_compile",
    deps = [
        ":essential",
        ":unused",
    ],
)

# Needed by :drake_assert_test_compile_variants.
genrule(
    name = "capture_cc",
    outs = ["capture_cc.env"],
    cmd = "echo \"BAZEL_CC=$(CC)\" > '$@'",
    visibility = ["//visibility:private"],
)

# Functional test that mistyped DRAKE_ASSERTs will failt to compile.
sh_test(
    name = "drake_assert_test_compile_variants",
    srcs = ["test/drake_assert_test_compile_variants.sh"],
    args = [
        "$(location :capture_cc.env)",
        "$(location :test/drake_assert_test_compile.cc)",
    ],
    data = [
        "capture_cc.env",
        "drake_assert.h",
        "test/drake_assert_test_compile.cc",
        "unused.h",
        "//third_party:com_github_bazelbuild_bazel/tools/cpp/osx_cc_wrapper.sh",  # noqa
        "//tools/cc_toolchain:osx_cc_wrapper.sh",
    ],
)

drake_cc_googletest(
    name = "is_cloneable_test",
    deps = [
        ":is_cloneable",
    ],
)

drake_cc_googletest(
    name = "copyable_unique_ptr_test",
    deps = [
        ":copyable_unique_ptr",
        "//drake/common/test_utilities:is_dynamic_castable",
    ],
)

drake_cc_googletest(
    name = "drake_deprecated_test",
    # Remove spurious warnings from the default build output.
    copts = ["-Wno-deprecated-declarations"],
    deps = [
        ":essential",
    ],
)

drake_cc_googletest(
    name = "drake_optional_test",
    deps = [
        ":essential",
    ],
)

drake_cc_googletest(
    name = "drake_throw_test",
    deps = [
        ":essential",
    ],
)

drake_cc_googletest(
    name = "dummy_value_test",
    deps = [
        ":dummy_value",
    ],
)

drake_cc_googletest(
    name = "eigen_stl_types_test",
    deps = [
        ":essential",
    ],
)

drake_cc_googletest(
    name = "eigen_types_test",
    deps = [
        ":essential",
        ":nice_type_name",
    ],
)

drake_cc_googletest(
    name = "extract_double_test",
    deps = [
        ":essential",
        ":extract_double",
    ],
)

drake_cc_googletest(
    name = "find_resource_test",
    data = [
        "test/find_resource_test_data.txt",
    ],
    deps = [
        ":find_resource",
    ],
)

drake_cc_googletest(
    name = "is_approx_equal_abstol_test",
    deps = [
        ":essential",
        ":is_approx_equal_abstol",
    ],
)

drake_cc_googletest(
    name = "autodiffxd_make_coherent_test",
    deps = [
        ":autodiffxd_make_coherent",
        "//drake/common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "symbolic_monomial_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "never_destroyed_test",
    deps = [
        ":essential",
    ],
)

drake_cc_googletest(
    name = "nice_type_name_test",
    deps = [
        ":autodiff",
        ":essential",
        ":nice_type_name",
    ],
)

drake_cc_googletest(
    name = "polynomial_test",
    deps = [
        ":essential",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/common/test_utilities:random_polynomial_matrix",
    ],
)

drake_cc_googletest(
    name = "sorted_vectors_have_intersection_test",
    deps = [
        ":essential",
        ":sorted_vectors_have_intersection",
    ],
)

drake_cc_googletest(
    name = "symbolic_decompose_test",
    deps = [
        ":essential",
        ":symbolic",
        ":symbolic_decompose",
    ],
)

drake_cc_googletest(
    name = "symbolic_environment_test",
    deps = [
        ":essential",
        ":symbolic",
    ],
)

drake_cc_googletest(
    name = "symbolic_expansion_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "symbolic_expression_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/common/test_utilities:is_memcpy_movable",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "symbolic_expression_differentiation_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "symbolic_expression_jacobian_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "symbolic_expression_array_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "symbolic_expression_matrix_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "symbolic_expression_transform_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/math:geometric_transform",
    ],
)

drake_cc_googletest(
    name = "symbolic_mixing_scalar_types_test",
    deps = [
        ":essential",
        ":symbolic",
    ],
)

drake_cc_googletest(
    name = "symbolic_polynomial_test",
    # Test size increased to not timeout when run with Valgrind.
    size = "medium",
    deps = [
        ":symbolic",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "symbolic_polynomial_matrix_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "symbolic_substitution_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "symbolic_variable_overloading_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "symbolic_formula_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/common/test_utilities:is_memcpy_movable",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "symbolic_formula_visitor_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "symbolic_variable_test",
    deps = [
        ":essential",
        ":symbolic",
        "//drake/common/test_utilities:is_memcpy_movable",
        "//drake/common/test_utilities:symbolic_test_util",
    ],
)

drake_cc_googletest(
    name = "symbolic_variables_test",
    deps = [
        ":essential",
        ":symbolic",
    ],
)

drake_cc_googletest(
    name = "text_logging_test",
    deps = [
        ":essential",
    ],
)

drake_cc_googletest(
    name = "trig_poly_test",
    deps = [
        ":essential",
        ":polynomial",
    ],
)

drake_cc_googletest(
    name = "type_safe_index_test",
    deps = [
        ":type_safe_index",
        ":unused",
    ],
)

drake_cc_googletest(
    name = "eigen_autodiff_types_test",
    deps = [":autodiff"],
)

drake_cc_googletest(
    name = "scoped_singleton_test",
    deps = [
        ":scoped_singleton",
    ],
)

drake_cc_googletest(
    name = "drake_cc_googletest_main_test",
    args = ["--magic_number=1.0"],
)

# Run test/drake_cc_googletest_main_test.py, a unit test written in Python that
# covers the test/drake_cc_googletest_main.cc software.
drake_py_test(
    name = "drake_cc_googletest_main_test_py",
    srcs = ["test/drake_cc_googletest_main_test.py"],
    args = ["$(location :drake_cc_googletest_main_test)"],
    data = [":drake_cc_googletest_main_test"],
    main = "test/drake_cc_googletest_main_test.py",
)

drake_py_test(
    name = "cpplint_wrapper_test",
    srcs = ["test/cpplint_wrapper_test.py"],
    args = [
        "$(location :cpplint_wrapper)",
        "$(location :eigen_types.h)",
    ],
    data = [
        ":cpplint_wrapper",
        ":eigen_types.h",
        "@styleguide//:cpplint/cpplint_test_header.h",
    ],
)

drake_py_test(
    name = "resource_tool_test",
    srcs = ["test/resource_tool_test.py"],
    args = [
        "$(location :resource_tool)",
    ],
    data = [
        "test/resource_tool_test_data.txt",
        ":resource_tool",
        "//drake/examples/pendulum:models",
    ],
)

drake_py_test(
    name = "resource_tool_installed_test",
    srcs = ["test/resource_tool_installed_test.py"],
    args = [
        "$(location :install)",
    ],
    data = [
        ":install",
    ],
)

# TODO(jwnimmer-tri) These tests are currently missing...
# - drake_assert_test in fancy variants
# - drake_assert_test_compile in fancy variants
# - text_logging_test in fancy variants
# - drake_deprecated_test in fancy variants
# - cpplint_wrapper_test.py

add_lint_tests()
