#
# Drake common library
#

# Generated code.
set(drake_path_cc ${PROJECT_BINARY_DIR}/generated/drake/common/test/drake_path.cc)
set(THIS_FILE_IS_USED_BY_CMAKE_TO_CREATE_GENERATED_CODE
    "This file is auto-generated by CMAKE.  Do not edit.")
configure_file(drake_path.cc.in ${drake_path_cc})

# List all source files used to build libdrakeCommon.
set(sources
  drake_assert.cc
  ${drake_path_cc}
  drake_throw.cc
  functional_form.cc
  nice_type_name.cc
  polynomial.cc
  symbolic_environment.cc
  symbolic_expression.cc
  symbolic_formula.cc
  symbolic_variable.cc
  symbolic_variables.cc
  text_logging.cc
  )

# List headers that should be installed with Drake so that they
# are available elsewhere via #include "drake/common/xxx.h".
set(installed_headers
  constants.h
  drake_assert.h
  drake_deprecated.h
  drake_export.h
  drake_gcc48.h
  drake_path.h
  drake_throw.h
  eigen_autodiff_types.h
  eigen_matrix_compare.h
  eigen_stl_types.h
  eigen_types.h
  functional_form.h
  nice_type_name.h
  number_traits.h
  polynomial.h
  sorted_vectors_have_intersection.h
  symbolic_environment.h
  symbolic_expression.h
  symbolic_formula.h
  symbolic_variable.h
  symbolic_variables.h
  text_logging.h
  text_logging_gflags.h
  trig_poly.h
  )

# List headers that are needed by code here but should not
# be exposed anywhere else.
set(private_headers
  )

# Create the library target and note its dependencies.
add_library_with_exports(LIB_NAME drakeCommon
  SOURCE_FILES ${sources} ${installed_headers} ${private_headers})
target_link_libraries(drakeCommon gflags Threads::Threads)

if(spdlog_FOUND)
  target_compile_definitions(drakeCommon PUBLIC HAVE_SPDLOG)
  target_link_libraries(drakeCommon spdlog::spdlog)
endif()

# Install all externally-visible headers.
drake_install_headers(${installed_headers})

# Install the library and note Drake's dependency on it.
pods_install_libraries(drakeCommon)
pods_install_pkg_config_file(drake-common
  LIBS -ldrakeCommon
  REQUIRES
  VERSION 0.0.1)

if(BUILD_TESTING)
  add_subdirectory(test)
endif()
