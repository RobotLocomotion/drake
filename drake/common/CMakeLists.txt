#
# Drake common library
#

# Generated code.
set(cmake_project_source_dir_cc ${PROJECT_BINARY_DIR}/generated/drake/common/cmake_project_source_dir.cc)
set(THIS_FILE_IS_USED_BY_CMAKE_TO_CREATE_GENERATED_CODE
    "This file is auto-generated by CMAKE.  Do not edit.")
configure_file(cmake_project_source_dir.cc.in ${cmake_project_source_dir_cc})

# List all source files used to build libdrakeCommon.
set(sources
  ${cmake_project_source_dir_cc}
  double_overloads.cc
  drake_assert_and_throw.cc
  drake_path_cmake.cc
  find_resource.cc
  nice_type_name.cc
  polynomial.cc
  symbolic_environment.cc
  symbolic_expression.cc
  symbolic_expression_cell.cc
  symbolic_expression_cell.h
  symbolic_decompose.cc
  symbolic_formula.cc
  symbolic_formula_cell.cc
  symbolic_formula_cell.h
  symbolic_monomial.cc
  symbolic_monomial_util.cc
  symbolic_polynomial.cc
  symbolic_variable.cc
  symbolic_variables.cc
  text_logging.cc
  )

# List headers that should be installed with Drake so that they
# are available elsewhere via #include "drake/common/xxx.h".
set(installed_headers
  autodiff_overloads.h
  cond.h
  constants.h
  copyable_unique_ptr.h
  double_overloads.h
  drake_assert.h
  drake_assertion_error.h
  drake_compat.h
  drake_copyable.h
  drake_deprecated.h
  drake_optional.h
  drake_path.h
  drake_throw.h
  dummy_value.h
  eigen_autodiff_limits.h
  eigen_autodiff_types.h
  eigen_matrix_compare.h
  eigen_stl_types.h
  eigen_types.h
  extract_double.h
  find_resource.h
  hash.h
  is_approx_equal_abstol.h
  is_cloneable.h
  never_destroyed.h
  nice_type_name.h
  number_traits.h
  polynomial.h
  scoped_singleton.h
  sorted_vectors_have_intersection.h
  symbolic.h
  symbolic_decompose.h
  symbolic_environment.h
  symbolic_expression.h
  symbolic_expression_visitor.h
  symbolic_formula.h
  symbolic_formula_visitor.h
  symbolic_monomial.h
  symbolic_monomial_util.h
  symbolic_polynomial.h
  symbolic_variable.h
  symbolic_variables.h
  text_logging.h
  text_logging_gflags.h
  trig_poly.h
  type_safe_index.h
  unused.h
  )

# List headers that are needed by code here but should not
# be exposed anywhere else.
set(private_headers
  cmake_project_source_dir.h
  )

# Create the library target and note its dependencies.
add_library_with_exports(LIB_NAME drakeCommon
  SOURCE_FILES ${sources} ${installed_headers} ${private_headers})
target_include_directories(drakeCommon PUBLIC)
target_link_libraries(drakeCommon
  Eigen3::Eigen
  fmt
  gflags
  spruce
  stx
  Threads::Threads)

set(drakeCommon_CFLAGS)
set(drakeCommon_REQUIRES)

if(spdlog_FOUND)
  target_compile_definitions(drakeCommon
    PUBLIC HAVE_SPDLOG
    SPDLOG_FMT_EXTERNAL)
  target_link_libraries(drakeCommon spdlog::spdlog)
  set(drakeCommon_CFLAGS -DHAVE_SPDLOG -DSPDLOG_FMT_EXTERNAL)
  set(drakeCommon_REQUIRES spdlog)
endif()

# Install all externally-visible headers.
drake_install_headers(${installed_headers})

# Install the library and note Drake's dependency on it.
drake_install_libraries(drakeCommon)
drake_install_pkg_config_file(drake-common
  TARGET drakeCommon
  LIBS
    -ldrakeCommon
    -lgflags
    ${CMAKE_THREAD_LIBS_INIT}
  CFLAGS ${drakeCommon_CFLAGS}
  REQUIRES
    eigen3
    ${drakeCommon_REQUIRES})

add_executable(resource_tool resource_tool.cc)
target_link_libraries(resource_tool drakeCommon)

if(BUILD_TESTING)
  add_subdirectory(test)
endif()

add_subdirectory(proto)
add_subdirectory(trajectories)
