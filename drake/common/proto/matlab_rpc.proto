syntax = "proto2";

package drake.common;

/* A generic data structure to wrap the MATLAB Array type.  It is intended to
 * serve approximately the same purpose as mxArray in MATLAB mex.
 *  see http://www.mathworks.com/help/matlab/matlab_external/matlab-data.html
 */

message MatlabArray
{
  enum ArrayType {
    REMOTE_VARIABLE_REFERENCE = 0;
    DOUBLE = 1;
    CHAR = 2;
    LOGICAL = 3;
    INT = 4;
  }
  optional ArrayType type = 1;

  enum ShapeType {
    MATRIX = 0;
    VECTOR = 1;
    SCALAR = 2;
  }

  // Dimensions.
  optional int32 rows = 2;
  optional int32 cols = 3;
  // Information.
  optional ShapeType shape_type = 5;

  optional bytes data = 4;

  /* TODO: Consider adding support for the remainder of the mxArray type:
   *   - If numeric, whether the variable is real or complex
   *   - If sparse, its indices and nonzero maximum elements
   *   - If a structure or object, the number of fields and field names
   */
}


/* A thin protobuf wrapper to support asynchronous remote procedure calls (RPCs)
 * to a matlab client.  The interface is modeled on mexCallMATLAB
 *  (see http://www.mathworks.com/help/matlab/apiref/mexcallmatlab.html)
 * but with output arguments assigned in the remote client's workspace
 * due to the asynchronous nature of the protocol.
 */

message MatlabRPC {
  repeated int64 lhs = 1;  // unique id for variables held in the MATLAB
                           // client's workspace

  repeated MatlabArray rhs = 2;  // the input argument data

  // any input allowed by matlab's mexcallmatlab command
  // (http://www.mathworks.com/help/matlab/apiref/mexcallmatlab.html)
  // or any expression that resolves to a callable Python object (for Python).
  optional string function_name = 3;
}
