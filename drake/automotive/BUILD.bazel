# -*- python -*-

load(
    "//tools:drake.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_binary",
)
load(
    "@drake//tools/skylark:drake_java.bzl",
    "drake_java_binary",
)
load(
    "@drake//tools/skylark:drake_py.bzl",
    "drake_py_binary",
)
load(
    "@drake//tools/vector_gen:vector_gen.bzl",
    "drake_cc_vector_gen_library",
    "drake_cc_vector_gen_translator_library",
)
load("//tools/lint:lint.bzl", "add_lint_tests")

package(default_visibility = ["//visibility:public"])

# Keep this list in sync with the list of _AUTOMOTIVE_LCM_SRCS within
# ../lcmtypes/BUILD.bazel.  TODO(jwnimmer-tri) De-duplicate the two lists,
# likely by moving the automotive lcmtypes into their own package.
_LCM_ENABLED_NAMED_VECTORS = [
    "bicycle_car_state.named_vector",
    "driving_command.named_vector",
    "maliput_railcar_state.named_vector",
    "simple_car_state.named_vector",
    "trajectory_car_state.named_vector",
]

drake_cc_vector_gen_library(
    name = "generated_vectors",
    srcs = [
        "bicycle_car_parameters.named_vector",
        "idm_planner_parameters.named_vector",
        "maliput_railcar_params.named_vector",
        "mobil_planner_parameters.named_vector",
        "pure_pursuit_params.named_vector",
        "simple_car_params.named_vector",
        "trajectory_car_params.named_vector",
    ] + _LCM_ENABLED_NAMED_VECTORS,
)

drake_cc_vector_gen_translator_library(
    name = "generated_translators",
    srcs = _LCM_ENABLED_NAMED_VECTORS,
    deps = [
        ":generated_vectors",
        "//drake/lcmtypes:automotive",
    ],
)

drake_cc_library(
    name = "bicycle_car",
    srcs = ["bicycle_car.cc"],
    hdrs = ["bicycle_car.h"],
    deps = [
        ":generated_vectors",
        "//drake/common:symbolic",
        "//drake/systems/framework:leaf_system",
    ],
)

drake_cc_library(
    name = "box_car_vis",
    srcs = ["box_car_vis.cc"],
    hdrs = ["box_car_vis.h"],
    deps = [
        ":car_vis",
        "//drake/multibody/shapes",
        "//drake/systems/rendering:drake_visualizer_client",
    ],
)

drake_cc_library(
    name = "car_vis",
    srcs = ["car_vis.cc"],
    hdrs = ["car_vis.h"],
    deps = [
        "//drake/lcmtypes:viewer",
        "//drake/systems/rendering:pose_bundle",
    ],
)

drake_cc_library(
    name = "car_vis_applicator",
    srcs = ["car_vis_applicator.cc"],
    hdrs = ["car_vis_applicator.h"],
    deps = [
        ":box_car_vis",
        ":car_vis",
        ":generated_vectors",
        "//drake/lcmtypes:viewer",
        "//drake/systems/framework",
        "//drake/systems/rendering:drake_visualizer_client",
        "//drake/systems/rendering:pose_aggregator",
    ],
)

drake_cc_library(
    name = "curve2",
    srcs = ["curve2.cc"],
    hdrs = ["curve2.h"],
    deps = [
        ":generated_vectors",
        "//drake/common:autodiff",
        "//drake/common:autodiffxd_make_coherent",
    ],
)

drake_cc_library(
    name = "idm_controller",
    srcs = ["idm_controller.cc"],
    hdrs = ["idm_controller.h"],
    deps = [
        ":generated_vectors",
        ":idm_planner",
        ":pose_selector",
        ":road_odometry",
        "//drake/automotive/maliput/api",
        "//drake/common:default_scalars",
        "//drake/common:extract_double",
        "//drake/systems/framework:leaf_system",
        "//drake/systems/rendering:pose_bundle",
        "//drake/systems/rendering:pose_vector",
    ],
)

drake_cc_library(
    name = "idm_planner",
    srcs = ["idm_planner.cc"],
    hdrs = ["idm_planner.h"],
    deps = [
        ":generated_vectors",
        "//drake/common:default_scalars",
        "//drake/common:extract_double",
    ],
)

drake_cc_library(
    name = "lane_direction",
    srcs = ["lane_direction.cc"],
    hdrs = ["lane_direction.h"],
    deps = [
        "//drake/automotive/maliput/api",
    ],
)

drake_cc_library(
    name = "maliput_railcar",
    srcs = ["maliput_railcar.cc"],
    hdrs = ["maliput_railcar.h"],
    deps = [
        ":calc_smooth_acceleration",
        ":generated_vectors",
        ":lane_direction",
        "//drake/automotive/maliput/api",
        "//drake/math:geometric_transform",
        "//drake/systems/framework:leaf_system",
        "//drake/systems/rendering:frame_velocity",
        "//drake/systems/rendering:pose_vector",
    ],
)

drake_cc_library(
    name = "mobil_planner",
    srcs = ["mobil_planner.cc"],
    hdrs = ["mobil_planner.h"],
    deps = [
        ":generated_vectors",
        ":idm_planner",
        ":lane_direction",
        ":pose_selector",
        ":road_odometry",
        "//drake/automotive/maliput/api",
        "//drake/common:cond",
        "//drake/common:symbolic",
        "//drake/math:saturate",
        "//drake/systems/framework:leaf_system",
        "//drake/systems/rendering:pose_bundle",
        "//drake/systems/rendering:pose_vector",
    ],
)

drake_cc_library(
    name = "monolane_onramp_merge",
    srcs = ["monolane_onramp_merge.cc"],
    hdrs = ["monolane_onramp_merge.h"],
    deps = [
        "//drake/automotive/maliput/api",
        "//drake/automotive/maliput/monolane",
    ],
)

drake_cc_library(
    name = "pose_selector",
    srcs = ["pose_selector.cc"],
    hdrs = ["pose_selector.h"],
    visibility = [],
    deps = [
        ":lane_direction",
        ":road_odometry",
        "//drake/automotive/maliput/api",
        "//drake/common:autodiffxd_make_coherent",
        "//drake/common:extract_double",
        "//drake/systems/rendering:pose_bundle",
        "//drake/systems/rendering:pose_vector",
    ],
)

drake_cc_library(
    name = "prius_vis",
    srcs = ["prius_vis.cc"],
    hdrs = ["prius_vis.h"],
    data = ["//drake/automotive/models:prod_models"],
    deps = [
        ":car_vis",
        "//drake/common:find_resource",
        "//drake/lcmtypes:viewer",
        "//drake/multibody/joints",
        "//drake/multibody/parsers",
        "//drake/multibody/rigid_body_plant:create_load_robot_message",
        "//drake/systems/rendering:pose_bundle",
        "//drake/systems/rendering:pose_vector",
    ],
)

drake_cc_library(
    name = "pure_pursuit",
    srcs = ["pure_pursuit.cc"],
    hdrs = ["pure_pursuit.h"],
    deps = [
        ":generated_vectors",
        ":lane_direction",
        "//drake/automotive/maliput/api",
        "//drake/common:symbolic",
        "//drake/math:saturate",
        "//drake/systems/rendering:pose_vector",
    ],
)

drake_cc_library(
    name = "pure_pursuit_controller",
    srcs = ["pure_pursuit_controller.cc"],
    hdrs = ["pure_pursuit_controller.h"],
    deps = [
        ":generated_vectors",
        ":lane_direction",
        ":pure_pursuit",
        "//drake/systems/framework:leaf_system",
        "//drake/systems/rendering:pose_vector",
    ],
)

drake_cc_library(
    name = "road_odometry",
    srcs = ["road_odometry.cc"],
    hdrs = ["road_odometry.h"],
    deps = [
        "//drake/automotive/maliput/api",
        "//drake/systems/rendering:frame_velocity",
    ],
)

drake_cc_library(
    name = "road_path",
    srcs = ["road_path.cc"],
    hdrs = ["road_path.h"],
    visibility = [],
    deps = [
        ":lane_direction",
        ":monolane_onramp_merge",
        "//drake/automotive/maliput/api",
        "//drake/common:essential",
        "//drake/common:unused",
        "//drake/common/trajectories:piecewise_polynomial",
        "//drake/common/trajectories/qp_spline:spline_generation",
        "//drake/math:saturate",
    ],
)

drake_cc_library(
    name = "simple_car",
    srcs = ["simple_car.cc"],
    hdrs = [
        "simple_car.h",
    ],
    deps = [
        ":calc_smooth_acceleration",
        ":generated_vectors",
        "//drake/common:cond",
        "//drake/common:double",
        "//drake/common:symbolic",
        "//drake/math:saturate",
        "//drake/systems/framework:leaf_system",
        "//drake/systems/rendering:frame_velocity",
        "//drake/systems/rendering:pose_vector",
    ],
)

drake_cc_library(
    name = "simple_powertrain",
    srcs = ["simple_powertrain.cc"],
    hdrs = ["simple_powertrain.h"],
    deps = [
        "//drake/systems/primitives:linear_system",
    ],
)

drake_cc_library(
    name = "calc_smooth_acceleration",
    srcs = ["calc_smooth_acceleration.cc"],
    hdrs = ["calc_smooth_acceleration.h"],
    visibility = [],
    deps = [
        "//drake/common:autodiff",
        "//drake/common:symbolic",
    ],
)

drake_cc_library(
    name = "trajectory_car",
    srcs = ["trajectory_car.cc"],
    hdrs = ["trajectory_car.h"],
    deps = [
        ":calc_smooth_acceleration",
        ":curve2",
        ":generated_vectors",
        "//drake/common:autodiff",
        "//drake/common:extract_double",
        "//drake/systems/framework:leaf_system",
        "//drake/systems/rendering:frame_velocity",
        "//drake/systems/rendering:pose_vector",
    ],
)

drake_cc_library(
    name = "automotive_simulator",
    srcs = ["automotive_simulator.cc"],
    hdrs = ["automotive_simulator.h"],
    deps = [
        ":car_vis_applicator",
        ":generated_translators",
        ":generated_vectors",
        ":idm_controller",
        ":lane_direction",
        ":maliput_railcar",
        ":mobil_planner",
        ":prius_vis",
        ":pure_pursuit_controller",
        ":simple_car",
        ":trajectory_car",
        "//drake/automotive/maliput/api",
        "//drake/automotive/maliput/utility",
        "//drake/lcm",
        "//drake/multibody/parsers",
        "//drake/multibody/rigid_body_plant:drake_visualizer",
        "//drake/systems/analysis",
        "//drake/systems/lcm",
        "//drake/systems/lcm:lcmt_drake_signal_translator",
        "//drake/systems/primitives:multiplexer",
        "//drake/systems/rendering:pose_aggregator",
        "//drake/systems/rendering:pose_bundle_to_draw_message",
    ],
)

drake_cc_binary(
    name = "automotive_demo",
    srcs = [
        "automotive_demo.cc",
        "create_trajectory_params.cc",
        "create_trajectory_params.h",
    ],
    data = [
        "//drake/automotive/models:prod_models",
    ],
    deps = [
        ":automotive_simulator",
        ":monolane_onramp_merge",
        "//drake/automotive/maliput/dragway",
        "//drake/common:text_logging_gflags",
    ],
)

drake_cc_binary(
    name = "car_sim_lcm",
    srcs = [
        "car_sim_lcm.cc",
        "car_sim_lcm_common.cc",
        "car_sim_lcm_common.h",
    ],
    add_test_rule = 1,
    data = [
        "//drake/automotive/models:prod_models",
    ],
    test_rule_args = ["--simulation_sec=0.01"],
    # Flaky because LCM self-test can fail (PR #7311)
    test_rule_flaky = 1,
    deps = [
        ":automotive_simulator",
        "//drake/common:find_resource",
        "//drake/common:text_logging_gflags",
        "//drake/multibody:rigid_body_tree_construction",
        "//drake/multibody/rigid_body_plant",
        "//drake/systems/controllers:pid_controlled_system",
    ],
)

drake_py_binary(
    name = "steering_command_driver",
    srcs = ["steering_command_driver.py"],
    deps = [
        "//drake/lcmtypes:lcmtypes_py",
        "@lcm//:lcm-python",
    ],
)

drake_java_binary(
    name = "lcm-spy",
    main_class = "lcm.spy.Spy",
    runtime_deps = [
        "//drake/lcmtypes:lcmtypes_drake_java",
    ],
)

drake_py_binary(
    name = "demo",
    srcs = ["automotive_demo.py"],
    data = [
        ":automotive_demo",
        ":lcm-spy",
        ":steering_command_driver",
        "//tools:drake_visualizer",
        "@lcm//:lcm-logger",
    ],
    main = "automotive_demo.py",
    deps = [
        "@lcm//:lcm-python",
    ],
)

# === test/ ===

drake_cc_library(
    name = "autodiff_test_utilities",
    testonly = 1,
    hdrs = ["test/autodiff_test_utilities.h"],
    visibility = ["//visibility:private"],
    deps = [
        "//drake/common:autodiff",
        "//drake/common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "automotive_simulator_test",
    data = ["//drake/automotive/models:prod_models"],
    # Flaky because LCM self-test can fail (PR #7311)
    flaky = 1,
    local = 1,
    deps = [
        "//drake/automotive:automotive_simulator",
        "//drake/automotive/maliput/dragway",
        "//drake/lcm:mock",
    ],
)

drake_cc_googletest(
    name = "bicycle_car_test",
    deps = [
        "//drake/automotive:bicycle_car",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "box_car_vis_test",
    deps = [
        ":box_car_vis",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/rendering:pose_vector",
    ],
)

drake_cc_googletest(
    name = "car_vis_applicator_test",
    deps = [
        ":car_vis_applicator",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/math:geometric_transform",
    ],
)

drake_cc_googletest(
    name = "curve2_test",
    deps = [
        "//drake/automotive:curve2",
    ],
)

drake_cc_googletest(
    name = "maliput_railcar_test",
    deps = [
        "//drake/automotive:maliput_railcar",
        "//drake/automotive/maliput/api",
        "//drake/automotive/maliput/dragway",
        "//drake/automotive/maliput/monolane",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/math:geometric_transform",
    ],
)

drake_cc_googletest(
    name = "monolane_onramp_merge_test",
    deps = [
        ":monolane_onramp_merge",
        "//drake/automotive/maliput/utility",
    ],
)

drake_cc_googletest(
    name = "simple_car_test",
    deps = [
        "//drake/automotive:simple_car",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "idm_controller_test",
    deps = [
        "//drake/automotive:idm_controller",
        "//drake/automotive/maliput/dragway",
        "//drake/systems/framework/test_utilities:scalar_conversion",
    ],
)

drake_cc_googletest(
    name = "idm_planner_test",
    deps = [
        "//drake/automotive:autodiff_test_utilities",
        "//drake/automotive:idm_planner",
        "//drake/common:extract_double",
        "//drake/common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "mobil_planner_test",
    deps = [
        "//drake/automotive:mobil_planner",
        "//drake/automotive/maliput/dragway",
    ],
)

drake_cc_googletest(
    name = "pose_selector_test",
    deps = [
        "//drake/automotive:pose_selector",
        "//drake/automotive/maliput/dragway",
        "//drake/automotive/maliput/monolane:builder",
        "//drake/common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "prius_vis_test",
    deps = [
        ":prius_vis",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/math:geometric_transform",
    ],
)

drake_cc_googletest(
    name = "road_path_test",
    deps = [
        ":road_path",
        "//drake/automotive/maliput/dragway",
        "//drake/automotive/maliput/monolane",
        "//drake/common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "pure_pursuit_test",
    deps = [
        "//drake/automotive:pure_pursuit",
        "//drake/automotive/maliput/dragway",
        "//drake/common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "pure_pursuit_controller_test",
    deps = [
        "//drake/automotive:pure_pursuit_controller",
        "//drake/automotive/maliput/dragway",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "simple_powertrain_test",
    deps = [
        "//drake/automotive:simple_powertrain",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "calc_smooth_acceleration_test",
    deps = [
        "//drake/automotive:calc_smooth_acceleration",
        "//drake/common:essential",
    ],
)

drake_cc_googletest(
    name = "trajectory_car_test",
    deps = [
        "//drake/automotive:autodiff_test_utilities",
        "//drake/automotive:trajectory_car",
        "//drake/common:extract_double",
        "//drake/systems/analysis:simulator",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "trajectory_optimization_test",
    # Test size increased to not timeout when run with Valgrind.
    size = "medium",
    # Disable IPOPT for this example due to test timeouts on Mac-Clang-Bazel
    # builds (see #6223).
    tags = ["snopt"],
    deps = [
        ":simple_car",
        "//drake/common/proto:call_matlab",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/trajectory_optimization:direct_collocation",
    ],
)

add_lint_tests()
