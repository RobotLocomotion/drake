#include "drake/automotive/maliput/utility/generate_obj.h"

#include <cmath>
#include <fstream>

#include <gtest/gtest.h>
#include "spruce.hh"

#include "drake/automotive/maliput/monolane/builder.h"
#include "drake/automotive/maliput/monolane/loader.h"

namespace drake {
namespace maliput {
namespace utility {

namespace mono = maliput::monolane;

class GenerateObjTest : public ::testing::Test {
 protected:
  void SetUp() override {
    directory_.setAsTemp();
    directory_.append("GenerateObjTest");

    ASSERT_TRUE(spruce::dir::mkdir(directory_));
  }


  void TearDown() override {
    // spruce is retarded: it has no functionality for reading/walking a
    // directory, so we have to keep track of created files manually and
    // delete them by hand.
    for (const spruce::path& path : paths_to_cleanup_) {
      EXPECT_TRUE(spruce::file::remove(path));
    }
    ASSERT_TRUE(spruce::dir::rmdir(directory_));
  }


  // TODO(maddog@tri.global)  spruce is lame.  file::readAsString() does not
  //                          handle EOF correctly.  File a bug upstream.
  void ReadAsString(const spruce::path& path, std::string* destination) {
    std::ifstream is(path.getStr());
    std::stringstream ss;
    ASSERT_TRUE(is.is_open());
    while (true) {
      char c = is.get();
      if (is.eof()) { break; }
      ss << c;
    }
    *destination = ss.str();
  }

  spruce::path directory_;
  std::vector<spruce::path> paths_to_cleanup_;
};


class GenerateObjBasicDutTest : public GenerateObjTest {
 protected:
  const double kLinearTolerance = 0.01;
  const double kAngularTolerance = 0.01 * M_PI;
  const api::RBounds kLaneBounds{-0.5, 0.5};
  const api::RBounds kDriveableBounds{-1., 1.};

  void SetUp() override {
    GenerateObjTest::SetUp();

    mono::Builder b(kLaneBounds, kDriveableBounds,
                    kLinearTolerance, kAngularTolerance);

    const mono::EndpointZ kZeroZ{0., 0., 0., 0.};
    const mono::Endpoint start{{0., 0., 0.}, kZeroZ};
    b.Connect("0", start, 1., kZeroZ);
    const std::unique_ptr<const api::RoadGeometry> dut = b.Build({"dut"});
    dut_ = b.Build({"dut"});
  }

  std::unique_ptr<const api::RoadGeometry> dut_;
};


TEST_F(GenerateObjBasicDutTest, DefaultObjContent) {
  const std::string basename{"DefaultObjContent"};
  GenerateObjFile(dut_.get(), directory_.getStr(), basename,
                  ObjFeatures());
  // We expect to get two files out of this.

  spruce::path expected_obj(directory_);
  expected_obj.append(basename + ".obj");
  EXPECT_TRUE(expected_obj.isFile());
  paths_to_cleanup_.push_back(expected_obj);

  spruce::path expected_mtl(directory_);
  expected_mtl.append(basename + ".mtl");
  EXPECT_TRUE(expected_mtl.isFile());
  paths_to_cleanup_.push_back(expected_mtl);

  // Quick regression test on the OBJ.
  std::string actual_obj_contents;
  ReadAsString(expected_obj, &actual_obj_contents);
  EXPECT_EQ(R"R(# GENERATED BY maliput::utility::GenerateObjFile()
#
# DON'T BE A HERO.  Do not edit by hand.

mtllib DefaultObjContent.mtl
# Vertices
v 0.000 0.000 0.000
v 0.200 0.000 0.000
v 0.200 0.200 0.000
v 0.000 0.200 0.000
v 0.200 0.400 0.000
v 0.000 0.400 0.000
v 0.200 0.600 0.000
v 0.000 0.600 0.000
v 0.200 0.800 0.000
v 0.000 0.800 0.000
v 0.200 1.000 0.000
v 0.000 1.000 0.000
v 0.000 -0.200 0.000
v 0.200 -0.200 0.000
v 0.000 -0.400 0.000
v 0.200 -0.400 0.000
v 0.000 -0.600 0.000
v 0.200 -0.600 0.000
v 0.000 -0.800 0.000
v 0.200 -0.800 0.000
v 0.000 -1.000 0.000
v 0.200 -1.000 0.000
v 0.400 0.000 0.000
v 0.400 0.200 0.000
v 0.400 0.400 0.000
v 0.400 0.600 0.000
v 0.400 0.800 0.000
v 0.400 1.000 0.000
v 0.400 -0.200 0.000
v 0.400 -0.400 0.000
v 0.400 -0.600 0.000
v 0.400 -0.800 0.000
v 0.400 -1.000 0.000
v 0.600 0.000 0.000
v 0.600 0.200 0.000
v 0.600 0.400 0.000
v 0.600 0.600 0.000
v 0.600 0.800 0.000
v 0.600 1.000 0.000
v 0.600 -0.200 0.000
v 0.600 -0.400 0.000
v 0.600 -0.600 0.000
v 0.600 -0.800 0.000
v 0.600 -1.000 0.000
v 0.800 0.000 0.000
v 0.800 0.200 0.000
v 0.800 0.400 0.000
v 0.800 0.600 0.000
v 0.800 0.800 0.000
v 0.800 1.000 0.000
v 0.800 -0.200 0.000
v 0.800 -0.400 0.000
v 0.800 -0.600 0.000
v 0.800 -0.800 0.000
v 0.800 -1.000 0.000
v 1.000 0.000 0.000
v 1.000 0.200 0.000
v 1.000 0.400 0.000
v 1.000 0.600 0.000
v 1.000 0.800 0.000
v 1.000 1.000 0.000
v 1.000 -0.200 0.000
v 1.000 -0.400 0.000
v 1.000 -0.600 0.000
v 1.000 -0.800 0.000
v 1.000 -1.000 0.000
# Normals
vn 0.000 0.000 1.000

# Faces
usemtl bland_asphalt
f 1//1 2//1 3//1 4//1
f 4//1 3//1 5//1 6//1
f 6//1 5//1 7//1 8//1
f 8//1 7//1 9//1 10//1
f 10//1 9//1 11//1 12//1
f 1//1 13//1 14//1 2//1
f 13//1 15//1 16//1 14//1
f 15//1 17//1 18//1 16//1
f 17//1 19//1 20//1 18//1
f 19//1 21//1 22//1 20//1
f 2//1 23//1 24//1 3//1
f 3//1 24//1 25//1 5//1
f 5//1 25//1 26//1 7//1
f 7//1 26//1 27//1 9//1
f 9//1 27//1 28//1 11//1
f 2//1 14//1 29//1 23//1
f 14//1 16//1 30//1 29//1
f 16//1 18//1 31//1 30//1
f 18//1 20//1 32//1 31//1
f 20//1 22//1 33//1 32//1
f 23//1 34//1 35//1 24//1
f 24//1 35//1 36//1 25//1
f 25//1 36//1 37//1 26//1
f 26//1 37//1 38//1 27//1
f 27//1 38//1 39//1 28//1
f 23//1 29//1 40//1 34//1
f 29//1 30//1 41//1 40//1
f 30//1 31//1 42//1 41//1
f 31//1 32//1 43//1 42//1
f 32//1 33//1 44//1 43//1
f 34//1 45//1 46//1 35//1
f 35//1 46//1 47//1 36//1
f 36//1 47//1 48//1 37//1
f 37//1 48//1 49//1 38//1
f 38//1 49//1 50//1 39//1
f 34//1 40//1 51//1 45//1
f 40//1 41//1 52//1 51//1
f 41//1 42//1 53//1 52//1
f 42//1 43//1 54//1 53//1
f 43//1 44//1 55//1 54//1
f 45//1 56//1 57//1 46//1
f 46//1 57//1 58//1 47//1
f 47//1 58//1 59//1 48//1
f 48//1 59//1 60//1 49//1
f 49//1 60//1 61//1 50//1
f 45//1 51//1 62//1 56//1
f 51//1 52//1 63//1 62//1
f 52//1 53//1 64//1 63//1
f 53//1 54//1 65//1 64//1
f 54//1 55//1 66//1 65//1
# Vertices
v 0.000 0.000 0.020
v 0.200 0.000 0.020
v 0.200 0.200 0.020
v 0.000 0.200 0.020
v 0.200 0.400 0.020
v 0.000 0.400 0.020
v 0.200 0.500 0.020
v 0.000 0.500 0.020
v 0.000 -0.200 0.020
v 0.200 -0.200 0.020
v 0.000 -0.400 0.020
v 0.200 -0.400 0.020
v 0.000 -0.500 0.020
v 0.200 -0.500 0.020
v 0.400 0.000 0.020
v 0.400 0.200 0.020
v 0.400 0.400 0.020
v 0.400 0.500 0.020
v 0.400 -0.200 0.020
v 0.400 -0.400 0.020
v 0.400 -0.500 0.020
v 0.600 0.000 0.020
v 0.600 0.200 0.020
v 0.600 0.400 0.020
v 0.600 0.500 0.020
v 0.600 -0.200 0.020
v 0.600 -0.400 0.020
v 0.600 -0.500 0.020
v 0.800 0.000 0.020
v 0.800 0.200 0.020
v 0.800 0.400 0.020
v 0.800 0.500 0.020
v 0.800 -0.200 0.020
v 0.800 -0.400 0.020
v 0.800 -0.500 0.020
v 1.000 0.000 0.020
v 1.000 0.200 0.020
v 1.000 0.400 0.020
v 1.000 0.500 0.020
v 1.000 -0.200 0.020
v 1.000 -0.400 0.020
v 1.000 -0.500 0.020
# Normals
vn 0.000 0.000 1.000

# Faces
usemtl lane_haze
f 67//2 68//2 69//2 70//2
f 70//2 69//2 71//2 72//2
f 72//2 71//2 73//2 74//2
f 67//2 75//2 76//2 68//2
f 75//2 77//2 78//2 76//2
f 77//2 79//2 80//2 78//2
f 68//2 81//2 82//2 69//2
f 69//2 82//2 83//2 71//2
f 71//2 83//2 84//2 73//2
f 68//2 76//2 85//2 81//2
f 76//2 78//2 86//2 85//2
f 78//2 80//2 87//2 86//2
f 81//2 88//2 89//2 82//2
f 82//2 89//2 90//2 83//2
f 83//2 90//2 91//2 84//2
f 81//2 85//2 92//2 88//2
f 85//2 86//2 93//2 92//2
f 86//2 87//2 94//2 93//2
f 88//2 95//2 96//2 89//2
f 89//2 96//2 97//2 90//2
f 90//2 97//2 98//2 91//2
f 88//2 92//2 99//2 95//2
f 92//2 93//2 100//2 99//2
f 93//2 94//2 101//2 100//2
f 95//2 102//2 103//2 96//2
f 96//2 103//2 104//2 97//2
f 97//2 104//2 105//2 98//2
f 95//2 99//2 106//2 102//2
f 99//2 100//2 107//2 106//2
f 100//2 101//2 108//2 107//2
# Vertices
v 0.000 0.375 0.050
v 0.200 0.375 0.050
v 0.200 0.625 0.050
v 0.000 0.625 0.050
v 0.000 -0.625 0.050
v 0.200 -0.625 0.050
v 0.200 -0.375 0.050
v 0.000 -0.375 0.050
v 0.400 0.375 0.050
v 0.400 0.625 0.050
v 0.400 -0.625 0.050
v 0.400 -0.375 0.050
v 0.600 0.375 0.050
v 0.600 0.625 0.050
v 0.600 -0.625 0.050
v 0.600 -0.375 0.050
v 0.800 0.375 0.050
v 0.800 0.625 0.050
v 0.800 -0.625 0.050
v 0.800 -0.375 0.050
v 1.000 0.375 0.050
v 1.000 0.625 0.050
v 1.000 -0.625 0.050
v 1.000 -0.375 0.050
v 0.010 0.000 0.050
v 0.160 0.000 0.050
v 0.160 0.200 0.050
v 0.010 0.200 0.050
v 0.010 0.400 0.050
v 0.010 -0.200 0.050
v 0.160 -0.200 0.050
v 0.010 -0.400 0.050
v 0.310 0.000 0.050
v 0.690 0.000 0.050
v 0.840 0.000 0.050
v 0.840 0.200 0.050
v 0.690 0.200 0.050
v 0.690 0.400 0.050
v 0.690 -0.200 0.050
v 0.840 -0.200 0.050
v 0.690 -0.400 0.050
v 0.990 0.000 0.050
# Normals
vn 0.000 0.000 1.000

# Faces
usemtl marker_paint
f 109//3 110//3 111//3 112//3
f 113//3 114//3 115//3 116//3
f 110//3 117//3 118//3 111//3
f 114//3 119//3 120//3 115//3
f 117//3 121//3 122//3 118//3
f 119//3 123//3 124//3 120//3
f 121//3 125//3 126//3 122//3
f 123//3 127//3 128//3 124//3
f 125//3 129//3 130//3 126//3
f 127//3 131//3 132//3 128//3
f 133//3 134//3 135//3 136//3
f 136//3 135//3 137//3
f 133//3 138//3 139//3 134//3
f 138//3 140//3 139//3
f 134//3 141//3 135//3
f 134//3 139//3 141//3
f 142//3 143//3 144//3 145//3
f 145//3 144//3 146//3
f 142//3 147//3 148//3 143//3
f 147//3 149//3 148//3
f 143//3 150//3 144//3
f 143//3 148//3 150//3
)R", actual_obj_contents);
}


TEST_F(GenerateObjBasicDutTest, ChangeOrigin) {
  const std::string basename{"ChangeOrigin"};

  const double kOffsetX = 777777.;
  const double kOffsetY = 888888.;
  const double kOffsetZ = 999999.;

  // Reconstruct the basic DUT, but starting at the offset instead of (0,0,0).
  {
    mono::Builder b(kLaneBounds, kDriveableBounds,
                    kLinearTolerance, kAngularTolerance);

    const mono::EndpointZ kZeroZ{kOffsetZ, 0., 0., 0.};
    const mono::Endpoint start{{kOffsetX, kOffsetY, 0.}, kZeroZ};
    b.Connect("0", start, 1., kZeroZ);
    const std::unique_ptr<const api::RoadGeometry> dut = b.Build({"dut"});
    dut_ = b.Build({"dut"});
  }

  ObjFeatures obj_features;
  obj_features.origin = api::GeoPosition{kOffsetX, kOffsetY, kOffsetZ};
  GenerateObjFile(dut_.get(), directory_.getStr(), basename, obj_features);
  // We expect to get two files out of this.

  spruce::path expected_obj(directory_);
  expected_obj.append(basename + ".obj");
  EXPECT_TRUE(expected_obj.isFile());
  paths_to_cleanup_.push_back(expected_obj);

  spruce::path expected_mtl(directory_);
  expected_mtl.append(basename + ".mtl");
  EXPECT_TRUE(expected_mtl.isFile());
  paths_to_cleanup_.push_back(expected_mtl);

  // Quick regression test on the OBJ.
  std::string actual_obj_contents;
  ReadAsString(expected_obj, &actual_obj_contents);
  EXPECT_EQ(R"R(# GENERATED BY maliput::utility::GenerateObjFile()
#
# DON'T BE A HERO.  Do not edit by hand.

mtllib ChangeOrigin.mtl
# Vertices
v 0.000 0.000 0.000
v 0.200 0.000 0.000
v 0.200 0.200 0.000
v 0.000 0.200 0.000
v 0.200 0.400 0.000
v 0.000 0.400 0.000
v 0.200 0.600 0.000
v 0.000 0.600 0.000
v 0.200 0.800 0.000
v 0.000 0.800 0.000
v 0.200 1.000 0.000
v 0.000 1.000 0.000
v 0.000 -0.200 0.000
v 0.200 -0.200 0.000
v 0.000 -0.400 0.000
v 0.200 -0.400 0.000
v 0.000 -0.600 0.000
v 0.200 -0.600 0.000
v 0.000 -0.800 0.000
v 0.200 -0.800 0.000
v 0.000 -1.000 0.000
v 0.200 -1.000 0.000
v 0.400 0.000 0.000
v 0.400 0.200 0.000
v 0.400 0.400 0.000
v 0.400 0.600 0.000
v 0.400 0.800 0.000
v 0.400 1.000 0.000
v 0.400 -0.200 0.000
v 0.400 -0.400 0.000
v 0.400 -0.600 0.000
v 0.400 -0.800 0.000
v 0.400 -1.000 0.000
v 0.600 0.000 0.000
v 0.600 0.200 0.000
v 0.600 0.400 0.000
v 0.600 0.600 0.000
v 0.600 0.800 0.000
v 0.600 1.000 0.000
v 0.600 -0.200 0.000
v 0.600 -0.400 0.000
v 0.600 -0.600 0.000
v 0.600 -0.800 0.000
v 0.600 -1.000 0.000
v 0.800 0.000 0.000
v 0.800 0.200 0.000
v 0.800 0.400 0.000
v 0.800 0.600 0.000
v 0.800 0.800 0.000
v 0.800 1.000 0.000
v 0.800 -0.200 0.000
v 0.800 -0.400 0.000
v 0.800 -0.600 0.000
v 0.800 -0.800 0.000
v 0.800 -1.000 0.000
v 1.000 0.000 0.000
v 1.000 0.200 0.000
v 1.000 0.400 0.000
v 1.000 0.600 0.000
v 1.000 0.800 0.000
v 1.000 1.000 0.000
v 1.000 -0.200 0.000
v 1.000 -0.400 0.000
v 1.000 -0.600 0.000
v 1.000 -0.800 0.000
v 1.000 -1.000 0.000
# Normals
vn 0.000 0.000 1.000

# Faces
usemtl bland_asphalt
f 1//1 2//1 3//1 4//1
f 4//1 3//1 5//1 6//1
f 6//1 5//1 7//1 8//1
f 8//1 7//1 9//1 10//1
f 10//1 9//1 11//1 12//1
f 1//1 13//1 14//1 2//1
f 13//1 15//1 16//1 14//1
f 15//1 17//1 18//1 16//1
f 17//1 19//1 20//1 18//1
f 19//1 21//1 22//1 20//1
f 2//1 23//1 24//1 3//1
f 3//1 24//1 25//1 5//1
f 5//1 25//1 26//1 7//1
f 7//1 26//1 27//1 9//1
f 9//1 27//1 28//1 11//1
f 2//1 14//1 29//1 23//1
f 14//1 16//1 30//1 29//1
f 16//1 18//1 31//1 30//1
f 18//1 20//1 32//1 31//1
f 20//1 22//1 33//1 32//1
f 23//1 34//1 35//1 24//1
f 24//1 35//1 36//1 25//1
f 25//1 36//1 37//1 26//1
f 26//1 37//1 38//1 27//1
f 27//1 38//1 39//1 28//1
f 23//1 29//1 40//1 34//1
f 29//1 30//1 41//1 40//1
f 30//1 31//1 42//1 41//1
f 31//1 32//1 43//1 42//1
f 32//1 33//1 44//1 43//1
f 34//1 45//1 46//1 35//1
f 35//1 46//1 47//1 36//1
f 36//1 47//1 48//1 37//1
f 37//1 48//1 49//1 38//1
f 38//1 49//1 50//1 39//1
f 34//1 40//1 51//1 45//1
f 40//1 41//1 52//1 51//1
f 41//1 42//1 53//1 52//1
f 42//1 43//1 54//1 53//1
f 43//1 44//1 55//1 54//1
f 45//1 56//1 57//1 46//1
f 46//1 57//1 58//1 47//1
f 47//1 58//1 59//1 48//1
f 48//1 59//1 60//1 49//1
f 49//1 60//1 61//1 50//1
f 45//1 51//1 62//1 56//1
f 51//1 52//1 63//1 62//1
f 52//1 53//1 64//1 63//1
f 53//1 54//1 65//1 64//1
f 54//1 55//1 66//1 65//1
# Vertices
v 0.000 0.000 0.020
v 0.200 0.000 0.020
v 0.200 0.200 0.020
v 0.000 0.200 0.020
v 0.200 0.400 0.020
v 0.000 0.400 0.020
v 0.200 0.500 0.020
v 0.000 0.500 0.020
v 0.000 -0.200 0.020
v 0.200 -0.200 0.020
v 0.000 -0.400 0.020
v 0.200 -0.400 0.020
v 0.000 -0.500 0.020
v 0.200 -0.500 0.020
v 0.400 0.000 0.020
v 0.400 0.200 0.020
v 0.400 0.400 0.020
v 0.400 0.500 0.020
v 0.400 -0.200 0.020
v 0.400 -0.400 0.020
v 0.400 -0.500 0.020
v 0.600 0.000 0.020
v 0.600 0.200 0.020
v 0.600 0.400 0.020
v 0.600 0.500 0.020
v 0.600 -0.200 0.020
v 0.600 -0.400 0.020
v 0.600 -0.500 0.020
v 0.800 0.000 0.020
v 0.800 0.200 0.020
v 0.800 0.400 0.020
v 0.800 0.500 0.020
v 0.800 -0.200 0.020
v 0.800 -0.400 0.020
v 0.800 -0.500 0.020
v 1.000 0.000 0.020
v 1.000 0.200 0.020
v 1.000 0.400 0.020
v 1.000 0.500 0.020
v 1.000 -0.200 0.020
v 1.000 -0.400 0.020
v 1.000 -0.500 0.020
# Normals
vn 0.000 0.000 1.000

# Faces
usemtl lane_haze
f 67//2 68//2 69//2 70//2
f 70//2 69//2 71//2 72//2
f 72//2 71//2 73//2 74//2
f 67//2 75//2 76//2 68//2
f 75//2 77//2 78//2 76//2
f 77//2 79//2 80//2 78//2
f 68//2 81//2 82//2 69//2
f 69//2 82//2 83//2 71//2
f 71//2 83//2 84//2 73//2
f 68//2 76//2 85//2 81//2
f 76//2 78//2 86//2 85//2
f 78//2 80//2 87//2 86//2
f 81//2 88//2 89//2 82//2
f 82//2 89//2 90//2 83//2
f 83//2 90//2 91//2 84//2
f 81//2 85//2 92//2 88//2
f 85//2 86//2 93//2 92//2
f 86//2 87//2 94//2 93//2
f 88//2 95//2 96//2 89//2
f 89//2 96//2 97//2 90//2
f 90//2 97//2 98//2 91//2
f 88//2 92//2 99//2 95//2
f 92//2 93//2 100//2 99//2
f 93//2 94//2 101//2 100//2
f 95//2 102//2 103//2 96//2
f 96//2 103//2 104//2 97//2
f 97//2 104//2 105//2 98//2
f 95//2 99//2 106//2 102//2
f 99//2 100//2 107//2 106//2
f 100//2 101//2 108//2 107//2
# Vertices
v 0.000 0.375 0.050
v 0.200 0.375 0.050
v 0.200 0.625 0.050
v 0.000 0.625 0.050
v 0.000 -0.625 0.050
v 0.200 -0.625 0.050
v 0.200 -0.375 0.050
v 0.000 -0.375 0.050
v 0.400 0.375 0.050
v 0.400 0.625 0.050
v 0.400 -0.625 0.050
v 0.400 -0.375 0.050
v 0.600 0.375 0.050
v 0.600 0.625 0.050
v 0.600 -0.625 0.050
v 0.600 -0.375 0.050
v 0.800 0.375 0.050
v 0.800 0.625 0.050
v 0.800 -0.625 0.050
v 0.800 -0.375 0.050
v 1.000 0.375 0.050
v 1.000 0.625 0.050
v 1.000 -0.625 0.050
v 1.000 -0.375 0.050
v 0.010 0.000 0.050
v 0.160 0.000 0.050
v 0.160 0.200 0.050
v 0.010 0.200 0.050
v 0.010 0.400 0.050
v 0.010 -0.200 0.050
v 0.160 -0.200 0.050
v 0.010 -0.400 0.050
v 0.310 0.000 0.050
v 0.690 0.000 0.050
v 0.840 0.000 0.050
v 0.840 0.200 0.050
v 0.690 0.200 0.050
v 0.690 0.400 0.050
v 0.690 -0.200 0.050
v 0.840 -0.200 0.050
v 0.690 -0.400 0.050
v 0.990 0.000 0.050
# Normals
vn 0.000 0.000 1.000

# Faces
usemtl marker_paint
f 109//3 110//3 111//3 112//3
f 113//3 114//3 115//3 116//3
f 110//3 117//3 118//3 111//3
f 114//3 119//3 120//3 115//3
f 117//3 121//3 122//3 118//3
f 119//3 123//3 124//3 120//3
f 121//3 125//3 126//3 122//3
f 123//3 127//3 128//3 124//3
f 125//3 129//3 130//3 126//3
f 127//3 131//3 132//3 128//3
f 133//3 134//3 135//3 136//3
f 136//3 135//3 137//3
f 133//3 138//3 139//3 134//3
f 138//3 140//3 139//3
f 134//3 141//3 135//3
f 134//3 139//3 141//3
f 142//3 143//3 144//3 145//3
f 145//3 144//3 146//3
f 142//3 147//3 148//3 143//3
f 147//3 149//3 148//3
f 143//3 150//3 144//3
f 143//3 148//3 150//3
)R", actual_obj_contents);
}


TEST_F(GenerateObjBasicDutTest, MtlContent) {
  const std::string basename{"MtlContent"};
  GenerateObjFile(dut_.get(), directory_.getStr(), basename, ObjFeatures());
  // We expect to get two files out of this.
  spruce::path expected_obj(directory_);
  expected_obj.append(basename + ".obj");
  EXPECT_TRUE(expected_obj.isFile());
  paths_to_cleanup_.push_back(expected_obj);

  spruce::path expected_mtl(directory_);
  expected_mtl.append(basename + ".mtl");
  EXPECT_TRUE(expected_mtl.isFile());
  paths_to_cleanup_.push_back(expected_mtl);

  // Quick regression test on the MTL (which is always the same).
  std::string actual_mtl_contents;
  ReadAsString(expected_mtl, &actual_mtl_contents);
  EXPECT_EQ(R"R(# GENERATED BY maliput::utility::GenerateObjFile()
#
# DON'T BE A HERO.  Do not edit by hand.

newmtl marker_paint
Ka 0.8 0.8 0.0
Kd 1.0 1.0 0.0
Ks 1.0 1.0 0.5
Ns 10.0
illum 2
d 0.5

newmtl bland_asphalt
Ka 0.1 0.1 0.1
Kd 0.2 0.2 0.2
Ks 0.3 0.3 0.3
Ns 10.0
illum 2

newmtl lane_haze
Ka 0.9 0.9 0.9
Kd 0.9 0.9 0.9
Ks 0.9 0.9 0.9
Ns 10.0
illum 2
d 0.20
)R", actual_mtl_contents);
}


// Oblique regression test for tripping of an assertion in DrawLaneArrow()
// during GenerateObj().  See #5745.
TEST_F(GenerateObjTest, DontTickleDrawLaneArrowAssert) {
  std::string dut_yaml = R"R(# -*- yaml -*-
---
# distances are meters; angles are degrees.
maliput_monolane_builder:
  id: city_1
  lane_bounds: [-2, 2]
  driveable_bounds: [-4, 4]
  position_precision: 0.01
  orientation_precision: 0.5
  points:
    street_9_1_3:
      xypoint: [92.92893218813452, 307.0710678118655, -45.0]
      zpoint: [0.0, 0, 0, 0]
    street_9_1_4:
      xypoint: [95.05025253169417, 304.9497474683058, -45.0]
      zpoint: [0.0, 0, 0, 0]
  connections:
    street_9_1_3-street_9_1_4: {start: points.street_9_1_3, length: 3.000000000000014,
      explicit_end: points.street_9_1_4}
  groups: {}
)R";

  const std::unique_ptr<const api::RoadGeometry> dut = mono::Load(dut_yaml);

  const std::string basename{"DontTickleDrawLaneArrowAssert"};
  GenerateObjFile(dut.get(), directory_.getStr(), basename, ObjFeatures());
  // We expect to get two files out of this.

  spruce::path expected_obj(directory_);
  expected_obj.append(basename + ".obj");
  EXPECT_TRUE(expected_obj.isFile());

  spruce::path expected_mtl(directory_);
  expected_mtl.append(basename + ".mtl");
  EXPECT_TRUE(expected_mtl.isFile());

  paths_to_cleanup_.push_back(expected_obj);
  paths_to_cleanup_.push_back(expected_mtl);
}


}  // namespace utility
}  // namespace maliput
}  // namespace drake
