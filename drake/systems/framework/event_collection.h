#pragma once

#include <memory>
#include <vector>
#include <utility>

#include "drake/common/drake_copyable.h"
#include "drake/systems/framework/context.h"
#include "drake/systems/framework/event.h"
#include "drake/systems/framework/state.h"
#include "drake/systems/framework/trigger.h"

namespace drake {
namespace systems {

/**
 * Base class that represents simultaneous events at a particular time for
 * System. Each concrete event has an optional callback function for event
 * handling, and a Trigger object that holds information for the handler
 * function such as why the event occurred and optional additional data to
 * facilitate data flow from event triggering to handling.
 *
 * For each event type (publish, discrete update and unrestricted update),
 * the LeafSystem API provides a unique customizable function for handling all
 * the simultaneous events of that type, e.g.
 * LeafSystem::DoPublish(const Context&, const vector<const PublishEvent*>&)
 * for publish events, where the second argument represents all the publish
 * events that occur simultaneously for a leaf system. The default
 * implementations process the events in the same order of the second argument.
 * The user is responsible for overriding such functions to handle each event
 * in the desired order. For example, suppose two publish events are being
 * handled, events = {per step publish, periodic publish}. Depending on the
 * desired behavior, the user has the freedom to ignore both, handle only one,
 * or both in any arbitrary order. Note that for each type of events at any
 * given time, its handler should only be invoked once. The System and Diagram
 * API only provide dispatch mechanisms that delegate actual event handling
 * to all the constituient leaf systems.
 *
 * The System API provides several functions for customizable event scheduling
 * and generation such as System::DoCalcNextUpdateTime() or
 * System::DoGetPerStepEvents(). These functions can generate any number of
 * events of arbitrary types, and the resulting events are stored in separate
 * EventCollection instances. Before calling the event handlers, all these
 * EventCollection objects need to be merged, so that the handlers have a
 * complete set of simultaneous events.
 *
 * Here is a complete example. For some LeafSystem `sys` at time `t`, its
 * System::DoCalcNextUpdateTime() generates the following events (`events1`):
 * <pre>
 *   PublishEvent: {event1(kPeriodic, callback1)}
 *   DiscreteUpdateEvent: {event2(kPeriodic, callback2)}
 * </pre>
 * It also has per step events (`events2`) generated by its
 * System::DoGetPerStepEvents():
 * <pre>
 *   PublishEvent: {event3(kPerStep, callback3)}
 *   UnrestrictedUpdateEvent: {event4(kPerStep,callback4)}
 * </pre>
 * Simultaneous events `events1` and `events2` are then
 * merged into `all_events`:
 * <pre>
 *   PublishEvent: {event1, event3}
 *   DiscreteUpdateEvent: {event2}
 *   UnrestrictedUpdateEvent: {event4}
 * </pre>
 *
 * To handle these events:
 * <pre>
 *   sys.CalcUnrestrictedUpdate(context, all_events, state);
 *   sys.CalcDiscreteVariableUpdates(context, all_events, discrete_state);
 *   sys.Publish(context, all_events)
 * </pre>
 * For a LeafSystem, this is equivalent to (by expanding the dispatch mechanisms
 * in the System API):
 * <pre>
 *   sys.DoCalcUnrestrictedUpdate(context, {event4}, state);
 *   sys.DoCalcDiscreteVariableUpdates(context, {event2}, discrete_state);
 *   sys.DoPublish(context, {event1, event3})
 * </pre>
 */

template <typename EventType>
class EventCollection {
 public:
  DRAKE_NO_COPY_NO_MOVE_NO_ASSIGN(EventCollection)

  virtual ~EventCollection() {}

  /**
   * Clears all the events maintained by this, and adds all the events in
   * @p other to this.
   */
  void SetFrom(const EventCollection<EventType>& other) {
    Clear();
    Merge(other);
  }

  /**
   * Merges all of @p other's events into this. See derived DoMerge() for more
   * details.
   */
  void Merge(const EventCollection<EventType>& other) {
    if (&other == this) return;
    DoMerge(&other);
  }

  /**
   * Clears all the maintained events.
   */
  virtual void Clear() = 0;

  /**
   * Returns true if no event exists.
   */
  virtual bool HasNoEvents() const = 0;

 protected:
  /**
   * Constructor only accessible by derived class.
   */
  EventCollection() = default;

  /**
   * Derived implementation can assume that @p is not null, and it is does not
   * equal to this.
   */
  virtual void DoMerge(const EventCollection<EventType>* other) = 0;
};

/**
 * A concrete class that holds all the simultaneous events for a Diagram. For
 * each sub system in the corresponding Diagram, a derived EventCollection
 * instance is maintained internally. This effectively holds the same recursive
 * tree structure as the corresponding Diagram.
 */
template <typename EventType>
class DiagramEventCollection final : public EventCollection<EventType> {
 public:
  DRAKE_NO_COPY_NO_MOVE_NO_ASSIGN(DiagramEventCollection)

  /**
   * Constructor. Note that this constructor only resizes the containers, but
   * does not allocate any derived EventCollection instances.
   *
   * @note Users should almost never call this explicitly. Use
   * System::AllocateEventCollection() instead.
   *
   * @param num_sub_systems Number of sub systems in the corresponding Diagram.
   */
  explicit DiagramEventCollection(int num_sub_systems)
      : EventCollection<EventType>(),
        sub_event_collection_(num_sub_systems),
        owned_sub_event_collection_(num_sub_systems) {}

  /**
   * Returns the number of constituent EventCollection that correspond to each
   * sub system.
   */
  int num_sub_event_collection() const {
    return static_cast<int>(sub_event_collection_.size());
  }

  /**
   * Transfers @p sub_event_collection ownership to this, and associate it with
   * sub system identified by @p index.
   */
  void set_and_own_sub_event_collection(int index,
      std::unique_ptr<EventCollection<EventType>> sub_event_collection) {
    DRAKE_DEMAND(index >= 0 && index < num_sub_event_collection());
    owned_sub_event_collection_[index] = std::move(sub_event_collection);
    sub_event_collection_[index] = owned_sub_event_collection_[index].get();
  }

  /**
   * Returns a const pointer to sub system's EventCollection at @p index.
   */
  const EventCollection<EventType>* get_sub_event_collection(int index) const {
    DRAKE_DEMAND(index >= 0 && index < num_sub_event_collection());
    return sub_event_collection_[index];
  }

  /**
   * Returns a mutable pointer to sub system's EventCollection at @p index.
   */
  EventCollection<EventType>* get_mutable_sub_event_collection(int index) {
    DRAKE_DEMAND(index >= 0 && index < num_sub_event_collection());
    return sub_event_collection_[index];
  }

  /**
   * Goes through each sub event collection and clears its content.
   */
  void Clear() override {
    for (EventCollection<EventType>* sub_event : sub_event_collection_) {
      sub_event->Clear();
    }
  }

  /**
   * Returns true if none of the sub event collection has any events.
   */
  bool HasNoEvents() const override {
    for (const EventCollection<EventType>* sub_event : sub_event_collection_) {
      if (!sub_event->HasNoEvents()) return false;
    }
    return true;
  }

 protected:
  // These are protected for doxygen.

  /**
   * Goes through each sub event collection and merges in the corresponding one
   * in @p other_collection. Assumes that @p other_collection is an instance of
   * DiagramEventCollection and has the same number of sub event collections.
   * Aborts otherwise.
   */
  void DoMerge(const EventCollection<EventType>* other_collection) override {
    const DiagramEventCollection<EventType>* other =
      dynamic_cast<const DiagramEventCollection<EventType>*>(other_collection);
    DRAKE_DEMAND(other != nullptr);
    DRAKE_DEMAND(num_sub_event_collection() == other->num_sub_event_collection());

    for (int i = 0; i < num_sub_event_collection(); i++) {
      sub_event_collection_[i]->Merge(*(other->get_sub_event_collection(i)));
    }
  }

 private:
  std::vector<EventCollection<EventType>*> sub_event_collection_;
  std::vector<std::unique_ptr<EventCollection<EventType>>> owned_sub_event_collection_;
};

/**
 * A concrete class that holds all simultaneous events for a LeafSystem. For
 * each derived type of Event, all events of that type are represented by a
 * separate vector, e.g.
 * <pre>
 *   PublishEvent: {event1, event2, ...}
 *   DiscreteUpdateEvent: {event3, event4, ...}
 *   ...
 * </pre>
 */
template <typename EventType>
class LeafEventCollection final : public EventCollection<EventType> {
 public:
  DRAKE_NO_COPY_NO_MOVE_NO_ASSIGN(LeafEventCollection)

  /**
   * Constructor.
   */
  LeafEventCollection() = default;

  /**
   * Returns a const reference to the vector of const pointers to all the
   * publish update events.
   */
  const std::vector<const EventType*>& get_events() const {
    return events_;
  }

  /**
   * Add @p event to the existing publish event. Ownership of
   * @p event is transfered.
   */
  void add_event(std::unique_ptr<EventType> event) {
    owned_events_.push_back(std::move(event));
    events_.push_back(owned_events_.back().get());
  }

  /**
   * Returns true if no event exists.
   */
  bool HasNoEvents() const override {
    return events_.empty();
  }

  /**
   * Clears all events.
   */
  void Clear() override {
    owned_events_.clear();
    events_.clear();
  }

 protected:
  // These are protected for doxygen.

  /**
   * For each event type in @p other_info, adds all its events to this. Assumes
   * that @p other_info is an instance of LeafEventCollection. Aborts otherwise.
   *
   * Here is an example. Suppose this has the following events:
   * <pre>
   *   PublishEvent: {event1, event2, event3}
   *   DiscreteUpdateEvent: {event4, event5}
   * </pre>
   * @p other_info has:
   * <pre>
   *   PublishEvent: {event6}
   *   UnrestrictedUpdateEvent: {event7, event8}
   * </pre>
   * After calling DoMerge(other_info), this looks like this:
   * <pre>
   *   PublishEvent: {event1, event2, event3, event6}
   *   DiscreteUpdateEvent: {event4, event5}
   *   UnrestrictedUpdateEvent: {event7, event8}
   * </pre>
   */
  void DoMerge(const EventCollection<EventType>* other_info) override {
    const LeafEventCollection<EventType>* other =
        dynamic_cast<const LeafEventCollection<EventType>*>(other_info);
    DRAKE_DEMAND(other != nullptr);

    const std::vector<const EventType*>& other_events = other->get_events();
    for (const EventType* other_event : other_events) {
      other_event->add_to(this);
    }
  }

 private:
  // Owned event unique pointers.
  std::vector<std::unique_ptr<EventType>> owned_events_;

  // Points to the corresponding unique pointers.
  std::vector<const EventType*> events_;
};

template <typename T>
class CombinedEventCollection {
 public:
  virtual const EventCollection<PublishEvent<T>>& get_publish_events() const = 0;

  virtual const EventCollection<DiscreteUpdateEvent<T>>& get_discrete_update_events() const = 0;

  virtual const EventCollection<UnrestrictedUpdateEvent<T>>& get_unrestricted_update_events() const = 0;

 protected:
  CombinedEventCollection() = default;
};

template <typename T>
class LeafCombinedEventCollection : public CombinedEventCollection<T> {
 public:
  LeafCombinedEventCollection() {
    owned_publish_events_ = std::make_unique<LeafEventCollection<PublishEvent<T>>>();
    owned_discrete_update_events_ = std::make_unique<LeafEventCollection<DiscreteUpdateEvent<T>>>();
    owned_unrestricted_update_events_ = std::make_unique<LeafEventCollection<UnrestrictedUpdateEvent<T>>>();
  }

  const EventCollection<PublishEvent<T>>& get_publish_events() const override {
    return *owned_publish_events_;
  }

  const EventCollection<DiscreteUpdateEvent<T>>& get_discrete_update_events() const override {
    return *owned_discrete_update_events_;
  }

  const EventCollection<UnrestrictedUpdateEvent<T>>& get_unrestricted_update_events() const override {
    return *owned_unrestricted_update_events_;
  }

 private:
  std::unique_ptr<LeafEventCollection<PublishEvent<T>>> owned_publish_events_;
  std::unique_ptr<LeafEventCollection<DiscreteUpdateEvent<T>>> owned_discrete_update_events_;
  std::unique_ptr<LeafEventCollection<UnrestrictedUpdateEvent<T>>> owned_unrestricted_update_events_;
};

template <typename T>
class DiagramCombinedEventCollection {
 public:
  DiagramCombinedEventCollection() {
  }

  const EventCollection<PublishEvent<T>>& get_publish_events() const override {

  }

  const EventCollection<DiscreteUpdateEvent<T>>& get_discrete_update_events() const override {
  }

  const EventCollection<UnrestrictedUpdateEvent<T>>& get_unrestricted_update_events() const override {
  }

 private:
  std::vector<CombinedEventCollection<T>*> sub_event_collection_;
  std::vector<std::unique_ptr<CombinedEventCollection<T>>> owned_sub_event_collection_;
};

}  // namespace systems
}  // namespace drake
