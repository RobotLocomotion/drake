#pragma once

#include <memory>
#include <vector>

#include "drake/common/drake_copyable.h"
#include "drake/systems/framework/context.h"
#include "drake/systems/framework/event.h"
#include "drake/systems/framework/state.h"
#include "drake/systems/framework/trigger.h"

namespace drake {
namespace systems {

/**
 * Base class that represents all events at a particular time for System.
 * There are several predefined event and trigger types. To represent a concrete
 * event, a pair of event type and Trigger is necessary. The former specifies
 * the event type, and the latter captures all the details of the actual event.
 *
 * For each event type, the System API provides a unique customizable function
 * for handling all the simultaneous events of that type, such as
 * System::DoPublish(context, triggers), where `triggers` represents the
 * individual events that should be considered to have occurred simultaneously.
 * The user is responsible for overriding such functions to handle each event
 * in the desired order. For example, suppose publish type events are being
 * handled, which are represented by
 * `triggers` = {kPerStep, kPeriodic}. Depending on the desired behavior, the
 * user has the freedom to ignore both, handle only one, or both in any
 * arbitrary order. For each type of events at any given moment in time, its
 * handler should only be invoked once.
 *
 * The System API also provides several functions for customizable event
 * generation such as System::DoCalcNextUpdateTime() or
 * System::DoGetPerStepEvents(). These functions can generate any number of
 * events of arbitrary types, and the resulting events are stored in separate
 * EventInfo instances. Before calling the event handlers, all these EventInfo
 * objects need to be merged, so that the handlers have a complete set of
 * the simultaneous events.
 *
 * Here is a complete example. For some LeafSystem `sys` at time `t`,
 * its System::DoCalcNextUpdateTime() generates the following
 * events (`event_info1`):
 * <pre>
 *   kPublish: {trigger1(kPeriodic)}
 *   kDiscreteUpdate: {trigger2(kPeriodic)}
 * </pre>
 * It also has per step events (`event_info2`) generated by its
 * System::DoGetPerStepEvents():
 * <pre>
 *   kPublish: {trigger3(kPerStep)}
 *   kUnrestrictedUpdate: {trigger4(kPerStep)}
 * </pre>
 * Simultaneous `event_info1` and `event_info2` are then merged into
 * `all_event_info`:
 * <pre>
 *   kPublish: {trigger1, trigger3}
 *   kDiscreteUpdate: {trigger2}
 *   kUnrestrictedUpdate: {trigger4}
 * </pre>
 *
 * To handle these events:
 * <pre>
 *   sys.CalcUnrestrictedUpdate(context, all_event_info, state);
 *   sys.CalcDiscreteVariableUpdates(context, all_event_info, discrete_state);
 *   sys.Publish(context, all_event_info)
 * </pre>
 * For a LeafSystem, this is equivalent to:
 * <pre>
 *   sys.DoCalcUnrestrictedUpdate(context, {trigger4}, state);
 *   sys.DoCalcDiscreteVariableUpdates(context, {trigger2}, discrete_state);
 *   sys.DoPublish(context, {trigger1, trigger3})
 * </pre>
 */
class EventInfo {
 public:
  DRAKE_NO_COPY_NO_MOVE_NO_ASSIGN(EventInfo)

  virtual ~EventInfo() {}

  /**
   * Clears all the events maintained by this, and adds all the events in
   * @p other to this.
   */
  void SetFrom(const EventInfo& other) {
    Clear();
    Merge(other);
  }

  /**
   * Merges @p other's event information into this. See derived DoMerge() for
   * more details.
   */
  void Merge(const EventInfo& other) {
    if (&other == this) return;
    DoMerge(&other);
  }

  /**
   * Clears all the events.
   */
  virtual void Clear() = 0;

  /**
   * Returns true if this has any publish event.
   */
  virtual bool HasPublishEvents() const = 0;

  /**
   * Returns true if this has any discrete update event.
   */
  virtual bool HasDiscreteUpdateEvents() const = 0;

  /**
   * Returns true if this has any unrestricted update event.
   */
  virtual bool HasUnrestrictedUpdateEvents() const = 0;

  /**
   * Returns true if no event exists.
   */
  virtual bool HasNoEvents() const = 0;

 protected:
  /**
   * Constructor only accessible by derived class.
   */
  EventInfo() = default;

  /**
   * Derived implementation can assume that @p is not null, and it is does not
   * equal to this.
   */
  virtual void DoMerge(const EventInfo* other) = 0;
};

/**
 * A concrete class that holds event related information for a Diagram.
 * For each sub system in the corresponding Diagram, a derived EventInfo
 * instance is maintained internally.
 */
class DiagramEventInfo final : public EventInfo {
 public:
  DRAKE_NO_COPY_NO_MOVE_NO_ASSIGN(DiagramEventInfo)

  /**
   * Constructor. Note that this constructor only resizes the containers, but
   * does not allocate any derived EventInfo instances.
   *
   * @note Users should almost never call this explicitly. Use
   * System::AllocateEventInfo() instead.
   *
   * @param num_sub_systems Number of sub systems in the corresponding Diagram.
   */
  explicit DiagramEventInfo(int num_sub_systems)
      : EventInfo(),
        sub_event_info_(num_sub_systems),
        owned_sub_event_info_(num_sub_systems) {}

  /**
   * Returns the number of constituent EventInfo that correspond to each sub
   * system.
   */
  int num_sub_event_info() const {
    return static_cast<int>(sub_event_info_.size());
  }

  /**
   * Transfers @p sub_event_info ownership to this, and associate it with sub
   * system identified by @p index.
   */
  void set_and_own_sub_event_info(int index,
                                  std::unique_ptr<EventInfo> sub_event_info);

  /**
   * Returns a const pointer to sub system's EventInfo at @p index.
   */
  const EventInfo* get_sub_event_info(int index) const;

  /**
   * Returns a mutable pointer to sub system's EventInfo at @p index.
   */
  EventInfo* get_mutable_sub_event_info(int index);

  /**
   * Goes through each sub event info and clears its content.
   */
  void Clear() override;

  /**
   * Returns true if this has any publish event.
   */
  bool HasPublishEvents() const override;

  /**
   * Returns true if this has any discrete update event.
   */
  bool HasDiscreteUpdateEvents() const override;

  /**
   * Returns true if this has any unrestricted update event.
   */
  bool HasUnrestrictedUpdateEvents() const override;

  /**
   * Returns true if none of the sub event info has any events.
   */
  bool HasNoEvents() const override;

 protected:
  // These are protected for doxygen.

  /**
   * Goes through each sub event info and merges in the corresponding one in
   * @p other_info. Assumes that @p other_info is an instance of
   * DiagramEventInfo and has the same number of sub event info. Aborts
   * otherwise.
   */
  void DoMerge(const EventInfo* other_info) override;

 private:
  std::vector<EventInfo*> sub_event_info_;
  std::vector<std::unique_ptr<EventInfo>> owned_sub_event_info_;

  template <typename T>
  friend class Diagram;
};

/**
 * A concrete class that holds event related information for a LeafSystem.
 * For each derived type of Event, all events of that type are represented by a
 * separate vector.
 * <pre>
 *   PublishEvent: {event1, event2, ...}
 *   DiscreteUpdateEvent: {event3, event4, ...}
 *   ...
 * </pre>
 */
template <typename T>
class LeafEventInfo final : public EventInfo {
 public:
  DRAKE_NO_COPY_NO_MOVE_NO_ASSIGN(LeafEventInfo)

  /**
   * Constructor.
   */
  LeafEventInfo() = default;

  /**
   * Returns a const reference to the vector of const pointers to all the
   * publish update events.
   */
  const std::vector<const PublishEvent<T>*>& get_publish_events() const {
    return publish_events_;
  }

  /**
   * Returns a const reference to the vector of const pointers to all the
   * discrete update events.
   */
  const std::vector<const DiscreteUpdateEvent<T>*>& get_discrete_update_events()
      const {
    return discrete_update_events_;
  }

  /**
   * Returns a const reference to the vector of const pointers to all the
   * unrestricted update events.
   */
  const std::vector<const UnrestrictedUpdateEvent<T>*>&
  get_unrestricted_update_events() const {
    return unrestricted_update_events_;
  }

  /**
   * Add @p event to the existing publish event. Ownership of
   * @p event is transfered.
   */
  void add_event(std::unique_ptr<PublishEvent<T>> event) {
    owned_publish_events_.push_back(std::move(event));
    publish_events_.push_back(owned_publish_events_.back().get());
  }

  /**
   * Add @p event to the existing discrete update event. Ownership of
   * @p event is transfered.
   */
  void add_event(std::unique_ptr<DiscreteUpdateEvent<T>> event) {
    owned_discrete_update_events_.push_back(std::move(event));
    discrete_update_events_.push_back(
        owned_discrete_update_events_.back().get());
  }

  /**
   * Add @p event to the existing unrestricted update event. Ownership of
   * @p event is transfered.
   */
  void add_event(std::unique_ptr<UnrestrictedUpdateEvent<T>> event) {
    owned_unrestricted_update_events_.push_back(std::move(event));
    unrestricted_update_events_.push_back(
        owned_unrestricted_update_events_.back().get());
  }

  /**
   * Returns true if this has any publish event.
   */
  bool HasPublishEvents() const override {
    return !publish_events_.empty();
  }

  /**
   * Returns true if this has any discrete update event.
   */
  bool HasDiscreteUpdateEvents() const override {
    return !discrete_update_events_.empty();
  }

  /**
   * Returns true if this has any unrestricted update event.
   */
  bool HasUnrestrictedUpdateEvents() const override {
    return !unrestricted_update_events_.empty();
  }

  /**
   * Returns true if no event exists.
   */
  bool HasNoEvents() const override {
    return (publish_events_.empty() && discrete_update_events_.empty() &&
            unrestricted_update_events_.empty());
  }

  /**
   * Clears all events.
   */
  void Clear() override {
    owned_publish_events_.clear();
    owned_discrete_update_events_.clear();
    owned_unrestricted_update_events_.clear();
    publish_events_.clear();
    discrete_update_events_.clear();
    unrestricted_update_events_.clear();
  }

 protected:
  // These are protected for doxygen.

  /**
   * For each event type in @p other_info, adds all its events to this. Assumes
   * that @p other_info is an instance of LeafEventInfo. Aborts otherwise.
   *
   * Here is an example. Suppose this has the following events:
   * <pre>
   *   PublishEvent: {event1, event2, event3}
   *   DiscreteUpdateEvent: {event4, event5}
   * </pre>
   * @p other_info has:
   * <pre>
   *   PublishEvent: {event6}
   *   UnrestrictedUpdateEvent: {event7, event8}
   * </pre>
   * After calling DoMerge(other_info), this looks like this:
   * <pre>
   *   PublishEvent: {event1, event2, event3, event6}
   *   DiscreteUpdateEvent: {event4, event5}
   *   UnrestrictedUpdateEvent: {event7, event8}
   * </pre>
   */
  void DoMerge(const EventInfo* other_info) override {
    const LeafEventInfo* other = dynamic_cast<const LeafEventInfo*>(other_info);
    DRAKE_DEMAND(other != nullptr);

    const std::vector<const PublishEvent<T>*>& other_publish =
        other->get_publish_events();
    for (const PublishEvent<T>* other_event : other_publish) {
      other_event->add_to(this);
    }

    const std::vector<const DiscreteUpdateEvent<T>*>& other_discrete_update =
        other->get_discrete_update_events();
    for (const DiscreteUpdateEvent<T>* other_event : other_discrete_update) {
      other_event->add_to(this);
    }

    const std::vector<const UnrestrictedUpdateEvent<T>*>&
        other_unrestricted_update = other->get_unrestricted_update_events();
    for (const UnrestrictedUpdateEvent<T>* other_event :
         other_unrestricted_update) {
      other_event->add_to(this);
    }
  }

 private:
  // Owned event unique pointers.
  std::vector<std::unique_ptr<PublishEvent<T>>> owned_publish_events_;
  std::vector<std::unique_ptr<DiscreteUpdateEvent<T>>>
      owned_discrete_update_events_;
  std::vector<std::unique_ptr<UnrestrictedUpdateEvent<T>>>
      owned_unrestricted_update_events_;

  // Points to the corresponding unique pointers.
  std::vector<const PublishEvent<T>*> publish_events_;
  std::vector<const DiscreteUpdateEvent<T>*> discrete_update_events_;
  std::vector<const UnrestrictedUpdateEvent<T>*> unrestricted_update_events_;
};

}  // namespace systems
}  // namespace drake
