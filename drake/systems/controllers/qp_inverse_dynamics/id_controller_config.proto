syntax = "proto3";

package drake.systems.controllers.qp_inverse_dynamics;

// TODO(siyuanfeng): This probably should go to drake/common eventually.
message Vec3 {
    double x = 1;
    double y = 2;
    double z = 3;
}

// Contains parameters for specifying desired accelerations for the inverse
// dynamics controller. This can be used to specify for accelerations in the
// genearlized coordinates (N dimensional) or for spatial accelerations of
// tracked bodies (6 dimensional). When used for bodies, the first 3 dimensions
// of kp, kd, and weight correspond to the angular components.
// A way to generate the desired acceleration vd_d is through a simple PD law
// around a nominal setpoint (q*, v*, vd*) as:
// vd_d = kp * (q* - q) + kd * (v* - v) + vd*, where q and v are the measured
// position and velocity. vd_d is then used in the quadratic cost function in
// the QP inverse dynamics controller. The cost function typically takes the
// form of min_vd (vd_d - vd)^T * W * (vd_d - vd), where W is a diagonal
// weighting matrix. The kp, kd and diagonal terms of W can can be specified
// here.
message AccelerationConfig {
    // Name should be a valid group name in the corresponding
    // RigidBodyTreeAliasGroups.
    string name = 1;

    // For body tracking, the `kp` and `kd` gains are applied on the pose and
    // velocity measured in the world frame.
    repeated double kp = 2;
    repeated double kd = 3;

    // Positive `weight` means the corresponding desired acceleration will be
    // used as a cost term, and the value is used as the weight in the cost
    // function. 0 means the desired acceleration will be skipped, and negative
    // value means it will be used as a hard constraint.
    repeated double weight = 4;
}

// Contains parameters for specifying contact information for the inverse
// dynamics controller.
message ContactConfig {
    // Name should be a valid group name in the corresponding AliasGroups.
    string name = 1;

    // Positive weight means the corresponding acceleration will be used as a
    // cost term, 0 means it will be skipped, and negative value means it will
    // be used as a hard constraint.
    double weight = 2;

    // This is used to damp out nonzero contact velocity by setting the
    // desired contact acceleration to `-kd * v`, where v is the measured
    // contact velocity.
    double kd = 3;

    // Friction coefficient.
    double mu = 4;

    // The contact point and norm are specified in the body frame.
    repeated Vec3 contact_point = 5;
    Vec3 contact_normal = 6;

    // Number of basis vectors used to approximate the friction cone.
    int32 num_basis_per_contact_point = 7;
}

// Contains parameters for the inverse dynamics controller. There are 4
// major categories: contact related (`contact` and
// `contact_force_basis_weight`), body acceleration (`body_motion`),
// centroidal momentum (`centroidal_momentum`) and acceleration in the
// generalized coordinates (`dof_motion`).
message InverseDynamicsControllerConfig {
    // Name of this set of parameters. Used to distinguish different sets of
    // parameters, e.g. walking_params vs manipulation_params.
    string name = 1;

    // Centroidal momentum.
    AccelerationConfig centroidal_momentum = 2;

    // Body acceleration.
    AccelerationConfig default_body_motion = 3;
    repeated AccelerationConfig body_motion = 4;

    // Acceleration in the generalized coordinates.
    AccelerationConfig default_dof_motion = 5;
    repeated AccelerationConfig dof_motion = 6;

    // Contact information.
    ContactConfig default_contact = 7;
    repeated ContactConfig contact = 8;

    // Regularization weight of the contact force basis.
    double contact_force_basis_weight = 9;
}
