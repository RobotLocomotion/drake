# -*- python -*-

load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_binary",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_package_library",
)
load("//tools/lint:lint.bzl", "add_lint_tests")
load("@drake//tools/workspace:forward_files.bzl", "forward_files")
load("//tools/workspace/dm_control:files.bzl", "dm_control_mujoco_files")

filegroup(
    name = "test_models",
    testonly = 1,
    srcs = glob([
        "test/**/*.config",
        "test/**/*.obj",
        "test/**/*.sdf",
        "test/**/*.forced_nesting_sdf",
        "test/**/*.urdf",
        "test/**/*.xml",
        "test/**/*.png",
    ]),
    visibility = [
        "//visibility:public",
    ],
)

drake_cc_package_library(
    name = "parsing",
    visibility = [
        "//visibility:public",
    ],
    deps = [
        ":detail_misc",
        ":detail_parsing_workspace",
        ":detail_sdf_geometry",
        ":detail_sdf_parser",
        ":detail_urdf_parser",
        ":model_directives",
        ":package_map",
        ":parser",
        ":process_model_directives",
        ":scoped_names",
    ],
)

drake_cc_library(
    name = "package_map",
    srcs = [
        "package_map.cc",
    ],
    hdrs = [
        "package_map.h",
    ],
    data = [
        "//:package.xml",
    ],
    visibility = [
        "//visibility:public",
    ],
    interface_deps = [
        "//common:essential",
    ],
    deps = [
        "//common",
        "//common:filesystem",
        "@tinyxml2",
    ],
)

# For simplicity in dependency management (e.g., prevent exposing `sdformat`),
# we make all `detail_*` headers and libraries private. For more info, see
# #7451.

drake_cc_library(
    name = "detail_misc",
    srcs = [
        "detail_common.cc",
        "detail_ignition.cc",
        "detail_path_utils.cc",
        "detail_tinyxml.cc",
        "detail_tinyxml2_diagnostic.cc",
    ],
    hdrs = [
        "detail_common.h",
        "detail_ignition.h",
        "detail_path_utils.h",
        "detail_tinyxml.h",
        "detail_tinyxml2_diagnostic.h",
    ],
    install_hdrs_exclude = [
        "detail_common.h",
        "detail_ignition.h",
        "detail_path_utils.h",
        "detail_tinyxml.h",
        "detail_tinyxml2_diagnostic.h",
    ],
    visibility = [
        "//visibility:private",
    ],
    deps = [
        ":package_map",
        "//common:diagnostic_policy",
        "//common:essential",
        "//common:filesystem",
        "//geometry:proximity_properties",
        "//math:geometric_transform",
        "//multibody/plant",
        "@sdformat",
        "@tinyxml2",
    ],
)

drake_cc_library(
    name = "detail_sdf_geometry",
    srcs = [
        "detail_sdf_geometry.cc",
    ],
    hdrs = [
        "detail_sdf_geometry.h",
    ],
    install_hdrs_exclude = [
        "detail_sdf_geometry.h",
    ],
    visibility = [
        "//visibility:private",
    ],
    deps = [
        ":detail_misc",
        ":package_map",
        "//common:diagnostic_policy",
        "//geometry:geometry_instance",
        "//geometry:geometry_roles",
        "//geometry:shape_specification",
        "//multibody/plant:coulomb_friction",
        "@sdformat",
    ],
)

drake_cc_library(
    name = "detail_sdf_parser",
    srcs = [
        "detail_sdf_parser.cc",
    ],
    hdrs = [
        "detail_sdf_parser.h",
    ],
    install_hdrs_exclude = [
        "detail_sdf_parser.h",
    ],
    visibility = [
        "//visibility:private",
    ],
    deps = [
        ":detail_misc",
        ":detail_parsing_workspace",
        ":detail_sdf_geometry",
        ":detail_urdf_parser",
        ":scoped_names",
        "//multibody/plant",
        "@sdformat",
    ],
)

drake_cc_library(
    name = "detail_urdf_parser",
    srcs = [
        "detail_urdf_geometry.cc",
        "detail_urdf_parser.cc",
    ],
    hdrs = [
        "detail_urdf_geometry.h",
        "detail_urdf_parser.h",
    ],
    install_hdrs_exclude = [
        "detail_urdf_geometry.h",
        "detail_urdf_parser.h",
    ],
    visibility = [
        "//visibility:private",
    ],
    deps = [
        ":detail_misc",
        ":detail_parsing_workspace",
        ":scoped_names",
        "//common:filesystem",
        "@fmt",
        "@tinyxml2",
    ],
)

drake_cc_library(
    name = "detail_mujoco_parser",
    srcs = [
        "detail_mujoco_parser.cc",
    ],
    hdrs = [
        "detail_mujoco_parser.h",
    ],
    install_hdrs_exclude = [
        "detail_mujoco_parser.h",
    ],
    # TODO(russt): Include this in the parsing package upon completion
    # of issue #16369.
    tags = ["exclude_from_package"],
    visibility = [
        "//visibility:private",
    ],
    deps = [
        ":detail_misc",
        ":scoped_names",
        "//multibody/plant",
        "@fmt",
        "@tinyxml2",
    ],
)

drake_cc_library(
    name = "detail_parsing_workspace",
    hdrs = [
        "detail_parsing_workspace.h",
    ],
    visibility = [
        "//visibility:private",
    ],
    deps = [
        ":package_map",
        "//common:diagnostic_policy",
        "//multibody/plant",
    ],
)

drake_cc_library(
    name = "parser",
    srcs = [
        "parser.cc",
    ],
    hdrs = [
        "parser.h",
    ],
    visibility = [
        "//visibility:public",
    ],
    interface_deps = [
        ":package_map",
        "//common:diagnostic_policy",
        "//multibody/plant",
    ],
    deps = [
        ":detail_parsing_workspace",
        ":detail_sdf_parser",
        ":detail_urdf_parser",
        "//common:filesystem",
    ],
)

drake_cc_library(
    name = "model_directives",
    hdrs = [
        "model_directives.h",
    ],
    visibility = [
        "//visibility:public",
    ],
    deps = [
        "//common:essential",
        "//common:name_value",
        "//common/schema:transform",
        "//math:geometric_transform",
    ],
)

drake_cc_library(
    name = "process_model_directives",
    srcs = ["process_model_directives.cc"],
    hdrs = ["process_model_directives.h"],
    visibility = [
        "//visibility:public",
    ],
    interface_deps = [
        ":model_directives",
        ":parser",
        "//multibody/plant",
    ],
    deps = [
        ":scoped_names",
        "//common:filesystem",
        "//common:find_resource",
        "//common/yaml",
    ],
)

drake_cc_library(
    name = "scoped_names",
    srcs = ["scoped_names.cc"],
    hdrs = ["scoped_names.h"],
    deps = [
        "//multibody/plant",
    ],
)

drake_cc_library(
    name = "test_loaders",
    testonly = 1,
    srcs = [
        "test/test_loaders.cc",
    ],
    hdrs = [
        "test/test_loaders.h",
    ],
    visibility = [
        "//visibility:private",
    ],
    deps = [
        ":detail_misc",
        ":parser",
        "//common:find_resource",
    ],
)

drake_cc_library(
    name = "diagnostic_policy_test_base",
    testonly = 1,
    hdrs = [
        "test/diagnostic_policy_test_base.h",
    ],
    visibility = [
        "//visibility:private",
    ],
    deps = [
        "//common:diagnostic_policy",
        "@gtest//:without_main",
    ],
)

drake_cc_googletest(
    name = "acrobot_parser_test",
    data = [
        ":test_models",
        "//multibody/benchmarks/acrobot:models",
    ],
    deps = [
        ":test_loaders",
        "//common/test_utilities",
        "//multibody/benchmarks/acrobot",
        "//multibody/benchmarks/acrobot:make_acrobot_plant",
    ],
)

drake_cc_googletest(
    name = "common_parser_test",
    data = [
        ":test_models",
    ],
    deps = [
        ":test_loaders",
        "//common/test_utilities",
    ],
)

drake_cc_binary(
    name = "parser_manual_test",
    testonly = 1,
    srcs = ["test/parser_manual_test.cc"],
    add_test_rule = 1,
    data = [":test_models"],
    test_rule_args = [
        "multibody/parsing/test/urdf_parser_test/joint_parsing_test.urdf",
    ],
    deps = [
        ":parser",
        "//common:add_text_logging_gflags",
        "@gflags",
    ],
)

drake_cc_googletest(
    name = "parser_test",
    data = [
        ":test_models",
        "//multibody/benchmarks/acrobot:models",
    ],
    deps = [
        ":parser",
        "//common:filesystem",
        "//common:find_resource",
        "//common/test_utilities",
    ],
)

filegroup(
    name = "process_model_directives_test_models",
    testonly = True,
    data = glob(["test/process_model_directives_test/**"]),
    visibility = [
        "//bindings/pydrake/multibody:__pkg__",
    ],
)

drake_cc_googletest(
    name = "process_model_directives_test",
    data = [
        ":process_model_directives_test_models",
    ],
    deps = [
        ":process_model_directives",
        ":scoped_names",
        "//common:filesystem",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "scoped_names_test",
    data = [
        ":test_models",
    ],
    deps = [
        ":parser",
        ":scoped_names",
        "//common:filesystem",
        "//common:find_resource",
        "//common/test_utilities",
    ],
)

drake_cc_googletest(
    name = "model_directives_test",
    deps = [
        ":model_directives",
        "//common/yaml",
    ],
)

drake_cc_googletest(
    name = "detail_common_test",
    deps = [
        ":detail_misc",
    ],
)

drake_cc_googletest(
    name = "detail_sdf_parser_test",
    data = [
        ":test_models",
        "//manipulation/models/iiwa_description:models",
        "//multibody/benchmarks/acrobot:models",
    ],
    deps = [
        ":detail_sdf_parser",
        "//common:filesystem",
        "//common:find_resource",
        "//common/test_utilities",
    ],
)

drake_cc_googletest(
    name = "detail_urdf_parser_test",
    data = [
        ":test_models",
        "//examples/atlas:models",
        "//manipulation/models/iiwa_description:models",
        "//multibody/benchmarks/acrobot:models",
    ],
    deps = [
        ":detail_urdf_parser",
        ":diagnostic_policy_test_base",
        "//common:filesystem",
        "//common:find_resource",
        "//common/test_utilities",
        "//multibody/benchmarks/acrobot",
        "//multibody/benchmarks/acrobot:make_acrobot_plant",
    ],
)

_DM_CONTROL_MUJOCO_FILES = forward_files(
    srcs = ["@dm_control//:" + x for x in dm_control_mujoco_files()],
    dest_prefix = "",
    strip_prefix = "@dm_control//:",
    visibility = ["//visibility:private"],
)

drake_cc_googletest(
    name = "detail_mujoco_parser_test",
    data = _DM_CONTROL_MUJOCO_FILES,
    deps = [
        ":detail_mujoco_parser",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "detail_sdf_geometry_test",
    data = [
        ":test_models",
    ],
    deps = [
        ":detail_sdf_geometry",
        "//common:filesystem",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
        "//math:geometric_transform",
    ],
)

drake_cc_googletest(
    name = "detail_urdf_geometry_test",
    data = [
        ":test_models",
    ],
    deps = [
        ":detail_urdf_parser",
        ":diagnostic_policy_test_base",
        "//common:find_resource",
        "//common/test_utilities",
    ],
)

drake_cc_googletest(
    name = "package_map_test",
    data = [
        ":test_models",
    ],
    deps = [
        ":package_map",
        "//common:filesystem",
        "//common:find_resource",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "drake_manifest_resolution_test",
    data = [
        ":test_models",
    ],
    deps = [
        "//common:find_resource",
        "//multibody/parsing",
        "//systems/framework:diagram_builder",
    ],
)

drake_cc_googletest(
    name = "detail_path_utils_test",
    data = [
        ":test_models",
    ],
    deps = [
        ":detail_misc",
        "//common:filesystem",
        "//common/test_utilities",
    ],
)

drake_cc_googletest(
    name = "detail_tinyxml_test",
    deps = [
        ":detail_misc",
        ":diagnostic_policy_test_base",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "detail_tinyxml2_diagnostic_test",
    deps = [
        ":detail_misc",
        ":diagnostic_policy_test_base",
    ],
)

add_lint_tests()
