#usda 1.0
(
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)
def Xform "World"
{
    def PhysicsScene "physicsScene"
    {
        vector3f physics:gravityDirection = (0, 0, -1)
        float physics:gravityMagnitude = 981
    }

    def Cube "boxActor" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        float3[] extent = [(-12.5, -12.5, -12.5), (12.5, 12.5, 12.5)]
        vector3f physics:angularVelocity = (270, 0, 0)
        float physics:mass = 1
        vector3f physics:velocity = (2, 1, 2)
        color3f[] primvars:displayColor = [(0.11764706, 0.23529412, 1)]
        double size = 25
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 220)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "mainFloorActor" (
        prepend apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        color3f[] primvars:displayColor = [(0.5, 0.75, 1.0)]
        double size = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (720, 720, 10)
        double3 xformOp:translate = (0, 0, -80)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Sphere "Ellipsoid" (
        prepend apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        double radius = 50
        color3f[] primvars:displayColor = [(0.8, 0.5, 0.5)]
        custom bool refinementEnableOverride = 1
        custom int refinementLevel = 2
        double3 xformOp:rotateXYZ = (-20, 0, 0)
        double3 xformOp:scale = (1, 2, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "CapsuleXform"
    {
        double3 xformOp:rotateXYZ = (-90, 0, 45)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (200, 200, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Capsule "Capsule" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-25, -25, -50), (25, 25, 50)]
            double height = 50
            double radius = 25
            color3f[] primvars:displayColor = [(0.5, 0.8, 0.5)]
            custom bool refinementEnableOverride = 1
            custom int refinementLevel = 2
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }

    def Xform "CylinderXform"
    {
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-200, 200, 1.9326762412674725e-12)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Xform "CylinderXform2"
        {
            double3 xformOp:rotateXYZ = (0, 45, 0)
            double3 xformOp:scale = (1, 1, 2)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            def Cylinder "Cylinder" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                uniform token axis = "Z"
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                double height = 100
                double radius = 50
                color3f[] primvars:displayColor = [(0.5, 0.5, 0.9)]
                custom bool refinementEnableOverride = 1
                custom int refinementLevel = 2
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 0.5)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }
    }

    def Sphere "Sphere" (
        prepend apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        double radius = 50
        color3f[] primvars:displayColor = [(0.5, 0.9, 0.9)]
        custom bool refinementEnableOverride = 1
        custom int refinementLevel = 2
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (200, -200, 6.59383658785373e-12)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Cube "Cube" (
        prepend apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        double size = 100
        color3f[] primvars:displayColor = [(0.3, 0.5, 1.0)]
        double3 xformOp:rotateXYZ = (45, 45, 45)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-200, -200, 8.071765478234738e-12)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}
