load("@drake//tools/skylark:cc.bzl", "cc_library", "cc_binary")

#- * - python - * -
load("//tools/lint:lint.bzl", "add_lint_tests")
load(
    "//tools/skylark:drake_cc.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_package_library",
)

load(
    "//tools/performance:defs.bzl",
    "drake_cc_googlebench_binary",
    "drake_py_experiment_binary",
)

package(
    default_visibility = ["//visibility:public"],
)

cc_library(
    name = "sparse_grid",
    srcs = [
        "sparse_grid.cc",
    ],
    hdrs = [
        "sparse_grid.h",
        "particles.h",
    ],
    deps = [
        ":math",
        "//common:essential",
        "//tools/workspace/spgrid",
    ],
)

drake_cc_library(
    name = "particles",
    hdrs = [
        "particles.h",
    ],
    deps = [
        "//common:essential",
    ],
)

drake_cc_library(
    name = "math",
    hdrs = [
        "math.h",
    ],
    deps = [
        ":simd_scalar",
        "//common:essential",
    ],
)

cc_library(
    name = "transfer",
    srcs = [
        "transfer.cc",
    ],
    hdrs = [
        "transfer.h",
    ],
    copts = ["-fopenmp", "-march=native"],
    linkopts = ["-fopenmp"],
    deps = [
        ":particles",
        ":sparse_grid",
        ":simd_scalar",
        "//common:essential",
        "//common:parallelism",
    ],
)

# This setting governs when we'll compile with Intel AVX2 and FMA enabled.
# Compiling for Broadwell (or later) gets those instructions.
#
# Note that we have runtime detection of CPU support; this flag only affects
# what happens at build time, i.e., will the compiler support it.
config_setting(
    name = "build_avx2_fma",
    constraint_values = [
        "@platforms//cpu:x86_64",
        # On macOS, we opt-out of this feature (even for Apple hardware that
        # supports it) to reduce our test matrix burden for the deprecated
        # architecture.
        "@platforms//os:linux",
    ],
)

drake_cc_library(
    name = "simd_scalar",
    srcs = ["simd_scalar.cc", "simd_operations.cc"],
    hdrs = ["simd_scalar.h", "simd_operations.h", "eigen_specializations.h"],
    copts = select({
        ":build_avx2_fma": ["-march=broadwell"],
        "//conditions:default": [],
    }),
    deps = [
        "@highway_internal//:hwy",
        "//common:essential",
    ],
)

drake_cc_googletest(
    name = "sparse_grid_test",
    deps = [
        ":sparse_grid",
    ],
)

drake_cc_googletest(
    name = "math_test",
    deps = [
        ":math",
    ],
)

drake_cc_googletest(
    name = "simd_scalar_test",
    copts = ["-march=native"],
    deps = [
        ":simd_scalar",
    ],
)

drake_cc_googletest(
    name = "transfer_test",
    srcs = [
        "test/transfer_test.cc",
    ],
    deps = [
        ":transfer",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googlebench_binary(
    name = "transfer_benchmark",
    srcs = ["transfer_benchmark.cc"],
    add_test_rule = True,
    deps = [
        ":transfer",
        "//common:add_text_logging_gflags",
        "//tools/performance:fixture_common",
        "//tools/performance:gflags_main",
    ],
)

drake_py_experiment_binary(
    name = "transfer_experiment",
    googlebench_binary = ":transfer_benchmark",
)

cc_binary(
    name = "p2g2p",
    srcs = ["p2g2p.cc"],
    testonly = True,
    deps = [
        ":transfer",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

cc_binary(
    name = "g2p",
    srcs = ["g2p.cc"],
    testonly = True,
    deps = [
        ":transfer",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

cc_binary(
    name = "p2g",
    srcs = ["p2g.cc"],
    testonly = True,
    deps = [
        ":transfer",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

# add_lint_tests()
