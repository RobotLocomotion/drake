<?xml version="1.0" ?>
<sdf version="1.6">
    <!-- NOTE: This should parallel filter_groups_in_file.urdf
     See the URDF for documentation on the purpose/structure of this file. -->
    <model name="sphere_chain">
        <link name="sphereA">
            <inertial>
                <mass>1.</mass>
            </inertial>
            <collision name="collideA">
                <geometry>
                    <sphere>
                        <radius>1</radius>
                    </sphere>
                </geometry>
            </collision>
        </link>
        <link name="sphereB">
            <inertial>
                <mass>1.</mass>
            </inertial>
            <collision name="collideB">
                <geometry>
                    <sphere>
                        <radius>1</radius>
                    </sphere>
                </geometry>
            </collision>
        </link>
        <link name="sphereC">
            <inertial>
                <mass>1.</mass>
            </inertial>
            <collision name="collideC">
                <geometry>
                    <sphere>
                        <radius>1</radius>
                    </sphere>
                </geometry>
            </collision>
        </link>
        <link name="sphereD">
            <inertial>
                <mass>1.</mass>
            </inertial>
            <collision name="collideD">
                <geometry>
                    <sphere>
                        <radius>1</radius>
                    </sphere>
                </geometry>
            </collision>
        </link>

        <joint name="jointAB" type="revolute">
            <parent>sphereA</parent>
            <child>sphereB</child>
        </joint>
        <joint name="jointBC" type="revolute">
            <parent>sphereB</parent>
            <child>sphereC</child>
        </joint>
        <joint name="jointCD" type="revolute">
            <parent>sphereC</parent>
            <child>sphereD</child>
        </joint>

        <!-- These collision filter groups implement filters in four different ways:
          1. One-sided filtering where one group unilaterally ignores the other group.
          2. Two-sided filtering where two groups ignore each other.
          3. Self filtering where a group ignores itself.
          -->

        <!-- A is in a group that unilaterally ignores the group C is in. This
        prevents non-sibling spheres A & C from reporting collisions. -->
        <collision_filter_group name="groupC">
            <member link="sphereC"/>
        </collision_filter_group>
        <collision_filter_group name="one_sided">
            <member link="sphereA"/>
            <ignored_collision_filter_group collision_filter_group="groupC"/>
        </collision_filter_group>

        <!-- A and D are in groups that ignore each other. This prevents non-sibling
        spheres A & D from reporting collisions. -->
        <collision_filter_group name="groupA">
            <member link="sphereA"/>
            <ignored_collision_filter_group collision_filter_group="groupD"/>
        </collision_filter_group>
        <collision_filter_group name="groupD">
            <member link="sphereD"/>
            <ignored_collision_filter_group collision_filter_group="groupA"/>
        </collision_filter_group>

        <!-- B and D belong to the same group that ignores itself. This prevents
        non-sibling spheres B & D from reporting collisions. -->
        <collision_filter_group name="self_group">
            <member link="sphereB"/>
            <member link="sphereD"/>
            <ignored_collision_filter_group collision_filter_group="self_group"/>
        </collision_filter_group>
    </model>
</sdf>