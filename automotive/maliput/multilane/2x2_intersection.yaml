# -*- yaml -*-
---
# Implements a basic X-intersection between two 2-lane roads.
#
# Distances are meters; angles are degrees.
maliput_multilane_builder:
  id: "basic_two_lane_x_intersection"
  computation_policy: "prefer-accuracy"
  scale_length: 1
  lane_width: 3.75
  left_shoulder: 2.5
  right_shoulder: 2.5
  elevation_bounds: [0, 5]
  linear_tolerance: .01
  angular_tolerance: 0.5
  points:
    west_start_point:
      xypoint: [-59.375, -1.875, 0]  # x,y, heading
      zpoint: [0, 0, 0, 0]  # z, z_dot, theta (superelevation), theta_dot
    west_entry_point:
      xypoint: [-9.375, -1.875, 0]
      zpoint: [0, 0, 0, 0]
    east_entry_point:
      xypoint: [9.375, -1.875, 0]
      zpoint: [0, 0, 0, 0]
    east_start_point:
      xypoint: [59.375, -1.875, 0]
      zpoint: [0, 0, 0, 0]
    south_start_point:
      xypoint: [1.875, -59.375, 90]
      zpoint: [0, 0, 0, 0]
    south_entry_point:
      xypoint: [1.875, -9.375, 90]
      zpoint: [0, 0, 0, 0]
    north_entry_point:
      xypoint: [1.875, 9.375, 90]
      zpoint: [0, 0, 0, 0]
    north_start_point:
      xypoint: [1.875, 59.375, 90]
      zpoint: [0, 0, 0, 0]
  connections:
    # Straight through lanes.
    w_segment:
      lanes: [2, 0, 0]  # num_lanes, ref_lane, r_ref
      start: ["ref", "points.west_start_point.forward"]
      length: 50
      z_end: ["ref", [0, 0, 0]]
    ew_intersection_segment:
       lanes: [2, 0, 0]
       start: ["ref", "points.west_entry_point.forward"]
       length: 18.75
       z_end: ["ref", [0, 0, 0]]
    e_segment:
       lanes: [2, 0, 0]
       start: ["ref", "points.east_entry_point.forward"]
       length: 50
       z_end: ["ref", [0, 0, 0]]
    s_segment:
      lanes: [2, 0, 0]
      start: ["ref", "points.south_start_point.forward"]
      length: 50
      z_end: ["ref", [0, 0, 0]]
    ns_intersection_segment:
       lanes: [2, 0, 0]
       start: ["ref", "points.south_entry_point.forward"]
       length: 18.75
       z_end: ["ref", [0, 0, 0]]
    n_segment:
       lanes: [2, 0, 0]
       start: ["ref", "points.north_entry_point.forward"]
       length: 50
       z_end: ["ref", [0, 0, 0]]
    # Right turn lanes.
    east_right_turn_segment:
       lanes: [1, 0, 0]
       start: ["lane.0", "connections.ew_intersection_segment.start.0.forward"]
       arc: [7.5, -90]  # radius, d_theta
       explicit_end: ["lane.0", "connections.ns_intersection_segment.start.0.forward"]
    west_right_turn_segment:
       lanes: [1, 0, 0]
       start: ["lane.0", "connections.ew_intersection_segment.end.1.reverse"]
       arc: [7.5, -90]
       explicit_end: ["lane.0", "connections.ns_intersection_segment.end.0.forward"]
    north_right_turn_segment:
       lanes: [1, 0, 0]
       start: ["lane.0", "connections.ns_intersection_segment.start.0.forward"]
       arc: [7.5, -90]
       explicit_end: ["lane.0", "connections.ew_intersection_segment.end.0.forward"]
    south_right_turn_segment:
       lanes: [1, 0, 0]
       start: ["lane.0", "connections.ns_intersection_segment.end.1.reverse"]
       arc: [7.5, -90]
       explicit_end: ["lane.0", "connections.ew_intersection_segment.start.1.forward"]
    # Left turn lanes.
    east_left_turn_segment:
       lanes: [1, 0, 0]
       start: ["lane.0", "connections.ew_intersection_segment.start.0.forward"]
       arc: [11.25, 90]
       explicit_end: ["lane.0", "connections.ns_intersection_segment.end.0.forward"]
    west_left_turn_segment:
       lanes: [1, 0, 0]
       start: ["lane.0", "connections.ew_intersection_segment.end.1.reverse"]
       arc: [11.25, 90]
       explicit_end: ["lane.0", "connections.ns_intersection_segment.end.1.forward"]
    north_left_turn_segment:
       lanes: [1, 0, 0]
       start: ["lane.0", "connections.ns_intersection_segment.start.0.forward"]
       arc: [11.25, 90]
       explicit_end: ["lane.0", "connections.ew_intersection_segment.end.1.forward"]
    south_left_turn_segment:
       lanes: [1, 0, 0]
       start: ["lane.0", "connections.ns_intersection_segment.end.1.reverse"]
       arc: [11.25, 90]
       explicit_end: ["lane.0", "connections.ew_intersection_segment.start.0.forward"]

RoadRulebook:
  RightOfWayRules:
    # Straight-through rules have both Go and Stop states and yield to no other
    # rules.
    - ID: NorthStraight
      States:
        Go: []
        Stop: []
      Zone:
      - Lane: l:ns_intersection_segment_0
        SRange: [0, 18.75]
      ZoneType: StopExcluded
    - ID: SouthStraight
      States:
        Go: []
        Stop: []
      Zone:
      - Lane: l:ns_intersection_segment_1
    - ID: EastStraight
      States:
        Go: []
        Stop: []
      Zone:
      - Lane: l:ew_intersection_segment_0
    - ID: WestStraight
      States:
        Go: []
        Stop: []
      Zone:
      - Lane: l:ew_intersection_segment_1
    # Right-turn rules only have both Go and StopThenGo states to model an
    # intersection that allows turn-on-red. When in state Go, they yield to no
    # other rule since their original direction of travel will have right-of-way.
    # When in state StopThenGo, they yield to both perpendicular straight-through
    # rules and antiparallel left-turn rules since their original direction of
    # travel will not have right-of-way.
    - ID: NorthRightTurn
      States:
        Go: [SouthLeftTurn]
        StopThenGo: [EastStraight, SouthLeftTurn]
      Zone:
      - Lane: l:north_right_turn_segment_0
    - ID: SouthRightTurn
      States:
        Go: [NorthLeftTurn]
        StopThenGo: [WestStraight, NorthLeftTurn]
      Zone:
      - Lane: l:south_right_turn_segment_0
    - ID: EastRightTurn
      States:
        Go: [WestLeftTurn]
        StopThenGo: [SouthStraight, WestLeftTurn]
      Zone:
      - Lane: l:east_right_turn_segment_0
    - ID: WestRightTurn
      States:
        Go: [EastLeftTurn]
        StopThenGo: [NorthStraight, EastLeftTurn]
      Zone:
      - Lane: l:west_right_turn_segment_0
     # Left-turn rules have both Go and Stop states. They yield to antiparallel
     # straight-through rules.
    - ID: NorthLeftTurn
      States:
        Go: [SouthStraight]
        Stop: []
      Zone:
      - Lane: l:north_left_turn_segment_0
    - ID: SouthLeftTurn
      States:
        Go: [NorthStraight]
        Stop: []
      Zone:
      - Lane: l:south_left_turn_segment_0
    - ID: EastLeftTurn
      States:
        Go: [WestStraight]
        Stop: []
      Zone:
      - Lane: l:east_left_turn_segment_0
    - ID: WestLeftTurn
      States:
        Go: [EastStraight]
        Stop: []
      Zone:
      - Lane: l:west_left_turn_segment_0

PhaseRings:
- ID: 2x2Intersection
  Rules: [NorthStraight, SouthStraight, EastStraight, WestStraight,
          NorthRightTurn, SouthRightTurn, EastRightTurn, WestRightTurn,
          NorthLeftTurn, SouthLeftTurn, EastLeftTurn, WestLeftTurn]
  Phases:
  - ID: NorthSouthPhase
    RightOfWayRuleStates: {NorthStraight: Go, SouthStraight: Go,
                           NorthLeftTurn: Go, SouthLeftTurn: Go,
                           NorthRightTurn: Go, SouthRightTurn: Go,
                           EastRightTurn: StopThenGo, WestRightTurn: StopThenGo}
  - ID: EastWestPhase
    RightOfWayRuleStates: {EastStraight: Go, WestStraight: Go,
                           EastLeftTurn: Go, WestLeftTurn: Go,
                           EastRightTurn: Go, WestRightTurn: Go,
                           NorthRightTurn: StopThenGo, SouthRightTurn: StopThenGo}
