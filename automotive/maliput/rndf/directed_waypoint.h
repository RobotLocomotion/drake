#pragma once

#include <utility>
#include <vector>

#include "ignition/math/Vector3.hh"
#include "ignition/rndf/UniqueId.hh"

#include "drake/common/drake_copyable.h"

namespace drake {
namespace maliput {
namespace rndf {

/// A container that holds the information needed by a Builder to construct a
/// Lane from a sequence of ignition::rndf::Waypoint objects.
class DirectedWaypoint {
 public:
  DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN(DirectedWaypoint)

  /// Default constructor.
  /// All the class attributes will be set with default values. Consequently,
  /// the id will be initialized with an invalid ignition::rndf::UniqueId (-1,
  /// -1, -1), position and tangent will be zero 3D vectors and, is_entry() and
  /// is_exit() will be false.
  DirectedWaypoint() = default;

  /// Constructor.
  /// @param id RNDF waypoint's ID. It may be generated by the Builder or a copy
  /// of what has been parsed by ignition::rndf::RNDF.
  /// @param position The 3D coordinates of the knot in the api::GeoPosition
  /// frame.
  /// @param tangent The tangent vector at @p position in the api::GeoPosition
  /// frame.
  /// @param is_entry True if the original RNDF waypoint acts as the entry for
  /// the RNDF lane.
  /// @param is_exit True if the original RNDF waypoint acts as the exit for the
  /// RNDF lane.
  DirectedWaypoint(const ignition::rndf::UniqueId& id,
                   const ignition::math::Vector3d& position,
                   const ignition::math::Vector3d& tangent, bool is_entry,
                   bool is_exit)
      : id_(id),
        position_(position),
        tangent_(tangent),
        is_entry_(is_entry),
        is_exit_(is_exit) {}

  const ignition::rndf::UniqueId& id() const { return id_; }

  void set_id(const ignition::rndf::UniqueId& id) { id_ = id; }

  const ignition::math::Vector3d& position() const { return position_; }

  void set_position(const ignition::math::Vector3d& position) {
    position_ = position;
  }

  const ignition::math::Vector3d& tangent() const { return tangent_; }

  void set_tangent(const ignition::math::Vector3d& tangent) {
    tangent_ = tangent;
  }

  bool is_entry() const { return is_entry_; }

  void set_is_entry(bool is_entry) { is_entry_ = is_entry; }

  bool is_exit() const { return is_exit_; }

  void set_is_exit(bool is_exit) { is_exit_ = is_exit; }

  /// Gets the bounding box of a vector of @p directed_waypoints. It
  /// gets the minimum and maximum x and y coordinates from all the items.
  /// z coordinate will always be zero as RNDF is a flat map.
  /// @param directed_waypoints A vector of DirectedWaypoints whose positions
  /// are evaluated to define the corners of a bounding box that holds them.
  /// @return A std::pair that holds two diagonal corners of the bounding box
  /// that encloses @p directed_waypoints. The pair's first value is the
  /// minimum x and y coordinate and the second value is the maximum x and y
  /// coordinate. When @p directed_waypoints is an empty vector, the returned
  /// pair are both zero vectors.
  static std::pair<ignition::math::Vector3d, ignition::math::Vector3d>
  CalculateBoundingBox(const std::vector<DirectedWaypoint>& directed_waypoints);

 private:
  // TODO(@agalbachicar) Uniqueness of the id_, when it is valid, should be
  // verified and guaranteed.
  // The ID.
  ignition::rndf::UniqueId id_;
  // A 3D vector which is the coordinate of the waypoint in the api::GeoPosition
  // frame.
  ignition::math::Vector3d position_;
  // A 3D vector which is the tangent of the waypoint at position_.
  ignition::math::Vector3d tangent_;
  // Tells whether or not the original RNDF waypoint acts as an entry for the
  // RNDF lane.
  bool is_entry_{false};
  // Tells whether or not the original RNDF waypoint acts as an exit for the
  // RNDF lane.
  bool is_exit_{false};
};

}  // namespace rndf
}  // namespace maliput
}  // namespace drake
