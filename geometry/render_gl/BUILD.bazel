load("@bazel_skylib//lib:selects.bzl", "selects")
load(
    "//tools/skylark:drake_cc.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_package_library",
)
load(
    "//tools/skylark:drake_optional.bzl",
    "drake_cc_optional_googletest",
    "drake_cc_optional_library",
    "drake_cc_variant_library",
)
load("//tools/skylark:test_tags.bzl", "vtk_test_tags")

# This render_gl package is only implemented on Linux and when
# //tools/flags:with_render_gl is True. When either of these conditions is unmet
# (i.e., on macOS, or when the flag is False), only factory is available and it
# will always throw an exception. When met, the factory is the sole public
# entry point, even though the implementation is made up of several other
# distinct components.
#
# Because the components are only conditionally available, and because we do
# not want Drake's installed headers to depend on GL headers, we only install
# the header for the factory and nothing else.
#
# Similarly, only the package-level library //geometry/render_gl is public as a
# Bazel target; all of the other targets are private.

package(default_visibility = ["//visibility:private"])

config_setting(
    name = "enabled",
    flag_values = {"//tools/flags:with_render_gl": "True"},
)

selects.config_setting_group(
    name = "with_render_gl_and_linux",
    match_all = [
        ":enabled",
        "//tools/skylark:linux",
    ],
)

drake_cc_package_library(
    name = "render_gl",
    visibility = ["//visibility:public"],
    deps = [
        ":factory",
        ":render_engine_gl_params",
    ],
)

config_setting(
    name = "with_render_vtk",
    flag_values = {"//tools/flags:with_render_vtk": "True"},
)

selects.config_setting_group(
    name = "with_render_gl_or_vtk",
    match_any = [
        ":enabled",
        ":with_render_vtk",
    ],
)

selects.config_setting_group(
    name = "with_render_gl_or_vtk_and_linux",
    match_all = [
        ":with_render_gl_or_vtk",
        "//tools/skylark:linux",
    ],
)

drake_cc_library(
    name = "internal_loaders",
    srcs = ["internal_loaders.cc"],
    hdrs = ["internal_loaders.h"],
    defines = select({
        ":with_render_gl_or_vtk_and_linux": ["HAS_RENDER_GL"],
        "//conditions:default": [],
    }),
    internal = True,
    visibility = [
        "//geometry/render_vtk:__pkg__",
    ],
    deps = [
        "//common:essential",
        "//common:unused",
    ] + select({
        ":with_render_gl_or_vtk_and_linux": [
            "@vtk_internal//:vtkglad",
            "@vtk_internal//:vtkx11",
        ],
        "//conditions:default": [],
    }),
)

drake_cc_optional_library(
    name = "internal_opengl_context",
    opt_in_condition = ":with_render_gl_and_linux",
    srcs = ["internal_opengl_context.cc"],
    hdrs = [
        "internal_opengl_context.h",
        "internal_opengl_includes.h",
    ],
    deps = [
        ":internal_loaders",
        "//common:essential",
        "//common:scope_exit",
        "//common:unused",
    ],
)

drake_cc_optional_library(
    name = "internal_opengl_geometry",
    opt_in_condition = ":with_render_gl_and_linux",
    hdrs = ["internal_opengl_geometry.h"],
    deps = [
        ":internal_opengl_context",
        ":internal_shader_program_data",
        "//geometry/render:render_label",
        "//math:geometric_transform",
    ],
)

drake_cc_optional_library(
    name = "internal_render_engine_gl",
    opt_in_condition = ":with_render_gl_and_linux",
    srcs = [
        "internal_render_engine_gl.cc",
    ],
    hdrs = [
        "internal_buffer_dim.h",
        "internal_render_engine_gl.h",
    ],
    deps = [
        ":internal_opengl_context",
        ":internal_opengl_geometry",
        ":internal_shader_program",
        ":internal_shape_meshes",
        ":internal_texture_library",
        ":render_engine_gl_params",
        "//common:diagnostic_policy",
        "//common:string_container",
        "//common/yaml:yaml_io",
        "//geometry/proximity:polygon_to_triangle_mesh",
        "//geometry/render:render_engine",
        "//geometry/render:render_mesh",
        "//systems/sensors:image",
        "@tinygltf_internal//:tinygltf",
    ],
)

drake_cc_variant_library(
    name = "factory",
    opt_in_condition = ":with_render_gl_and_linux",
    srcs_enabled = ["factory.cc"],
    srcs_disabled = ["no_factory.cc"],
    hdrs = ["factory.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":render_engine_gl_params",
        "//geometry/render:render_engine",
    ],
    implementation_deps_enabled = [
        ":internal_render_engine_gl",
    ],
)

drake_cc_library(
    name = "render_engine_gl_params",
    hdrs = ["render_engine_gl_params.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//common:name_value",
        "//geometry:rgba",
        "//geometry/render:light_parameter",
        "//geometry/render:render_label",
    ],
)

drake_cc_optional_library(
    name = "internal_shader_program",
    opt_in_condition = ":with_render_gl_and_linux",
    srcs = ["internal_shader_program.cc"],
    hdrs = [
        "internal_shader_program.h",
    ],
    deps = [
        ":internal_opengl_context",
        ":internal_shader_program_data",
        "//common:essential",
        "//geometry:geometry_roles",
        "//geometry/render:light_parameter",
        "//geometry/render:render_engine",
        "//math:geometric_transform",
    ],
)

drake_cc_optional_library(
    name = "internal_shader_program_data",
    opt_in_condition = ":with_render_gl_and_linux",
    hdrs = ["internal_shader_program_data.h"],
    deps = [
        "//common:copyable_unique_ptr",
        "//common:identifier",
        "//common:value",
    ],
)

drake_cc_optional_library(
    name = "internal_shape_meshes",
    opt_in_condition = ":with_render_gl_and_linux",
    srcs = ["internal_shape_meshes.cc"],
    hdrs = ["internal_shape_meshes.h"],
    deps = [
        ":internal_opengl_context",
        "//geometry/render:render_mesh",
    ],
    implementation_deps = [
        "//common:essential",
        "@tinyobjloader_internal//:tinyobjloader",
    ],
)

drake_cc_optional_library(
    name = "internal_texture_library",
    opt_in_condition = ":with_render_gl_and_linux",
    srcs = ["internal_texture_library.cc"],
    hdrs = ["internal_texture_library.h"],
    deps = [
        ":internal_opengl_context",
        "//common:essential",
        "//common:string_container",
    ],
    implementation_deps = [
        "//systems/sensors:image_io",
        "@vtk_internal//:vtkCommonCore",
        "@vtk_internal//:vtkCommonDataModel",
        "@vtk_internal//:vtkIOImage",
        "@vtk_internal//:vtkImagingCore",
    ],
)

drake_cc_optional_googletest(
    name = "internal_buffer_dim_test",
    opt_in_condition = ":with_render_gl_and_linux",
    deps = [
        ":internal_render_engine_gl",
    ],
)

drake_cc_optional_googletest(
    name = "internal_opengl_context_test",
    display = True,
    opt_in_condition = ":with_render_gl_and_linux",
    tags = [
        # GLX functions show up with bad reads, bad writes, possibly lost, and
        # definitely lost.  We will investigate soon but for now we'll omit the
        # memcheck tests in order to make progress on related code.
        # TODO(#12962) Investigate, fix or suppress, then re-enable this test.
        "no_memcheck",

        # Since migrating CI Jenkins jobs from Jammy to Noble, this test
        # causes the newly converted ASAN jobs to fail. It also fails for Noble
        # LSAN jobs since upgrading the provisioned images on 2025-09-01.
        # TODO(#23107) Investigate, fix or suppress, then re-enable this test.
        "no_asan",
        "no_lsan",
    ],
    deps = [
        ":internal_opengl_context",
    ],
)

drake_cc_optional_googletest(
    name = "internal_opengl_geometry_test",
    opt_in_condition = ":with_render_gl_and_linux",
    deps = [
        ":internal_opengl_geometry",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_optional_googletest(
    name = "internal_render_engine_gl_test",
    data = [
        "//examples/scene_graph:models",
        "//geometry:test_gltf_files",
        "//geometry:test_obj_files",
        "//geometry/render:test_models",
    ] + glob(["test/*.png"]),
    display = True,
    opt_in_condition = ":with_render_gl_and_linux",
    tags = vtk_test_tags(),
    deps = [
        ":internal_render_engine_gl",
        "//common:find_resource",
        "//common:temp_directory",
        "//common/test_utilities:expect_no_throw",
        "//common/test_utilities:expect_throws_message",
        "//geometry:read_gltf_to_memory",
        "//geometry/render:render_label",
        "//systems/sensors:image_io",
        "//systems/sensors/test_utilities:image_compare",
        "@gflags",
        "@nlohmann_internal//:nlohmann",
        "@tinygltf_internal//:tinygltf",
        "@vtk_internal//:vtkCommonCore",
        "@vtk_internal//:vtkCommonDataModel",
        "@vtk_internal//:vtkIOImage",
    ],
)

drake_cc_optional_googletest(
    name = "internal_no_render_engine_gl_test",
    args = select({
        "//tools/cc_toolchain:linux": ["--gtest_filter=-*"],
        "//conditions:default": [],
    }),
    opt_in_condition = ":with_render_gl_and_linux",
    deps = [
        ":factory",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_optional_googletest(
    name = "internal_shape_meshes_test",
    data = [
        "//geometry/render:test_models",
    ],
    opt_in_condition = ":with_render_gl_and_linux",
    deps = [
        ":internal_shape_meshes",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
        "//math:geometric_transform",
    ],
)

drake_cc_optional_googletest(
    name = "internal_shader_program_test",
    display = True,
    opt_in_condition = ":with_render_gl_and_linux",
    tags = vtk_test_tags(),
    deps = [
        ":internal_opengl_context",
        ":internal_shader_program",
        "//common:temp_directory",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_optional_googletest(
    name = "thread_test",
    data = [
        "//geometry/render:test_models",
    ],
    display = True,
    opt_in_condition = ":with_render_gl_and_linux",
    tags = vtk_test_tags() + [
        # We launch up to 3 child tasks.
        "cpu:4",
    ],
    deps = [
        ":factory",
        "//common/yaml",
        "//geometry:geometry_instance",
        "//systems/sensors:image_writer",
    ],
)

selects.config_setting_group(
    name = "with_render_gl_and_jammy",
    match_all = [
        ":enabled",
        "//tools:ubuntu_jammy",
    ],
)

drake_cc_optional_googletest(
    name = "multithread_safety_test",
    data = [
        "//geometry/render:test_models",
    ],
    display = True,
    # TODO(#21420) This test is currently broken on Ubuntu 24.04 ("Noble").
    opt_in_condition = ":with_render_gl_and_jammy",
    tags = vtk_test_tags() + [
        # We launch up to 3 child tasks.
        "cpu:4",
    ],
    deps = [
        ":factory",
        ":internal_render_engine_gl",
        ":internal_texture_library",
        "//common:find_resource",
        "//common:overloaded",
        "//common/test_utilities:eigen_matrix_compare",
        "//systems/sensors:image",
        "//systems/sensors:image_writer",
    ],
)

drake_cc_optional_googletest(
    name = "internal_texture_library_test",
    data = [
        "//geometry/render:test_models",
    ],
    opt_in_condition = ":with_render_gl_and_linux",
    tags = vtk_test_tags(),
    deps = [
        ":internal_texture_library",
        "//common:find_resource",
        "//common:temp_directory",
    ],
)

drake_cc_optional_googletest(
    name = "render_engine_gl_params_test",
    opt_in_condition = ":with_render_gl_and_linux",
    deps = [
        ":render_engine_gl_params",
        "//common/yaml",
    ],
)

drake_cc_googletest(
    name = "disabled_render_gl_test",
    deps = [
        # The ":factory_disabled" target is created by the
        # drake_cc_variant_library(...) stanza above.
        ":factory_disabled",
        "//common/test_utilities:expect_throws_message",
    ],
)
