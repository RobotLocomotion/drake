# -*- python -*-

load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_package_library",
)
load("//tools/lint:lint.bzl", "add_lint_tests")
load("//tools/skylark:test_tags.bzl", "vtk_test_tags")
load(
    "defs.bzl",
    "drake_cc_googletest_gl_ubuntu_only",
    "drake_cc_library_gl_ubuntu_only",
    "drake_cc_package_library_gl_per_os",
)

# This gl_renderer package is only implemented on Ubuntu.  For macOS, only the
# render_engine_gl_factory is available and it will always throw an exception.
# For Ubuntu, the factory is the sole public entry point, even though the
# implementation is made up of several other distinct components.
#
# Because the components are only conditionally available, and because we do
# not want Drake's installed headers to depend on GL headers, we only install
# the header for render_engine_gl_factory and nothing else.
#
# Similarly, only the package-level library //geometry/render/gl_renderer is
# public as a Bazel target; all of the other targets are private.

package(default_visibility = ["//visibility:private"])

drake_cc_package_library_gl_per_os(
    name = "gl_renderer",
    macos_deps = [
        ":render_engine_gl_factory",
    ],
    ubuntu_deps = [
        ":gl_common",
        ":opengl_context",
        ":opengl_geometry",
        ":render_engine_gl",
        ":render_engine_gl_factory",
        ":shader_program",
        ":shader_program_data",
        ":shape_meshes",
    ],
    visibility = ["//visibility:public"],
)

drake_cc_library_gl_ubuntu_only(
    name = "gl_common",
    hdrs = [
        "gl_common.h",
    ],
)

drake_cc_library_gl_ubuntu_only(
    name = "opengl_context",
    srcs = ["opengl_context.cc"],
    hdrs = [
        "opengl_context.h",
        "opengl_includes.h",
    ],
    deps = [
        "//common:essential",
        "//common:scope_exit",
        "@glx",
        "@opengl",
        "@x11",
    ],
)

drake_cc_library_gl_ubuntu_only(
    name = "opengl_geometry",
    hdrs = ["opengl_geometry.h"],
    deps = [
        ":gl_common",
        ":opengl_context",
        ":shader_program_data",
        "//geometry/render:render_label",
        "//math:geometric_transform",
    ],
)

drake_cc_library_gl_ubuntu_only(
    name = "render_engine_gl",
    srcs = [
        "render_engine_gl.cc",
    ],
    hdrs = [
        "buffer_dim.h",
        "render_engine_gl.h",
    ],
    deps = [
        ":opengl_context",
        ":opengl_geometry",
        ":shader_program",
        ":shader_program_data",
        ":shape_meshes",
        "//common:essential",
        "//geometry/render:render_engine",
        "//geometry/render:render_label",
        "//systems/sensors:image",
    ],
)

drake_cc_library(
    name = "render_engine_gl_factory",
    srcs = select({
        "//tools/cc_toolchain:apple": [
            "no_render_engine_gl_factory.cc",
        ],
        "//conditions:default": [
            "render_engine_gl_factory.cc",
        ],
    }),
    hdrs = [
        "render_engine_gl_factory.h",
    ],
    deps = select({
        "//tools/cc_toolchain:apple": [
            "//geometry/render:render_engine",
        ],
        "//conditions:default": [
            ":render_engine_gl",
        ],
    }),
)

drake_cc_library_gl_ubuntu_only(
    name = "shader_program",
    srcs = ["shader_program.cc"],
    hdrs = ["shader_program.h"],
    deps = [
        ":shader_program_data",
        "//common:essential",
        "//geometry:geometry_roles",
        "//geometry/render:render_engine",
        "//geometry/render/gl_renderer:opengl_context",
    ],
)

drake_cc_library_gl_ubuntu_only(
    name = "shader_program_data",
    hdrs = ["shader_program_data.h"],
    deps = [
        "//common:copyable_unique_ptr",
        "//common:identifier",
        "//common:value",
    ],
)

drake_cc_library_gl_ubuntu_only(
    name = "shape_meshes",
    srcs = ["shape_meshes.cc"],
    hdrs = ["shape_meshes.h"],
    deps = [
        "//common:essential",
        "//geometry/render/gl_renderer:opengl_context",
        "@tinyobjloader",
    ],
)

drake_cc_googletest_gl_ubuntu_only(
    name = "buffer_dim_test",
    deps = [
        ":render_engine_gl",
    ],
)

drake_cc_googletest_gl_ubuntu_only(
    name = "opengl_context_test",
    tags = [
        # GLX functions show up with bad reads, bad writes, possibly lost, and
        # definitely lost.  We will investiate soon but for now we'll omit the
        # memcheck tests in order to make progress on related code.
        # TODO(#12962) Investigate, fix or suppress, then re-enable this test.
        "no_memcheck",
    ],
    deps = [
        ":opengl_context",
    ],
)

drake_cc_googletest_gl_ubuntu_only(
    name = "opengl_geometry_test",
    deps = [
        ":opengl_geometry",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest_gl_ubuntu_only(
    name = "render_engine_gl_test",
    args = select({
        "//tools/cc_toolchain:apple": ["--gtest_filter=-*"],
        "//conditions:default": [],
    }),
    data = [
        "//systems/sensors:test_models",
    ],
    tags = vtk_test_tags(),
    deps = [
        ":render_engine_gl",
        "//common:find_resource",
        "//common/test_utilities:expect_throws_message",
        "//geometry/render:render_label",
        "//systems/sensors:color_palette",
    ],
)

drake_cc_googletest(
    name = "no_render_engine_gl_test",
    args = select({
        "//tools/cc_toolchain:linux": ["--gtest_filter=-*"],
        "//conditions:default": [],
    }),
    deps = [
        ":render_engine_gl_factory",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest_gl_ubuntu_only(
    name = "shape_meshes_test",
    data = [
        "//systems/sensors:test_models",
    ],
    deps = [
        ":shape_meshes",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
        "//math:geometric_transform",
    ],
)

drake_cc_googletest_gl_ubuntu_only(
    name = "shader_program_test",
    tags = vtk_test_tags(),
    deps = [
        ":opengl_context",
        ":shader_program",
        "//common:temp_directory",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

add_lint_tests(
    cpplint_extra_srcs = [
        "no_render_engine_gl_factory.cc",
        "render_engine_gl_factory.cc",
    ],
)
