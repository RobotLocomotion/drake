# -*- python -*-

load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_package_library",
)
load("//tools/lint:lint.bzl", "add_lint_tests")
load(
    "defs.bzl",
    "drake_cc_library_gl_ubuntu_only",
    "drake_cc_package_library_gl_per_os",
)

package(default_visibility = ["//visibility:private"])

drake_cc_package_library_gl_per_os(
    name = "gl_renderer",
    macos_deps = [
        ":render_engine_gl",
    ],
    ubuntu_deps = [
        ":opengl_context",
        ":render_engine_gl",
    ],
)

drake_cc_library_gl_ubuntu_only(
    name = "opengl_context",
    srcs = ["opengl_context.cc"],
    hdrs = [
        "opengl_context.h",
        "opengl_includes.h",
    ],
    visibility = ["//visibility:private"],
    deps = [
        "@drake//common",
        "@opengl",
        "@x11",
    ],
)

anzu_cc_library(
    name = "load_mesh",
    srcs = ["load_mesh.cc"],
    hdrs = ["load_mesh.h"],
    # NOTE: Required for compatibility with tinyobjloader.
    linkstatic = 1,
    deps = [
        ":opengl_context",
        "@drake//common:essential",
        "@tinyobjloader",
    ],
)

anzu_cc_library(
    name = "opengl_geometry",
    hdrs = ["opengl_geometry.h"],
    deps = [
        ":opengl_context",
        "@drake//math:geometric_transform",
    ],
)

# The pure OpenGL-based render engine implementation.
drake_cc_library(
    name = "render_engine_gl",
    srcs = select({
        "//tools/cc_toolchain:apple": ["no_render_engine_gl_factory.cc"],
        "//conditions:default": [
            "render_engine_gl.cc",
            "render_engine_gl_factory.cc",
        ],
    }),
    hdrs = select({
        "//tools/cc_toolchain:apple": ["render_engine_gl_factory.h"],
        "//conditions:default": [
            "buffer_dim.h",
            "render_engine_gl.h",
            "render_engine_gl_factory.h",
        ],
    }),
    deps = select({
        "//tools/cc_toolchain:apple": ["//geometry/render:render_engine"],
        "//conditions:default": [
            ":load_mesh",
            ":opengl_geometry",
            ":shader_program",
            "@drake//common:essential",
            "@drake//geometry/render:render_engine",
            "@drake//systems/sensors:image",
            "@fmt",
        ],
    }),
)

anzu_cc_library(
    name = "shader_program",
    srcs = ["shader_program.cc"],
    hdrs = ["shader_program.h"],
    deps = [
        ":opengl_context",
        "@drake//common:essential",
    ],
)

drake_cc_googletest(
    name = "render_engine_gl_test",
    args = select({
        "//tools/cc_toolchain:apple": ["--gtest_filter=-*"],
        "//conditions:default": [],
    }),
    data = [
        "@drake//systems/sensors:test_models",
    ],
    deps = [
        ":render_engine_gl",
        "@drake//common:find_resource",
        "@drake//geometry/render:render_label",
        "@drake//systems/sensors:color_palette",
    ],
)

drake_cc_googletest(
    name = "no_render_engine_gl_test",
    args = select({
        "//tools/cc_toolchain:linux": ["--gtest_filter=-*"],
        "//conditions:default": [],
    }),
    deps = [
        ":render_engine_gl",
        "//common/test_utilities:expect_throws_message",
    ],
)

add_lint_tests(
    cpplint_extra_srcs = [
        "no_render_engine_gl_factory.cc",
        "render_engine_gl.cc",
        "render_engine_gl.h",
        "render_engine_gl_factory.cc",
        "render_engine_gl_factory.h",
    ],
)
