# -*- python -*-

load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_binary",
    "drake_cc_library",
    "drake_cc_test",
)
load("//tools/skylark:py.bzl", "py_binary")
load("//tools/lint:lint.bzl", "add_lint_tests")
load("//tools/skylark:test_tags.bzl", "vtk_test_tags")

package(default_visibility = ["//visibility:private"])

filegroup(
    name = "example_resources",
    srcs = [
        "4_color_texture.png",
    ],
)

drake_cc_binary(
    name = "render_engine_vtk_minimal_example",
    srcs = ["render_engine_vtk_minimal_example.cc"],
    add_test_rule = 1,
    data = [
        ":example_resources",
        "//manipulation/models/ycb:models",
    ],
    test_rule_args = [
        "--simulation_time=0.1",
    ],
    test_rule_tags = vtk_test_tags(),
    deps = [
        ":render_client_gltf",
        "//common:filesystem",
        "//geometry:drake_visualizer",
        "//geometry:scene_graph",
        "//geometry/render:render_engine_vtk",
        "//multibody/parsing",
        "//multibody/plant",
        "//systems/analysis:simulator",
        "//systems/framework:diagram",
        "//systems/lcm:lcm_pubsub_system",
        "//systems/primitives:constant_vector_source",
        "//systems/sensors:image_to_lcm_image_array_t",
        "//systems/sensors:image_writer",
        "//systems/sensors:rgbd_sensor",
        "@gflags",
    ],
)

# ------------------------------------------------------------------------------
# Render client
drake_cc_library(
    name = "render_client",
    srcs = ["render_client.cc"],
    hdrs = ["render_client.h"],
    deps = [
        "//common:filesystem",
        "//common:temp_directory",
        "//geometry/render:render_camera",
        "//systems/sensors:image",
        "@json",
        "@libcurl",
        "@picosha2",
        "@vtk//:vtkIOImage",
    ],
)

drake_cc_library(
    name = "render_client_gltf",
    srcs = [
        "render_client_gltf.cc",
        "render_client_gltf_factory.cc",
    ],
    hdrs = [
        "render_client_gltf.h",
        "render_client_gltf_factory.h",
    ],
    # render_client_gltf.h directly pulls in VTK headers; leave it out of the
    # install.
    install_hdrs_exclude = ["render_client_gltf.h"],
    deps = [
        ":render_client",
        "//common:filesystem",
        "//geometry/render:render_camera",
        "//geometry/render:render_engine_vtk",
        "//systems/sensors:image",
        "@vtk//:vtkIOExport",
    ],
)

# ------------------------------------------------------------------------------
# Render server
drake_cc_binary(
    name = "vtk_render_server_backend",
    srcs = ["render_server/vtk_render_server_backend.cc"],
    deps = [
        "//common:filesystem",
        "//geometry/render:render_engine_vtk",
        "//geometry/render:render_label",
        "//geometry/render/shaders:depth_shaders",
        "//math:geometric_transform",
        "//systems/sensors:color_palette",
        "//systems/sensors:image",
        "@gflags",
        "@vtk//:vtkIOImage",
        "@vtk//:vtkIOImport",
        "@vtk//:vtkRenderingCore",
        "@vtk//:vtkRenderingOpenGL2",
    ],
)

# NOTE: see geometry/render/dev/render_server/README.md for installation
# instructions to run this server, the drake setup scripts do not include the
# dependencies for this target.
# TODO(svenevs): install the final list of dependencies when decided.
py_binary(
    name = "server",
    srcs = [
        "render_server/gltf_render_server.py",
        "render_server/wsgi.py",
    ],
    # TODO(svenevs): fix this bazel rule or remove gunicorn.
    # NOTE: developing the server?  Using gunicorn you will not see all error
    # messages, comment out the `args` here to get the default (single
    # threaded) flask runner with more debug information.
    args = ["proxy_run_gunicorn"],
    data = [":vtk_render_server_backend"],
    main = "render_server/gltf_render_server.py",
)

# ------------------------------------------------------------------------------

add_lint_tests()
