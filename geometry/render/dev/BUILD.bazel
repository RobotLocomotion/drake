# -*- python -*-

load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_binary",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_test",
)
load("//tools/skylark:py.bzl", "py_binary")
load("//tools/lint:lint.bzl", "add_lint_tests")
load("//tools/skylark:test_tags.bzl", "vtk_test_tags")

package(default_visibility = ["//visibility:private"])

drake_cc_library(
    name = "http_service",
    srcs = ["http_service.cc"],
    hdrs = ["http_service.h"],
    deps = [
        "//common:filesystem",
        "//common:nice_type_name",
        "@fmt",
    ],
)

drake_cc_library(
    name = "http_service_curl",
    srcs = ["http_service_curl.cc"],
    hdrs = ["http_service_curl.h"],
    deps = [
        ":http_service",
        "//common:filesystem",
        "//common:unused",
        "@fmt",
        "@libcurl",
    ],
)

drake_cc_library(
    name = "render_client",
    srcs = ["render_client.cc"],
    hdrs = ["render_client.h"],
    deps = [
        ":http_service",
        ":http_service_curl",
        "//common:filesystem",
        "//common:nice_type_name",
        "//common:temp_directory",
        "//geometry/render:render_camera",
        "//systems/sensors:image",
        "@picosha2",
        "@vtk//:vtkIOImage",
    ],
)

drake_cc_library(
    name = "render_engine_gltf_client",
    srcs = [
        "render_engine_gltf_client.cc",
        "render_engine_gltf_client_factory.cc",
    ],
    hdrs = [
        "render_engine_gltf_client.h",
        "render_engine_gltf_client_factory.h",
    ],
    # render_engine_gltf_client.h directly pulls in VTK headers; leave it out
    # of the install.
    install_hdrs_exclude = ["render_engine_gltf_client.h"],
    deps = [
        ":render_client",
        "//common:filesystem",
        "//geometry/render:render_camera",
        "//geometry/render:render_engine_vtk",
        "//systems/sensors:image",
        "@vtk//:vtkIOExport",
    ],
)

# === test/ ===

drake_cc_googletest(
    name = "http_service_test",
    deps = [
        ":http_service",
        "//common:temp_directory",
        "//common/test_utilities:expect_no_throw",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "http_service_curl_test",
    deps = [
        ":http_service_curl",
        "//common:temp_directory",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_library(
    name = "test_png",
    testonly = 1,
    srcs = ["test/test_png.cc"],
    hdrs = ["test/test_png.h"],
    deps = [
        "//common:unused",
        "//systems/sensors:image",
        "@gtest//:without_main",
        "@libpng",
    ],
)

drake_cc_library(
    name = "test_tiff",
    testonly = 1,
    srcs = ["test/test_tiff.cc"],
    hdrs = ["test/test_tiff.h"],
    deps = [
        "//systems/sensors:image",
        "@gtest//:without_main",
        "@libtiff",
    ],
)

drake_cc_googletest(
    name = "render_client_test",
    data = ["//geometry/render:test_models"],
    deps = [
        ":render_client",
        ":test_png",
        ":test_tiff",
        "//common:find_resource",
        "//common/test_utilities:expect_no_throw",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "render_engine_gltf_client_test",
    # TODO(svenevs): Found leakage isolated to
    # RenderEngineGltfClient::DoRender*Image calls indirectly calling
    # RenderEngineVtk::PerformUpdate().  Mark it as skipped now, and will
    # revisit during the platform review.  Example log from LeakSanitizer:
    #
    # ==20==ERROR: LeakSanitizer: detected memory leaks
    #
    # Direct leak of 6280 byte(s) in 3 object(s) allocated from:
    # 0 0x55af7105e440 in calloc
    #         (/path/to/render_engine_gltf_client_test+0x51a440)
    # 1 0x151167cd814f
    #         (/lib/x86_64-linux-gnu/libnvidia-glcore.so.510.47.03+0xe6614f)
    # ...
    tags = vtk_test_tags(),
    deps = [
        ":render_engine_gltf_client",
        ":test_png",
        ":test_tiff",
        "//common:filesystem",
        "//common/test_utilities:expect_no_throw",
        "//common/test_utilities:expect_throws_message",
    ],
)

# - Server integration test targets. ------------------------------------------

# NOTE: see geometry/render/dev/render_server/README.md for installation
# instructions to run this server, the drake setup scripts do not include the
# dependencies for this target.
# TODO(svenevs): install the final list of dependencies when decided.
# Runs a flask server on 127.0.0.1:8000.  --host and --port are enabled as
# command line overrides (e.g., if port 8000 is occupied).
py_binary(
    name = "gltf_render_server",
    srcs = ["test/gltf_render_server.py"],
    data = [":gltf_render_server_backend"],
    main = "test/gltf_render_server.py",
)

drake_cc_binary(
    name = "gltf_render_server_backend",
    srcs = ["test/gltf_render_server_backend.cc"],
    deps = [
        "//common:filesystem",
        "//geometry/render:render_engine_vtk",
        "//geometry/render:render_label",
        "//geometry/render/shaders:depth_shaders",
        "//math:geometric_transform",
        "//systems/sensors:color_palette",
        "//systems/sensors:image",
        "@gflags",
        "@vtk//:vtkIOImage",
        "@vtk//:vtkIOImport",
        "@vtk//:vtkRenderingCore",
        "@vtk//:vtkRenderingOpenGL2",
    ],
)

filegroup(
    name = "test_resources",
    srcs = [
        "test/4_color_texture.png",
    ],
)

drake_cc_binary(
    name = "run_simulation_and_render",
    srcs = ["test/run_simulation_and_render.cc"],
    add_test_rule = 1,
    data = [
        ":test_resources",
        "//manipulation/models/ycb:models",
    ],
    test_rule_args = [
        "--simulation_time=0.1",
    ],
    test_rule_tags = vtk_test_tags(),
    deps = [
        ":render_engine_gltf_client",
        "//common:filesystem",
        "//geometry:drake_visualizer",
        "//geometry:scene_graph",
        "//geometry/render:render_engine_vtk",
        "//multibody/parsing",
        "//multibody/plant",
        "//systems/analysis:simulator",
        "//systems/framework:diagram",
        "//systems/lcm:lcm_pubsub_system",
        "//systems/primitives:constant_vector_source",
        "//systems/sensors:image_to_lcm_image_array_t",
        "//systems/sensors:image_writer",
        "//systems/sensors:rgbd_sensor",
        "@gflags",
    ],
)

add_lint_tests()
