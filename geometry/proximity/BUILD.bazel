# -*- python -*-

load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_package_library",
)
load("//tools/lint:lint.bzl", "add_lint_tests")

package(default_visibility = ["//visibility:public"])

drake_cc_package_library(
    name = "proximity",
    visibility = ["//visibility:public"],
    deps = [
        ":bounding_volume_hierarchy",
        ":bvh",
        ":collision_filter_legacy",
        ":collisions_exist_callback",
        ":contact_surface_utility",
        ":distance_to_point_callback",
        ":distance_to_point_with_gradient",
        ":distance_to_shape_callback",
        ":find_collision_candidates_callback",
        ":hydroelastic_callback",
        ":hydroelastic_internal",
        ":make_box_field",
        ":make_box_mesh",
        ":make_cylinder_field",
        ":make_cylinder_mesh",
        ":make_ellipsoid_field",
        ":make_ellipsoid_mesh",
        ":make_sphere_field",
        ":make_sphere_mesh",
        ":mesh_field",
        ":mesh_half_space_intersection",
        ":mesh_intersection",
        ":mesh_plane_intersection",
        ":mesh_to_vtk",
        ":obb",
        ":obj_to_surface_mesh",
        ":penetration_as_point_pair_callback",
        ":plane",
        ":posed_half_space",
        ":proximity_utilities",
        ":sorted_triplet",
        ":surface_mesh",
        ":tessellation_strategy",
        ":volume_mesh",
        ":volume_to_surface_mesh",
    ],
)

drake_cc_library(
    name = "bounding_volume_hierarchy",
    hdrs = ["bounding_volume_hierarchy.h"],
    deps = [":bvh"],
)

drake_cc_library(
    name = "bvh",
    srcs = ["bvh.cc"],
    hdrs = ["bvh.h"],
    deps = [
        ":obb",
        ":posed_half_space",
        ":surface_mesh",
        ":volume_mesh",
        "//common",
        "//geometry:shape_specification",
        "//geometry:utilities",
        "//math:geometric_transform",
    ],
)

drake_cc_library(
    name = "collision_filter_legacy",
    hdrs = ["collision_filter_legacy.h"],
    deps = [
        ":proximity_utilities",
        "//common:essential",
        "//common:sorted_vectors_have_intersection",
    ],
)

drake_cc_library(
    name = "collisions_exist_callback",
    srcs = ["collisions_exist_callback.cc"],
    hdrs = ["collisions_exist_callback.h"],
    install_hdrs_exclude = [
        # This header includes `fcl` directly, which we do not want to
        # expose externally.
        "collisions_exist_callback.h",
    ],
    deps = [
        ":collision_filter_legacy",
        "//geometry:geometry_ids",
        "@fcl",
    ],
)

drake_cc_library(
    name = "contact_surface_utility",
    srcs = ["contact_surface_utility.cc"],
    hdrs = ["contact_surface_utility.h"],
    deps = [
        ":surface_mesh",
    ],
)

drake_cc_library(
    name = "distance_to_point_callback",
    hdrs = ["distance_to_point_callback.h"],
    install_hdrs_exclude = [
        # This header includes `fcl` directly, which we do not want to
        # expose externally.
        "distance_to_point_callback.h",
    ],
    deps = [
        ":proximity_utilities",
        "//common:essential",
        "//geometry:geometry_ids",
        "//geometry/query_results:signed_distance_to_point",
        "//math:geometric_transform",
        "@fcl",
    ],
)

drake_cc_library(
    name = "distance_to_point_with_gradient",
    srcs = ["distance_to_point_with_gradient.cc"],
    hdrs = ["distance_to_point_with_gradient.h"],
    install_hdrs_exclude = [
        # This header includes `fcl` directly, which we do not want to
        # expose externally.
        "distance_to_point_with_gradient.h",
    ],
    deps = [
        ":distance_to_point_callback",
        ":proximity_utilities",
        "//geometry:geometry_ids",
        "//geometry/query_results:signed_distance_to_point_with_gradient",
        "//math",
        "@fcl",
    ],
)

drake_cc_library(
    name = "distance_to_shape_callback",
    hdrs = ["distance_to_shape_callback.h"],
    install_hdrs_exclude = [
        # This header includes `fcl` directly, which we do not want to
        # expose externally.
        "distance_to_shape_callback.h",
    ],
    deps = [
        ":collision_filter_legacy",
        ":distance_to_point_callback",
        ":proximity_utilities",
        "//geometry/query_results:signed_distance_pair",
    ],
)

drake_cc_library(
    name = "find_collision_candidates_callback",
    srcs = ["find_collision_candidates_callback.cc"],
    hdrs = ["find_collision_candidates_callback.h"],
    install_hdrs_exclude = [
        # This header includes `fcl` directly, which we do not want to
        # expose externally.
        "find_collision_candidates_callback.h",
    ],
    deps = [
        ":collision_filter_legacy",
        ":proximity_utilities",
        "//common:sorted_pair",
        "@fcl",
        "@fmt",
    ],
)

drake_cc_library(
    name = "hydroelastic_callback",
    hdrs = [
        "hydroelastic_callback.h",
    ],
    install_hdrs_exclude = [
        # This header includes `fcl` directly, which we do not want to
        # expose externally.
        "hydroelastic_callback.h",
    ],
    deps = [
        ":collision_filter_legacy",
        ":hydroelastic_internal",
        ":mesh_half_space_intersection",
        ":mesh_intersection",
        ":mesh_plane_intersection",
        ":penetration_as_point_pair_callback",
        ":proximity_utilities",
        ":surface_mesh",
        ":volume_mesh",
        "//common:hash",
        "//geometry:proximity_properties",
        "//geometry/query_results:contact_surface",
        "//math:geometric_transform",
        "@fcl",
        "@fmt",
    ],
)

drake_cc_library(
    name = "hydroelastic_internal",
    srcs = ["hydroelastic_internal.cc"],
    hdrs = ["hydroelastic_internal.h"],
    deps = [
        ":bvh",
        ":make_box_field",
        ":make_box_mesh",
        ":make_cylinder_field",
        ":make_cylinder_mesh",
        ":make_ellipsoid_field",
        ":make_ellipsoid_mesh",
        ":make_sphere_field",
        ":make_sphere_mesh",
        ":obj_to_surface_mesh",
        ":proximity_utilities",
        ":surface_mesh",
        ":tessellation_strategy",
        ":volume_mesh",
        "//common:copyable_unique_ptr",
        "//common:essential",
        "//geometry:geometry_ids",
        "//geometry:geometry_roles",
        "//geometry:proximity_properties",
        "//geometry:shape_specification",
        "@fmt",
    ],
)

drake_cc_library(
    name = "make_box_field",
    hdrs = ["make_box_field.h"],
    deps = [
        ":distance_to_point_callback",
        ":mesh_field",
        "//common:essential",
        "//common:unused",
        "//geometry:shape_specification",
    ],
)

drake_cc_library(
    name = "make_box_mesh",
    srcs = ["make_box_mesh.cc"],
    hdrs = ["make_box_mesh.h"],
    deps = [
        ":proximity_utilities",
        ":surface_mesh",
        ":volume_mesh",
        ":volume_to_surface_mesh",
        "//geometry:shape_specification",
    ],
)

drake_cc_library(
    name = "make_cylinder_field",
    hdrs = ["make_cylinder_field.h"],
    deps = [
        ":distance_to_point_callback",
        ":mesh_field",
        "//common:essential",
        "//common:unused",
        "//geometry:shape_specification",
    ],
)

drake_cc_library(
    name = "make_cylinder_mesh",
    hdrs = ["make_cylinder_mesh.h"],
    deps = [
        ":surface_mesh",
        ":volume_mesh",
        ":volume_to_surface_mesh",
        "//common:essential",
        "//geometry:shape_specification",
    ],
)

drake_cc_library(
    name = "make_ellipsoid_field",
    hdrs = ["make_ellipsoid_field.h"],
    deps = [
        ":mesh_field",
        "//common:essential",
        "//geometry:shape_specification",
    ],
)

drake_cc_library(
    name = "make_ellipsoid_mesh",
    hdrs = ["make_ellipsoid_mesh.h"],
    deps = [
        ":make_sphere_mesh",
        ":surface_mesh",
        ":volume_mesh",
        ":volume_to_surface_mesh",
        "//geometry:shape_specification",
    ],
)

drake_cc_library(
    name = "make_sphere_field",
    hdrs = ["make_sphere_field.h"],
    deps = [
        ":mesh_field",
        "//common:essential",
        "//geometry:shape_specification",
    ],
)

drake_cc_library(
    name = "make_sphere_mesh",
    hdrs = ["make_sphere_mesh.h"],
    deps = [
        ":surface_mesh",
        ":tessellation_strategy",
        ":volume_mesh",
        ":volume_to_surface_mesh",
        "//common:essential",
        "//geometry:shape_specification",
    ],
)

drake_cc_library(
    name = "mesh_field",
    srcs = [
        "mesh_field.cc",
        "mesh_field_linear.cc",
    ],
    hdrs = [
        "mesh_field.h",
        "mesh_field_linear.h",
        "volume_mesh_field.h",
    ],
    deps = [
        ":surface_mesh",
        ":volume_mesh",
        "//common",
    ],
)

drake_cc_library(
    name = "mesh_half_space_intersection",
    srcs = ["mesh_half_space_intersection.cc"],
    hdrs = [
        "mesh_half_space_intersection.h",
    ],
    deps = [
        ":bvh",
        ":contact_surface_utility",
        ":posed_half_space",
        ":surface_mesh",
        "//common",
        "//geometry:geometry_ids",
        "//geometry:utilities",
        "//geometry/query_results:contact_surface",
    ],
)

drake_cc_library(
    name = "mesh_intersection",
    srcs = ["mesh_intersection.cc"],
    hdrs = ["mesh_intersection.h"],
    deps = [
        ":bvh",
        ":contact_surface_utility",
        ":mesh_field",
        ":posed_half_space",
        ":surface_mesh",
        ":volume_mesh",
        "//common",
        "//geometry/query_results:contact_surface",
        "//math:geometric_transform",
    ],
)

drake_cc_library(
    name = "mesh_plane_intersection",
    srcs = ["mesh_plane_intersection.cc"],
    hdrs = ["mesh_plane_intersection.h"],
    deps = [
        ":bvh",
        ":contact_surface_utility",
        ":mesh_field",
        ":plane",
        ":volume_mesh",
        "//geometry/query_results:contact_surface",
        "//math:geometric_transform",
    ],
)

drake_cc_library(
    name = "mesh_to_vtk",
    srcs = ["mesh_to_vtk.cc"],
    hdrs = ["mesh_to_vtk.h"],
    deps = [
        ":mesh_field",
        ":surface_mesh",
        ":volume_mesh",
        "@fmt",
    ],
)

drake_cc_library(
    name = "obb",
    srcs = ["obb.cc"],
    hdrs = ["obb.h"],
    deps = [
        ":posed_half_space",
        ":surface_mesh",
        ":volume_mesh",
        "//common",
        "//geometry:shape_specification",
        "//geometry:utilities",
        "//math:geometric_transform",
    ],
)

drake_cc_library(
    name = "obj_to_surface_mesh",
    srcs = ["obj_to_surface_mesh.cc"],
    hdrs = ["obj_to_surface_mesh.h"],
    deps = [
        ":surface_mesh",
        "//common:essential",
        "@fmt",
        "@tinyobjloader",
    ],
)

drake_cc_library(
    name = "penetration_as_point_pair_callback",
    srcs = ["penetration_as_point_pair_callback.cc"],
    hdrs = ["penetration_as_point_pair_callback.h"],
    install_hdrs_exclude = [
        # This header includes `fcl` directly, which we do not want to
        # expose externally.
        "penetration_as_point_pair_callback.h",
    ],
    deps = [
        ":collision_filter_legacy",
        ":proximity_utilities",
        "//geometry/query_results:penetration_as_point_pair",
        "@fcl",
    ],
)

drake_cc_library(
    name = "plane",
    hdrs = ["plane.h"],
    deps = ["//common:essential"],
)

drake_cc_library(
    name = "posed_half_space",
    hdrs = ["posed_half_space.h"],
    deps = [
        ":plane",
        "//common:essential",
    ],
)

drake_cc_library(
    name = "proximity_utilities",
    srcs = ["proximity_utilities.cc"],
    hdrs = ["proximity_utilities.h"],
    install_hdrs_exclude = [
        # This header includes `fcl` directly, which we do not want to
        # expose externally.
        "proximity_utilities.h",
    ],
    deps = [
        ":sorted_triplet",
        ":volume_mesh",
        "//common:sorted_pair",
        "//geometry:geometry_ids",
        "//geometry:geometry_index",
        "//geometry:shape_specification",
        "@fcl",
        "@fmt",
    ],
)

drake_cc_library(
    name = "sorted_triplet",
    srcs = ["sorted_triplet.cc"],
    hdrs = ["sorted_triplet.h"],
    deps = [
        "//common:essential",
        "//common:is_less_than_comparable",
    ],
)

drake_cc_library(
    name = "surface_mesh",
    srcs = ["surface_mesh.cc"],
    hdrs = ["surface_mesh.h"],
    deps = [
        "//common",
        "//math:geometric_transform",
    ],
)

drake_cc_library(
    name = "tessellation_strategy",
    hdrs = ["tessellation_strategy.h"],
)

drake_cc_library(
    name = "volume_mesh",
    srcs = [
        "volume_mesh.cc",
    ],
    hdrs = [
        "volume_mesh.h",
        "volume_mesh_field.h",
    ],
    deps = [
        "//common",
        "//geometry:geometry_ids",
    ],
)

drake_cc_library(
    name = "volume_to_surface_mesh",
    srcs = [
        "volume_to_surface_mesh.cc",
    ],
    hdrs = [
        "volume_to_surface_mesh.h",
    ],
    deps = [
        ":sorted_triplet",
        ":surface_mesh",
        ":volume_mesh",
        "//common",
    ],
)

drake_cc_googletest(
    name = "bvh_test",
    deps = [
        ":bounding_volume_hierarchy",
        ":bvh",
        ":make_ellipsoid_mesh",
        ":make_sphere_mesh",
        ":surface_mesh",
        ":volume_mesh",
        "//common/test_utilities:eigen_matrix_compare",
        "//geometry:shape_specification",
    ],
)

drake_cc_googletest(
    name = "collisions_exist_callback_test",
    deps = [
        ":collisions_exist_callback",
    ],
)

drake_cc_googletest(
    name = "contact_surface_test",
    deps = [
        "//common/test_utilities:eigen_matrix_compare",
        "//geometry:geometry_ids",
        "//geometry/query_results:contact_surface",
    ],
)

drake_cc_googletest(
    name = "contact_surface_utility_test",
    deps = [
        ":contact_surface_utility",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "distance_sphere_to_shape_test",
    deps = [
        ":distance_to_shape_callback",
        "//common/test_utilities",
        "//geometry:geometry_ids",
        "//geometry:utilities",
        "//math:gradient",
    ],
)

drake_cc_googletest(
    name = "distance_to_point_callback_test",
    deps = [
        ":distance_to_point_callback",
        "//common/test_utilities",
        "//geometry:utilities",
        "//math",
    ],
)

drake_cc_googletest(
    name = "distance_to_point_with_gradient_test",
    deps = [
        ":distance_to_point_with_gradient",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "find_collision_candidates_callback_test",
    deps = [
        ":find_collision_candidates_callback",
    ],
)

drake_cc_googletest(
    name = "hydroelastic_callback_test",
    deps = [
        ":hydroelastic_callback",
        "//common/test_utilities",
    ],
)

drake_cc_googletest(
    name = "hydroelastic_internal_test",
    data = [
        "//geometry:test_obj_files",
    ],
    deps = [
        ":hydroelastic_internal",
        ":proximity_utilities",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_no_throw",
        "//common/test_utilities:expect_throws_message",
        "@fmt",
    ],
)

drake_cc_googletest(
    name = "make_box_field_test",
    deps = [
        ":make_box_field",
        ":make_box_mesh",
        ":volume_to_surface_mesh",
    ],
)

drake_cc_googletest(
    name = "make_box_mesh_test",
    deps = [
        ":make_box_mesh",
        ":proximity_utilities",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "make_cylinder_field_test",
    deps = [
        ":make_cylinder_field",
        ":make_cylinder_mesh",
        ":volume_to_surface_mesh",
    ],
)

drake_cc_googletest(
    name = "make_cylinder_mesh_test",
    # This test includes generating the finest mesh allowed for a particular
    # cylinder. The test size is increased to "medium" so that debug builds
    # are successful in CI.
    size = "medium",
    deps = [
        ":make_cylinder_mesh",
        ":proximity_utilities",
    ],
)

drake_cc_googletest(
    name = "make_ellipsoid_field_test",
    deps = [
        ":make_ellipsoid_field",
        ":make_ellipsoid_mesh",
        ":volume_to_surface_mesh",
    ],
)

drake_cc_googletest(
    name = "make_ellipsoid_mesh_test",
    deps = [
        ":make_ellipsoid_mesh",
    ],
)

drake_cc_googletest(
    name = "make_sphere_field_test",
    deps = [
        ":make_sphere_field",
        ":make_sphere_mesh",
        ":volume_to_surface_mesh",
    ],
)

drake_cc_googletest(
    name = "make_sphere_mesh_test",
    deps = [
        ":make_sphere_mesh",
        "//common:sorted_pair",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "mesh_field_linear_test",
    deps = [
        ":make_box_mesh",
        ":mesh_field",
        "//common/test_utilities:eigen_matrix_compare",
        "//math:geometric_transform",
    ],
)

drake_cc_googletest(
    name = "mesh_field_test",
    deps = [
        ":mesh_field",
    ],
)

drake_cc_googletest(
    name = "mesh_half_space_intersection_test",
    deps = [
        ":contact_surface_utility",
        ":mesh_half_space_intersection",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "mesh_intersection_test",
    deps = [
        ":mesh_intersection",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "mesh_plane_intersection_test",
    deps = [
        ":contact_surface_utility",
        ":mesh_plane_intersection",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "mesh_to_vtk_test",
    deps = [
        ":make_box_field",
        ":make_box_mesh",
        ":mesh_intersection",
        ":mesh_to_vtk",
        "//common:temp_directory",
        "//geometry:shape_specification",
        "//math:geometric_transform",
    ],
)

drake_cc_googletest(
    name = "obb_test",
    deps = [
        ":make_box_mesh",
        ":make_ellipsoid_mesh",
        ":make_sphere_mesh",
        ":obb",
        ":surface_mesh",
        ":volume_mesh",
        "//common/test_utilities:eigen_matrix_compare",
        "//geometry:shape_specification",
    ],
)

drake_cc_googletest(
    name = "obj_to_surface_mesh_test",
    data = [
        "//geometry:test_obj_files",
    ],
    deps = [
        ":obj_to_surface_mesh",
        "//common:find_resource",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "penetration_as_point_pair_callback_test",
    deps = [
        ":penetration_as_point_pair_callback",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "plane_test",
    deps = [
        ":plane",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "posed_half_space_test",
    deps = [
        ":posed_half_space",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "proximity_utilities_test",
    deps = [":proximity_utilities"],
)

drake_cc_googletest(
    name = "sorted_triplet_test",
    deps = [
        ":sorted_triplet",
    ],
)

drake_cc_googletest(
    name = "surface_mesh_test",
    deps = [
        ":surface_mesh",
        "//common/test_utilities:eigen_matrix_compare",
        "//math:geometric_transform",
    ],
)

drake_cc_googletest(
    name = "volume_mesh_test",
    deps = [
        ":mesh_field",
        ":volume_mesh",
        "//common/test_utilities:eigen_matrix_compare",
        "//math:geometric_transform",
    ],
)

drake_cc_googletest(
    name = "volume_to_surface_mesh_test",
    deps = [
        ":make_box_mesh",
        ":volume_to_surface_mesh",
    ],
)

add_lint_tests()
