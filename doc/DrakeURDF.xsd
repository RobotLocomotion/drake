<?xml version="1.0" encoding="UTF-8"?>

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://drake.mit.edu"
    xmlns="http://drake.mit.edu" elementFormDefault="qualified">

    <xs:annotation>
        <xs:documentation>XML Schema for DrakeURDF v1.0

Documents URDF support for Drake, which implements much of the ROS URDF specification, but also adds a number of new elements.
   </xs:documentation>
    </xs:annotation>
    <xs:complexType name="loop_joint">
        <xs:sequence>
            <xs:element name="link1" type="link_reference">
                <xs:annotation>
                    <xs:documentation>String naming the link on one side of
the joint.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="link2" type="link_reference">
                <xs:annotation>
                    <xs:documentation>String naming the link on the other side of
the joint.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="axis" type="axis"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute fixed="continuous" name="type" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>Currently must be ’continuous’. The intent is to
eventually support all of the same types as a 'joint' element. See the joint element documentation.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="pose">
        <xs:attribute name="xyz" type="xs:string" default="0 0 0">
            <xs:annotation>
                <xs:documentation>Represents the Cartesian offset</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="rpy" type="xs:string" default="0 0 0">
            <xs:annotation>
                <xs:documentation>Represents the fixed-axis (aka extrinsic) roll, pitch and yaw angles in radians. </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="color">
        <xs:attribute name="rgba" type="xs:string" default="0 0 0 0">
            <xs:annotation>
                <xs:documentation>The color of a material specified by set of four numbers representing red/green/blue/alpha, each in the range of [0,1]. </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="mass">
        <xs:attribute name="value" type="xs:double" default="0"/>
    </xs:complexType>

    <xs:complexType name="inertia">
        <xs:attribute name="ixx" type="xs:double" default="0"/>
        <xs:attribute name="ixy" type="xs:double" default="0"/>
        <xs:attribute name="ixz" type="xs:double" default="0"/>
        <xs:attribute name="iyy" type="xs:double" default="0"/>
        <xs:attribute name="iyz" type="xs:double" default="0"/>
        <xs:attribute name="izz" type="xs:double" default="0"/>
    </xs:complexType>

    <xs:complexType name="inertial">
        <xs:all>
            <xs:element name="origin" type="pose" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>This is the pose of the inertial reference frame, relative to the link reference frame. The origin of the inertial reference frame needs to be at the center of gravity. The axes of the inertial reference frame do not need to be aligned with the principal axes of the inertia. </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="mass" type="mass" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>The mass of the link is represented by the value attribute of this element </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="inertia" type="inertia" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>The 3x3 rotational inertia matrix, represented in the inertia frame. Because the rotational inertia matrix is symmetric, only 6 above-diagonal elements of this matrix are specified here, using the attributes ixx, ixy, ixz, iyy, iyz, izz. </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="box">
        <xs:attribute name="size" type="xs:string" default="0 0 0"/>
    </xs:complexType>

    <xs:complexType name="cylinder">
        <xs:attribute name="radius" type="xs:double" use="required"/>
        <xs:attribute name="length" type="xs:double" use="required"/>
    </xs:complexType>

    <xs:complexType name="sphere">
        <xs:attribute name="radius" type="xs:double" use="required"/>
    </xs:complexType>

    <xs:complexType name="mesh">
        <xs:attribute name="filename" type="xs:anyURI" use="required"/>
        <xs:attribute name="scale" type="xs:string" default="1 1 1"/>
    </xs:complexType>

    <xs:complexType name="geometry">
        <xs:choice>
            <xs:element name="box" type="box">
                <xs:annotation>
                    <xs:documentation>size attribute contains the three side lengths of the box. The origin of the box is in its center. </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="cylinder" type="cylinder">
                <xs:annotation>
                    <xs:documentation>Specify the radius and length. The origin of the cylinder is in its center.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="sphere" type="sphere">
                <xs:annotation>
                    <xs:documentation>Specify the radius. The origin of the sphere is in its center. </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="mesh" type="mesh">
                <xs:annotation>
                    <xs:documentation>A trimesh element specified by a filename, and an optional scale that scales the mesh's axis-aligned-bounding-box. The recommended format for best texture and color support is Collada .dae files, though .stl files are also supported. The mesh file is not transferred between machines referencing the same model. It must be a local file. </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="material">
        <xs:sequence>
            <xs:element name="color" type="color" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="visual">
        <xs:sequence>
            <xs:element name="origin" type="pose" minOccurs="0" maxOccurs="1"/>
            <xs:element name="geometry" type="geometry" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>The shape of the visual object.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="material" type="material" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>The material of the visual element. It is allowed to specify a material element outside of the 'link' object, in the top level 'robot' element. From within a link element you can then reference the material by name. </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="collision">
        <xs:sequence>
            <xs:element name="origin" type="pose" minOccurs="0" maxOccurs="1"/>
            <xs:element name="geometry" type="geometry" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="link">
        <xs:all>
            <xs:element name="inertial" type="inertial" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>The inertial properties of the link. </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="visual" type="visual" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>The visual properties of the link. This element specifies the shape of the object (box, cylinder, etc.) for visualization purposes. Note: multiple instances of visual tags can exist for the same link. The union of the geometry they define forms the visual representation of the link. </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="collision" type="collision" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>The collision properties of a link. Note that this can be different from the visual properties of a link, for example, simpler collision models are often used to reduce computation time. Note: multiple instances of collision tags can exist for the same link. The union of the geometry they define forms the collision representation of the link. </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:all>
        <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The name of the link itself </xs:documentation>
            </xs:annotation>
        </xs:attribute>

    </xs:complexType>


    <xs:complexType name="link_reference">
        <xs:attribute name="link" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="link_reference_w_pose">
        <xs:sequence>
            <xs:element minOccurs="0" name="origin" type="pose"/>
        </xs:sequence>
        <xs:attribute name="link" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="axis">
        <xs:attribute name="xyz" type="xs:string" default="1 0 0"/>
    </xs:complexType>

    <xs:complexType name="dynamics">
        <xs:attribute name="damping" type="xs:double" default="0">
            <xs:annotation>
                <xs:documentation>The physical damping value of the joint</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="limit">
        <xs:attribute name="lower" type="xs:double" default="0">
            <xs:annotation>
                <xs:documentation>An attribute specifying the lower joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="upper" type="xs:double" default="0">
            <xs:annotation>
                <xs:documentation>An attribute specifying the upper joint limit (radians for revolute joints, meters for prismatic joints). Omit if joint is continuous. </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="effort" type="xs:double" default="0">
            <xs:annotation>
                <xs:documentation>An attribute for enforcing the maximum joint effort</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="joint">
        <xs:all>
            <xs:element name="origin" type="pose" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>This is the transform from the parent link to the child link. The joint is located at the origin of the child link, as shown in the figure above. </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="parent" type="link_reference" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Parent link name</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="child" type="link_reference" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Child link name</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="axis" type="axis" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>The joint axis specified in the joint frame. This is the axis of rotation for revolute joints, the axis of translation for prismatic joints, and the surface normal for planar joints. The axis is specified in the joint frame of reference. Fixed and floating joints do not use the axis field. </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="dynamics" type="dynamics" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>An element specifying physical properties of the joint. These values are used to specify modeling properties of the joint, particularly useful for simulation. </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="limit" type="limit" minOccurs="0" maxOccurs="1"/>
        </xs:all>
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="type" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>Specifies the type of joint, where type can be one of the following:

    revolute - a hinge joint that rotates along the axis and has a limited range specified by the upper and lower limits.
    continuous - a continuous hinge joint that rotates around the axis and has no upper and lower limits
    prismatic - a sliding joint that slides along the axis, and has a limited range specified by the upper and lower limits.
    fixed - This is not really a joint because it cannot move. All degrees of freedom are locked. This type of joint does not require the axis, calibration, dynamics, limits or safety_controller.
    floating - This joint allows motion for all 6 degrees of freedom.
    planar - This joint allows motion in a plane perpendicular to the axis. </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:element name="robot">
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element name="joint" type="joint" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>The joint element describes the kinematics and dynamics of the joint and also specifies the safety limits of the joint. </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="link" type="link" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>The link element describes a rigid body with an inertia, visual features, ...</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="material" type="material" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>The material of the visual element. It is allowed to specify a material element outside of the 'link' object, in the top level 'robot' element. From within a link element you can then reference the material by name. </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="loop_joint" type="loop_joint">
                    <xs:annotation>
                        <xs:documentation>Adds support for simple closed-loop kinematic chains. For an example, see
examples/SimpleFourBar/FourBar.urdf

Note: We do not support dynamics or torque at the loop_joint
yet. (see bug 921)</xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="name" type="xs:string" use="required"/>

            <xs:attribute name="version" type="xs:string" default="1.0"/>
        </xs:complexType>
    </xs:element>
</xs:schema>
