*************
Drake v0.18.0
*************

Announcements
-------------

.. warning::

  On macOS, Drake only supports Python 3.8.  Users **must** read `#13097`_ for
  upgrade instructions.

  When paths are set incorrectly, you will see an error such as this::

      ImportError: Python version mismatch: module was compiled for Python 3.8, but the interpreter version is incompatible: 3.7.7

* RigidBodyPlant and all of the drake "attic" is scheduled for removal on
  2020-09-01 (`#12158`_, `#13030`_).

  * Please see `#12158`_ for details of the timeline, and let us know if this
    will cause a problem.

* tutorials: Add tutorial on AddVisualizationCallback (`#13211`_)
* tutorials: tutorials: Explicitly refer to nbviewer for best browsing experience (`#13120`_)  # Update developer notes section
* bindings: Add python binding for GurobiSolverDetails (`#13152`_)  # Backwards-incompatible: This changes all *SolverDetails structures to be read-only for Python. This was deemed OK to break for now.

Breaking changes since v0.17.0
------------------------------

These are breaking changes that did not undergo a deprecation period:

Changes since v0.17.0:
----------------------

Dynamical Systems
~~~~~~~~~~~~~~~~~

* common: common: Use BsplineBasis<T> in BsplineTrajectory<T> (`#13149`_)  # Resolves #13150.
* common: common::polynomial : Add Subsitute(var, Polynomial) (`#13108`_)  # Also drecates Polynomial::IsApprox with Polynomial::CoefficientsAlmostEqual. The new incarnation is different in several ways: - Support multibariate polynomials (as opposed to the univariate restriction of IsApprox) - The new test will faillif the polynomials have different variables. -  The comparison supports either relative or absolute comparisons (with slightly different behavior for treating monomials that don't have a match in the other polynomial.
* common: trajectories: add DiscreteTimeTrajectory (`#13157`_)
* common: trajectories: add Trajectory::has_derivative and EvalDerivative (`#13144`_)  # I've started the NVI pattern here, rather than adding another public virtual. It's inconsistent with the rest of the class, but the goal is to move this direction.  I've moved MakeTrajectory to NVI, as well. Also started trajectory.cc => trajectory is now @tparam default_scalar, instead of @tparam ANY
* common: trajectories: add piecewisepolynomial unary minus (`#13109`_)
* math: math: Add BsplineBasis<T>(const BsplineBasis<double>&) (`#13057`_)  # This is a step towards resolution of #13150.
* math: math: Fix BsplineBasis<Expression>::operator==() (`#13158`_)

* systems: Add a dependency ticket for all sources excluding input ports (`#13088`_)  # * Add dependency ticket for all sources excluding input ports.
* systems: controllers: FittedValueIteration supports MBP+SceneGraph (`#13113`_)  # Takes the input port as an argument, and can ignore the scene graph abstract state (related to #9501)
* systems: controllers: Support for Finite Horizon LQR result as a System (`#13178`_)
* systems: controllers: add python bindings for finite-horizon LQR (`#13145`_)  # as discussed on slack, this uses a work-around to binding the std::unique_ptr member variables in FiniteLQRResult. also includes a few small improvements to finite-horizon LQR, in preparation for the supporting discrete-time systems.
* systems: Add System support for implicit equations (`#13068`_)  # * Implementation of implicit equations with acrobot test.
* systems: controllers: add example of finite horizon LQR working on the acrobot (`#13250`_, `#13252`_)  # Also had to remove support for symbolic::Expression in the finite horizon LQR controller, pending resolution of #12253.

New features

Fixes

Mathematical Program
~~~~~~~~~~~~~~~~~~~~

New features

Fixes

* Fix memcpy undefined behavior in unconstrained optimization (`#13111`_)

Multibody Dynamics
~~~~~~~~~~~~~~~~~~

* multibody: Implement UniversalMobilizer (`#13054`_)
* multibody: Implements MBP::get_body_poses_output_port() (`#13137`_)
* multibody: Make joint store default value (`#13105`_)  # This is a PR to have the Joint class store a default value and to pass the value to its mobilizer implementation upon construction of the joint implementation. Solves the issue of mobilizers storing default joint positions (#13065)
* multibody: multibody: adds a Propeller model for use with MultibodyPlant (`#13135`_)  # Includes python bindings. Partially resolves #12401.
* examples: Four Bar Linkage example (`#13036`_)  # Adds a planar four bar linkage simulation.

* geometry,multibody: Add alternate Sphere volume mesh generation (`#13114`_)  # Rather than creating a sphere by sub-dividing *all* edges of the previous level of refinement, we refine only those edges on the surface of the sphere. The resultant mesh has a single interior vertex (at the sphere origin) and all of the resolution increases curvature. In contrast to the interior vertices which increases the number of tets by a factor of 8 each time, this only increases it by a factor of 4. It retains an option to tessellate on the interior as well, but no longer defaults to that. This also provides a mechanism through proximity properties to toggle what type of sphere tessellation is used. An optional parameter (kHydroGroup, "sparse_mesh") has been added which will control whether the sphere gets tessellated on the interior or not (defaults to not). This cascaded to a number of other pieces of code that made use of the sphere. The ellipsoid representation as well as the tests.
* geometry,tools: [geometry] Example for contact-surface profiling: rigid bowl, soft ball (`#13138`_)
* geometry: Refactor QueryObject test (`#13136`_)  # This doesn't change the *nature* of the test. Merely the spelling. It eliminates some of the overhead cruft such that the test harness has direct access to the private/protected elements of QueryObject.
* geometry: Use linear f(x,y,z) on tetrahedron directly instead of barycentric interpolation (`#13140`_)  # * [geometry] MeshFieldLinear uses linear function instead of barycentric interpolation.
* geometry: [geometry] Move mesh_intersection code from .h to .cc (`#13086`_)
* geometry: [geometry] Optimize mesh_intersection to avoid heap allocation by using std::vector as member variables (`#13130`_)
* geometry: geometry_properties: Explicitly test number of copies / moves (`#13232`_)

New features

Fixes

Miscellaneous features and fixes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Upgrade quadrotor to Skydio R2 model (`#13050`_)
* Add lcmtypes for panda command/status (`#13163`_)
* Fix AutoDiffXd derivatives for min and max (`#13112`_)
* Install Drake's custom drake_visualizer plugins (`#13127`_)

pydrake bindings
~~~~~~~~~~~~~~~~

* pydrake.common.kDrakeAssertIsArmed (`#13183`_, `#13195`_)
* pydrake.geometry.QueryObject.__init__ (`#13156`_)
* pydrake.multibody.plant.MultibodyPlant.get_body_poses_output_port (`#13229`_)
* pydrake.solvers.gurobi.GurobiSolverDetails (`#13152`_)
* pydrake.solvers.mosek.MosekSolverDetails (`#13151`_)

New features

* Move the Value and AbstractValue classes from the pydrake.systems.framework module to the pydrake.common.value module (`#13217`_, `#13225`_)

Fixes

* Add stricter checks and friendlier errors for mathematical program user-functions (`#13183`_)
* Resolve AbstractValue RTTI linking inconsistency on macOS (`#13225`_)

Build system and dependencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Upgrade buildifier to latest release 3.0.0 (`#13198`_)
* Upgrade dreal to latest commit (`#13133`_)
* Upgrade fmt to latest release 6.2.0 (`#13200`_)
* Upgrade lcm to latest commit (`#13199`_)
* Upgrade meshcat to latest commit (`#13141`_)
* Upgrade pycodestyle to latest release 2.5.0 (`#13197`_, `#13204`_)
* Upgrade semantic_version to latest release 2.8.5 (`#13197`_)
* Only compile the parts of FCL that we need (`#13230`_)
* Remove use of octomap (`#13230`_)
* Remove use of tinydir (`#13180`_) 
* Disable python imports from ~/.local during build on Ubuntu (`#13190`_)
* Fetch sdformat and ignition_math from GitHub, not Bitbucket (`#13188`_)
* Fix bazel third_party include path complaints (`#13189`_)
* Begin Ubuntu 20.04 (Focal Fossa) accomodations (`#13142`_, `#13235`_)

Newly-deprecated APIs
~~~~~~~~~~~~~~~~~~~~~

* The octomap external (`#13230`_)
* The tinydir external (`#13180`_)
* The bitbucket.bzl macros (`#13193`_)

Removal of deprecated items
~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Remove deprecated code 2020-05 (`#13169`_)
* Remove deprecated code 2020-05 (`#13170`_)
* Remove deprecated code 2020-05 (`#13171`_)
* Remove deprecated code 2020-05 (`#13172`_)
* Remove old (undated) deprecations (`#13233`_)

Notes
-----

This release provides `pre-compiled binaries
<https://github.com/RobotLocomotion/drake/releases/tag/v0.18.0>`__ named
``drake-YYYYMMDD-{bionic|mac}.tar.gz``. See :ref:`Nightly Releases
<nightly-releases>` for instructions on how to use them.

Drake binary releases incorporate a pre-compiled version of `SNOPT
<https://ccom.ucsd.edu/~optimizers/solvers/snopt/>`__ as part of the
`Mathematical Program toolbox
<https://drake.mit.edu/doxygen_cxx/group__solvers.html>`__. Thanks to
Philip E. Gill and Elizabeth Wong for their kind support.

.. _#12158: https://github.com/RobotLocomotion/drake/pull/12158
.. _#13030: https://github.com/RobotLocomotion/drake/pull/13030
.. _#13097: https://github.com/RobotLocomotion/drake/pull/13097

..
  Current oldest_commit 77a7b9437331f1540666b9089395b53da403e4fa (inclusive).
  Current newest_commit bc4638164b9994119f8b50b48d268c172e34bdfe (inclusive).
