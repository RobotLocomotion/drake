*************
Drake v0.18.0
*************

Announcements
-------------

.. warning::

  On macOS, Drake only supports Python 3.8.  Users **must** read `#13097`_ for
  upgrade instructions.

  When paths are set incorrectly, you will see an error such as this::

      ImportError: Python version mismatch: module was compiled for Python 3.8, but the interpreter version is incompatible: 3.7.7

* RigidBodyPlant and all of the drake "attic" is scheduled for removal on
  2020-09-01 (`#12158`_, `#13030`_).

  * Please see `#12158`_ for details of the timeline, and let us know if this
    will cause a problem.

Breaking changes since v0.17.0
------------------------------

These are breaking changes that did not undergo a deprecation period:

Changes since v0.17.0:
----------------------

Dynamical Systems
~~~~~~~~~~~~~~~~~

New features

Fixes

Mathematical Program
~~~~~~~~~~~~~~~~~~~~

New features

Fixes

Multibody Dynamics
~~~~~~~~~~~~~~~~~~

New features

Fixes

Miscellaneous features and fixes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

pydrake bindings
~~~~~~~~~~~~~~~~

* TBD new binding

New features

Fixes

Build system and dependencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Newly-deprecated APIs
~~~~~~~~~~~~~~~~~~~~~

Removal of deprecated items
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Notes
-----

This release provides `pre-compiled binaries
<https://github.com/RobotLocomotion/drake/releases/tag/v0.18.0>`__ named
``drake-YYYYMMDD-{bionic|mac}.tar.gz``. See :ref:`Nightly Releases
<nightly-releases>` for instructions on how to use them.

Drake binary releases incorporate a pre-compiled version of `SNOPT
<https://ccom.ucsd.edu/~optimizers/solvers/snopt/>`__ as part of the
`Mathematical Program toolbox
<https://drake.mit.edu/doxygen_cxx/group__solvers.html>`__. Thanks to
Philip E. Gill and Elizabeth Wong for their kind support.

.. _#12158: https://github.com/RobotLocomotion/drake/pull/12158
.. _#13030: https://github.com/RobotLocomotion/drake/pull/13030
.. _#13097: https://github.com/RobotLocomotion/drake/pull/13097

..
  Current oldest_commit 77a7b9437331f1540666b9089395b53da403e4fa (inclusive).
  Current newest_commit bc4638164b9994119f8b50b48d268c172e34bdfe (inclusive).

* systems: controllers: FittedValueIteration supports MBP+SceneGraph (`#13113`_)  # Takes the input port as an argument, and can ignore the scene graph abstract state (related to #9501)
* common: trajectories: add piecewisepolynomial unary minus (`#13109`_)
* geometry: [geometry] Move mesh_intersection code from .h to .cc (`#13086`_)
* multibody,solvers: solvers: Fix memcpy undefined behavior in unconstrained optimization (`#13111`_)  # Calling memcpy on nullptr is undefined.
* common: common: Add implementations of {min,max}(AutoDiffXd, AutoDiffXd) (`#13112`_)  # Resolves #13082.
* systems: Add a dependency ticket for all sources excluding input ports (`#13088`_)  # * Add dependency ticket for all sources excluding input ports.
* common: common: Add Eigen issue link for {min,max}(AutoDiffXd, AutoDiffXd) (`#13119`_)
* common: Add PiecewisePolynomialDerivativeTests/AutoDiffTest (`#13080`_)
* common: Update comments for PiecewisePolynomial<Expression>::value() (`#13080`_)  # It's doing the right thing, and we won't apologize for it anymore.
* examples: Four Bar Linkage example (`#13036`_)  # Adds a planar four bar linkage simulation.
* common: common::polynomial : Add Subsitute(var, Polynomial) (`#13108`_)  # Also drecates Polynomial::IsApprox with Polynomial::CoefficientsAlmostEqual. The new incarnation is different in several ways: - Support multibariate polynomials (as opposed to the univariate restriction of IsApprox) - The new test will faillif the polynomials have different variables. -  The comparison supports either relative or absolute comparisons (with slightly different behavior for treating monomials that don't have a match in the other polynomial.
* common: trajectories: Fix use-after-free (`#13132`_)  # Fixes commit c523f2aae3bc073cd42fee45a21ee255dc1a5ba6.
* geometry,multibody: Add alternate Sphere volume mesh generation (`#13114`_)  # Rather than creating a sphere by sub-dividing *all* edges of the previous level of refinement, we refine only those edges on the surface of the sphere. The resultant mesh has a single interior vertex (at the sphere origin) and all of the resolution increases curvature. In contrast to the interior vertices which increases the number of tets by a factor of 8 each time, this only increases it by a factor of 4. It retains an option to tessellate on the interior as well, but no longer defaults to that. This also provides a mechanism through proximity properties to toggle what type of sphere tessellation is used. An optional parameter (kHydroGroup, "sparse_mesh") has been added which will control whether the sphere gets tessellated on the interior or not (defaults to not). This cascaded to a number of other pieces of code that made use of the sphere. The ellipsoid representation as well as the tests.
* tools: Use dReal-4.20.04.1 (`#13133`_)  # nlopt-2.6.2 introduces new enum value `NUM_RESULTS` and this version handles it.
* multibody: Implements MBP::get_body_poses_output_port() (`#13137`_)
* tutorials: tutorials: Explicitly refer to nbviewer for best browsing experience (`#13120`_)  # Update developer notes section
* multibody: multibody: adds a Propeller model for use with MultibodyPlant (`#13135`_)  # Includes python bindings. Partially resolves #12401.
* setup: setup: Move bionic files to focal files to preserve history (`#13142`_)  # This commit strictly speaking is a move, but once combined with a future merge commit will behave more like a copy instead.
* setup: setup: Restore bionic files to unmodified status (`#13142`_)
* setup,tools: setup,tools: Add Ubuntu 20.04 Focal Fossa (`#13142`_)  # Drake is not officially supported on Ubuntu 20.04 (Focal).  This commit enables CI to run `bazel build //common:essential`, so that we may work towards official support.
* multibody: Make joint store default value (`#13105`_)  # This is a PR to have the Joint class store a default value and to pass the value to its mobilizer implementation upon construction of the joint implementation. Solves the issue of mobilizers storing default joint positions (#13065)
* tools: Update meshcat (only) (`#13141`_)  # To get @gizatt's fix for the skydio parsing issue.
* geometry: Refactor QueryObject test (`#13136`_)  # This doesn't change the *nature* of the test. Merely the spelling. It eliminates some of the overhead cruft such that the test harness has direct access to the private/protected elements of QueryObject.
* examples,tools: quadrotor: Upgrade to Skydio R2 model (`#13050`_)  # provided by Abe Bachrach from Skydio
* math: math: Add BsplineBasis<T>(const BsplineBasis<double>&) (`#13057`_)  # This is a step towards resolution of #13150.
* bindings: Add python binding for MosekSolverDetails (`#13151`_)
* math: math: Fix BsplineBasis<Expression>::operator==() (`#13158`_)
* bindings: py geometry: Bind QueryObject constructor (`#13156`_)  # Enables writing Python LeafSystems which declare ports using this object
* common: common: Use BsplineBasis<T> in BsplineTrajectory<T> (`#13149`_)  # Resolves #13150.
* multibody: Implement UniversalMobilizer (`#13054`_)
* tools: install.py: Add --pre_clean option for ease of debugging (`#13127`_)
* tools: drake_visualizer: Install builtin scripts (`#13127`_)  # Put under test, both in Bazel and install
* bindings: Add python binding for GurobiSolverDetails (`#13152`_)  # Backwards-incompatible: This changes all *SolverDetails structures to be read-only for Python. This was deemed OK to break for now.
* common: trajectories: add Trajectory::has_derivative and EvalDerivative (`#13144`_)  # I've started the NVI pattern here, rather than adding another public virtual. It's inconsistent with the rest of the class, but the goal is to move this direction.  I've moved MakeTrajectory to NVI, as well. Also started trajectory.cc => trajectory is now @tparam default_scalar, instead of @tparam ANY
* lcmtypes: Add lcmtypes for panda command/status (`#13163`_)
* common: trajectories: Fix unit test compilation error on macOS (`#13167`_)
* examples,systems: Add System support for implicit equations (`#13068`_)  # * Implementation of implicit equations with acrobot test.
* systems: controllers: add python bindings for finite-horizon LQR (`#13145`_)  # as discussed on slack, this uses a work-around to binding the std::unique_ptr member variables in FiniteLQRResult. also includes a few small improvements to finite-horizon LQR, in preparation for the supporting discrete-time systems.
* geometry,tools: [geometry] Example for contact-surface profiling: rigid bowl, soft ball (`#13138`_)
* common: trajectories: add DiscreteTimeTrajectory (`#13157`_)
* geometry: [geometry] Optimize mesh_intersection to avoid heap allocation by using std::vector as member variables (`#13130`_)
* bindings: py wrap_pybind_test: Fix test for DefReadUniquePtr (`#13175`_)  # Other minor changes
* attic,multibody,tools: parsing: Rewrite package.xml crawl to avoid using @tinydir (`#13180`_)  # The tinydir external is now deprecated and will be removed on 2020-08-01.
* bindings: py common: Expose _DRAKE_ASSERT_IS_ARMED (`#13183`_)
* bindings: py mathematical_program: Add friendlier errors for user-functions (`#13183`_)  # Also makes checks stricter
* attic: attic: Reduce CI coverage of extra variants (`#13184`_)
* tools: workspace: Switch sdformat and ignition_math to GitHub (`#13188`_)
* attic,examples,tools: attic,examples: Remove deprecated code 2020-05 (`#13169`_)
* common,examples,geometry,manipulation,multibody,systems: common,geometry,multibody: Remove deprecated code 2020-05 (`#13170`_)
* setup,solvers,tools: setup,tools: Remove deprecated code 2020-05 (`#13171`_)
* systems: systems: Remove deprecated code 2020-05 (`#13172`_)
* tools: workspace: Deprecate bitbucket.bzl (`#13193`_)
* tools: tools: Disable python imports from ~/.local (pip -U) (`#13190`_)  # On Ubuntu, we purposefully do not use pip.  By removing the homedir from imports, we can ensure more reproducible builds and tests.
* third_party: third_party: Remove spurious include path (`#13189`_)  # The default include paths are already correct.  Adding an extra suffix results in "undeclared inclusion" warnings downstream.
* tools: workspace: Update buildifier to latest release 3.0.0 (`#13198`_)
* geometry: [geometry] Parcel QueryObject queries into unique classes (`#13161`_)  # QueryObject functionality is spread across three classes: QueryObject, ProximityQueryObject, and PerceptionQueryObject. QueryObject: keeps poses for frames and geometries and the scene graph inspector. ProximityQueryObject: inherits from QueryObject (picking up that functionality) plus all proximity queries: collisions, signed distance, etc. PerceptionQueryObject: inherits from QueryObject (picking up that functionality) plus all perception queries: image rendering. SceneGraph is modified to support all three query object types. Bindings for all classes are updated. This does *not* deprecate current functionality. That comes next.
* bindings: py common: Use kDrakeAssertIsArmed instead of _DRAKE_ASSERT_IS_ARMED (`#13195`_)
* common,tools: workspace: Upgrade fmt to latest release 6.2.0 (`#13200`_)
* tools: workspace: Upgrade lcm to latest commit (`#13199`_)
* tools: tools: Improve new_release checking heuristics (`#13196`_)
* bindings: py common.value: Move AbstractValue and Value here (`#12430`_)  # This is intended to reflect the C++ API change in #10357 Deprecate old spellings
* common,manipulation,third_party,tools: workspace: Upgrade pycodestyle to latest release 2.5.0 (`#13197`_)  # Fix new formatting nits and invalid string literals that it now flags. Upgrade semantic_version to latest release 2.8.5.
* common: drake_py_unittest: Force deprecation warnings to be errors (`#13191`_)  # This change implies stricter error checking for future tests. Previously, Drake deprecations that occurred at import-time in a module (not when running a unittest) did not get translated into an error. This causes them to be an error.
* bindings: Revert "py common.value: Move AbstractValue and Value here" (`#13217`_)  # This reverts commit e0723bc9d91d91e5325c1f47b753817c2c450245.
* examples: Change planar gripper link2 collision geometry to box (`#13185`_)
* tools: models: Sort lists alphabetically for better maintainability (`#13223`_)
* systems: controllers: Support for Finite Horizon LQR result as a System (`#13178`_)
* tools: pybind: Avoid duplicate linting with `add_pybind_coverage_data` (`#13228`_)
* bindings: multibody: add python binding for get_body_poses_output_port() (`#13229`_)
* manipulation,tools: models: Move jaco_description meshes to RobotLocomotion/models (`#13222`_)
* geometry: geometry_properties: Explicitly test number of copies / moves (`#13232`_)
* bindings: pydrake: Remove old (undated) deprecations (`#13233`_)
* setup: setup: Install /usr/bin/python for Focal source builds (`#13235`_)
* common,examples,manipulation,third_party,tools: lint: Enable W504 for python (`#13204`_)
* common: nice_type_name: Update test for anonymous namespaces (`#13239`_)
* tools: tools: Trim FCL to only compile the parts we need (`#13230`_)  # Deprecate @octomap external (now unused).
* bindings: pydrake: Resolve RTTI inconsistency on macOS, restore pydrake Value move (`#13225`_)  # * Revert "Revert "py common.value: Move AbstractValue and Value here" (#13217)" This reverts commit 7a03e312cea8bfb1ea2177c1ab49312d577d9c7a. * Fix RTTI behavior
* geometry: Revert "[geometry] Parcel QueryObject queries into unique classes" (`#13243`_)  # This reverts commit 1abc951c4cc01f147b26391e847005353e2f4809.
* tutorials: Add tutorial on AddVisualizationCallback (`#13211`_)
* examples,systems: controllers: add example of finite horizon LQR working on the acrobot (`#13250`_)  # Also had to remove support for symbolic::Expression in the finite horizon LQR controller, pending resolution of #12253.
* geometry: Use linear f(x,y,z) on tetrahedron directly instead of barycentric interpolation (`#13140`_)  # * [geometry] MeshFieldLinear uses linear function instead of barycentric interpolation.
* examples,systems: examples: make Acrobot swing-up with trajectory optimization SNOPT only (`#13252`_)
