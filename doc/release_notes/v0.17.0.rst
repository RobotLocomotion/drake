*************
Drake v0.17.0
*************

Announcements
-------------

* RigidBodyPlant and all of the drake "attic" is scheduled for removal on
  2020-09-01.

  * Please see `#12158`_ for details of the timeline, and let us know if this
    will cause a problem.

Breaking changes since v0.16.1
------------------------------

These are breaking changes that did not undergo a deprecation period:

* Change PiecewiseTrajectory::value virtual method to pass-by-const-reference;
  classes that override it will need rework; callers are unchanged (`#12986`_)
* Change integrators' dense output representation to use PiecewiseTrajectory
  (`#13008`_)
* Add external torque fields for the jaco status message (`#13017`_)
* Edit WitnessFunction constructor; users should not be using this constructor
  anyway (`#12894`_)

Changes since v0.16.1:
----------------------

Dynamical Systems
~~~~~~~~~~~~~~~~~

New features

* Integrators

  * Add doxygen group for our suite of integrators (`#12900`_)
  * Add error control to Velocity-Implicit Euler Integrator (`#12528`_, `#12760`_)
  * Add symbolic expression support to ExplicitEulerIntegrator and RungeKutta2Integrator (`#12922`_, `#12919`_)
  * Replace integrators' DenseOutput with PiecewiseTrajectory (`#13008`_)

* Trajectories

  * Add symbolic::IsAffine (`#12933`_)
  * Add Polynomial::SetIndeterminates (`#12902`_)
  * Add Polynomial::CoefficientsAlmostEqual (`#12853`_)
  * Add PiecewisePolynomial::ScaleTime and PiecewisePolynomial::ReverseTime (`#12966`_)
  * Add derivative-at-a-point methods to Polynomial, PiecewisePolynomial (`#12951`_)
  * Support default scalars in Polynomial, PiecewiseTrajectory, PiecewisePolynomial (`#12973`_, `#12986`_, `#12991`_)
  * Add Trajectory::vector_values (`#12855`_)
  * Construct HermitianDenseOutput from PiecewisePolynomial (`#12952`_, `#12957`_, `#13006`_)
  * Add BsplineBasis and BsplineTrajectory (`#11990`_)

* Region of attraction

  * Add utility to "balance" two quadratic forms and uses it in RegionOfAttraction (`#12875`_, `#12882`_)
  * Support region of attraction when Vdot is indefinite at the origin (`#12864`_)
  * Add the "star" region of attraction test (`#12881`_)

Fixes

* TBD

Mathematical Program
~~~~~~~~~~~~~~~~~~~~

* solvers: Add MathematicalProgram::AddConstraint(Eigen::Matrix<Formula>) (`#12858`_)
* solvers: Add MathematicalProgram::MakePolynomial (`#12847`_)
* solvers: Add MathematicalProgram::Reparse (`#12902`_)
* solvers: Add default std::nullopt arguments to SolverBase::Solve() (`#12866`_)  # Users shouldn't have to pass in {} and/or None everywhere.
* solvers: Add dual solution to OsqpSolverDetails (`#12916`_)
* solvers: Add python binding for branch_and_bound (`#13002`_)
* solvers: Check x_init size for all solvers (`#12995`_)  # Check x_init size for all solvers. Throw an error message when the size doesn't match
* solvers: Use Reparse when symbolic::Polynomials are taken as arguments (`#12902`_)
* solvers: add DrakeSolverOption (`#12884`_)
* solvers: snopt: Tidy up storage declaration (`#12914`_)  # As of C++17, we can use "inline" to avoid repeating ourselves.
* solvers: throw error when the constraint lower and upper bounds size don't match (`#13004`_)  # throw an error when the constraint lower and upper bounds size don't match.
* tutorials: Add MakeSolver to mathematical program tutorial (`#12885`_)

Multibody Dynamics
~~~~~~~~~~~~~~~~~~

* multibody: Create bushing force element with 3D rotational (roll-pitch-yaw) and translational stiffness and damping (`#11946`_)
* multibody: Add DoorHinge to pydrake and update jupyter notebook (`#12930`_)
* multibody: Add PointToPointDistanceConstraint (`#12896`_)  # Add PointToPointDistanceConstraint.
* multibody: Add a door hinge force element (`#12812`_)  # Co-authored-by: Grant <grant.gould@tri.global>
* multibody: Add missing energy and power overrides to MBP (`#12895`_)  # * Add missing energy and power overrides to MBTreeSystem (and hence MBPlant).
* multibody: Adding CoM methods from RBT to MBT/MBP (`#12839`_)  # * Adding CoM features from RBT to MBT/MBP * Allowing the user to specify the reference and expressed-in frame * Adding unit tests for new MBP CoM Jacobian methods * Adding TODO for future feature
* multibody: Documents conventions in HydroelasticContactInfo (`#12806`_)
* multibody: Fix ABI::IsPhysicallyValid() to avoid false negatives (`#12879`_)  # * Fix ABI::IsPhysicallyValid() to use tolerance based on the magnitude of its eigenvalues.
* multibody: InverseKinematics allows ignoring joint limits in the constructor (`#12872`_)
* multibody: Move HydroelasticFallbackCacheData out of MultibodyPlant (`#12932`_)  # The struct was previously a nested class. However, it interfered with the logic for hashing drake::Value instances of the type. This removes it from being nested to the internal namespace.
* multibody: Move MBP::HydroelasticContactInfoAndBodySpatialForces into internal (`#12953`_)  # MBP has a nested class that is stored in a cache entry. The hash logic associated with the drake::Value type doesn't work well with nested classes of templated classes (it introduces a "namespace" with a template parameter). This clutters up the console with warnings that don't help the end user at all. SO, for now, we'll pull the nested class out and put it in an internal namespace.
* multibody: Move bushing code from .h file to .cc file (`#13001`_)
* multibody: Parse joint effort limits from URDF (`#12863`_)  # Fixes #12859
* multibody: Use System energy & power methods to remove some TODOs (`#12955`_)  # Remove last mention of MultibodyTree.
* multibody: [parsing] Add unit test to cover Parser's automatic search for packages (`#12871`_)  # The Parser class will attempt to locate packages for every sdf/urdf passed to one of its Add*FromFile() methods. However, it will only work if the model file is located in the Drake tree. This adds a test that confirm this behavior. Incidentally, it does some minor clean up on the package_map documentation. This can be omitted from the change log in future releases.
* multibody: py multibody: Move door_hinge notebook to avoid import errors (`#12960`_)

* geometry: [geometry] Adding soft half space into contact query (`#12975`_)  # - Introduce the soft half space hydroelastic representation. - Add dispatch logic for soft half space-rigid mesh. - updates the rolling sphere demo so it can exercise the soft half space.
* geometry: Enable use of rigid half space in hydroelastic contact (`#12901`_)  # Previous commits introduced the mathematical basis for intersecting a half space boundary plane with a tetrahedron. This builds on that atomic operation: - Allow instantiation of hydroelastic representation of rigid half space. - Define internal representation of rigid half space. - Evaluation of ContactSurface from intersection of VolumeMesh with rigid half space. - restore the rolling sphere demo to use a rigid half space as ground instead of the box previously used.
* geometry,tools: [render] Modify vtk cube texture coordinate generation (`#12972`_)  # * Modify vtk cube texture coordinate generation The default vtk cube source produces texture coordinates based on the size *and* position of the cube in the geometry frame. More or less, the vertex position becomes a uv coordinate (projected onto one of six planes). This has several undesirable properties: 1. Small boxes will only be mapped with small portions of the texture. 2. Large boxes will have the texture tiled multiple times. This introduces a new cube geometry that is equivalent to the vtk cube source, except it defaults to the texture being stretched over each face, with the possibility of tiling it via a (currently hidden) uv_scale property. It also removes all mention of the vtkCubeSource.
* geometry,multibody,systems: framework: Update internal for ValidateContext rename (`#12891`_)  # In 54717e9aa3dce593a2fd3277de3c7575351834e8 we added a fast new method to SystemBase for validating contexts, and deprecated the old ones.  However, one old method was also exposed via internal::SystemMessageInterface but the commit did not update that API.  We do that here now. This turns up a bug in unit test code where a MultibodyPlant was losing its system_id during transmogrification, because we were accidentally transmogrifying it implicitly(!) while passing it into a function, because MultibodyPlant's scalar-converting copy constructor was not marked explicit. This is very bad, so we also add explicit to MultibodyPlant now. This is a breaking change but well worth it. We also grep the code for any other missing explicit on such constructors, fixing just the one on GeometryState.
* geometry: Add compute contact surface computation to mesh half space code (`#12954`_)  # This adds one more API where an actual ContactSurface is computed (not just the mesh of the contact surface).
* geometry: Add documentation for alternate bvh heuristics (`#12860`_)  # to capture the work done on using the volume heuristic as an alternate splitting algorithm
* geometry: Build and lint fixes for the OpenGL render engine (`#12850`_)
* geometry: Refactor make box mesh code (`#12998`_)  # If the make_box_mesh.h file is included into multiple compilation units all of the in-header functions get compiled into each unit. Many of the functions are declared `static` so they don't collide. However, one is not and that actually causes linker-errors. Rather than just declaring the single offending function static/inline, this moves the implementation into a .cc file to improve overall compilation time. There are three functions that only exist to serve the implementation of the mesh generation. Their declarations have been kept in the header file because they are directly tested in make_box_mesh_test. Also, the function comments were changed from /** */ to /* */ reflecting their non-doxygen, internal:: status. Otherwise, this introduces no new code and doesn't change the text of any comments.
* geometry: [geometry] Soft half space - rigid mesh contact must cull backfaces (`#12976`_)  # * Soft half space - rigid mesh contact must cull backfaces For the same reason we cull faces in the contact surface mesh between soft and rigid meshes, the potential contact surface between rigid mesh and soft half space requires the same functionality. This commit: - Refactors the core culling logic for reuse. - Adds the culling to mesh - half space intersection - Adds a test showing culling is happening.
* geometry: [geometry] Utility for adding polygon to contact surface handles degeneracies (`#12909`_)  # This was born of a need to handle degenerate polygons (polygons with edges of length zero). It invited a revisiting of what the invariants on the parameters should be. So, we handle degeneracies and provide a debug-build analysis to help protect the function from bad values. All of this is now under test. 1. Add DRAKE_ASSERT_VOID to validate inputs 1. Confirm that the normal vector has meanginful length. 2. Confirm that it is sufficiently perpendicular to the plane. 3. Confirm polygon is planar. 2. Document these prerequisites and indication that they will (somewhat be tested in debug builds). 3. Better handle degenerate polygons -- i.e., if it has zero area, don't return a centroid that is all NaNs. 4. Moving the functionality into a new .cc file.
* geometry: [geometry] rename internal::Plane to internal::PosedHalfSpace (`#12820`_)  # Plane was originally internal::HalfSpace. It had previously pulled out to be used more widely. To avoid collision with the geometry::HalfSpace name it was renamed Plane. However, this led to confusion due to the fact that it was reporting a *signed distance*. The resolution: keep the definition of internal::Plane but give it "height" semantics (indicating distance "above" or "below" the plane). Also include a "posed half frame" (defined by its boundary plane). This will allow us to pose a half space or plane in an arbitrary frame, but far more clearly communicate the semantics of the intersections (planes have no volume but half spaces have infinite volume). This performs the renaming, updates usages and documentation.
* geometry: [geometry] update mesh-half space intersection for full hydroleastic compatibility (`#12935`_)  # This includes the following significant changes: - Move implementaiton into .cc file. - Move functions into internal:: namespce - The resultant contact surface *mesh* is defined in the world frame. - Every intersected polygon uses the common centroid-generating algorithm for adding itself into the data. - Modify the interface to be compatible with broadphase culling. - Modification that input meshes are *strictly* double-valued. - Found and corrected indexing error; face-local indices [0, 3) were being passed to access mesh-local vertex positions (indexed in the range [0, N)). This was discovered only indirectly in debug build because the polygon constructed had the wrong normal compared to the face it came from.
* geometry: gl_renderer: Disable opengl_context_test under memcheck (`#12963`_)
* geometry: gl_renderer: Refactor for better stack traces (`#12964`_)  # * gl_renderer: Provide real function for glXGetProcAddressARB When calling functions via indirect lookup, it is helpful for both readability and debug-ability to give them a manifest name so that programming tools can report them in the call stack. Also add (or strengthen) some assertions for improved debugging.

New features

* TBD

Fixes

* TBD

Miscellaneous features and fixes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Add hand/arm only jaco 7dof URDFs, along with sphere collision versions (`#13007`_)
* Add external torque fields for the jaco status message (`#13017`_)
* Add pyplot to geometry_inspector (`#12918`_)
* Add yaml support for merge keys (`#12924`_)

pydrake bindings
~~~~~~~~~~~~~~~~

Newly bound

* pydrake.examples.pendulum.PendulumInput.with_tau (`#12940`_)
* pydrake.examples.pendulum.PendulumParams.with_damping (`#12940`_)
* pydrake.examples.pendulum.PendulumParams.with_gravity (`#12940`_)
* pydrake.examples.pendulum.PendulumParams.with_length (`#12940`_)
* pydrake.examples.pendulum.PendulumParams.with_mass (`#12940`_)
* pydrake.examples.pendulum.PendulumPlant.get_mutable_parameters (`#12940`_)
* pydrake.examples.pendulum.PendulumPlant.get_mutable_state (`#12940`_)
* pydrake.examples.pendulum.PendulumPlant.get_parameters (`#12940`_)
* pydrake.examples.pendulum.PendulumPlant.get_state (`#12940`_)
* pydrake.examples.pendulum.PendulumState.with_theta (`#12940`_)
* pydrake.examples.pendulum.PendulumState.with_thetadot (`#12940`_)
* pydrake.multibody.plant.MultibodyPlant.get_generalized_acceleration_output_port (`#12883`_)
* pydrake.multibody.plant.MultibodyPlant.get_generalized_acceleration_output_port (`#12883`_)
* pydrake.multibody.plant.MultibodyPlant.get_reaction_forces_output_port (`#12883`_)
* pydrake.solvers.mathematicalprogram.MathematicalProgram.generic_constraints (`#13005`_)
* pydrake.solvers.mathematicalprogram.MathematicalProgram.generic_costs (`#13005`_)
* pydrake.symbolic.Expression.is_polynomial (`#12854`_)
* pydrake.systems.analysis.IntegratorBase for more scalar types (`#12922`_)
* pydrake.systems.analysis.RungeKutta2Integrator for more scalar types (`#12922`_)
* pydrake.systems.analysis.RungeKutta3Integrator for more scalar types (`#12922`_)
* pydrake.systems.analysis.Simulator for more scalar types (`#12922`_)
* pydrake.systems.analysis.Simulator.get_actual_realtime_rate (`#12920`_)
* pydrake.systems.analysis.Simulator.get_target_realtime_rate (`#12920`_)
* pydrake.systems.framework.ContinuousState.CopyToVector (`#12865`_)

New features

* Add SystemSliders Tkinter-based controller for vector input ports (`#12925`_)
* Add ConnectPlanarSceneGraphVisualizer sugar (`#12961`_)

Fixes

* API docs now show constructors first (`#12787`_, `#12910`_, `#12921`_)
* Find fallback obj files in PlanarSceneGraphVisualizer (`#12917`_)
* Improve args and doc for pyplot_visualizer (`#12915`_)
* Plot sub-level sets in pydrake.visualization.plotting (`#12854`_)

Build system and dependencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Add new dependency on libx11-dev on Ubuntu; no change on macOS (`#12862`_)
* Upgrade bazel_skylib to latest release 0.9.0 (`#12978`_)
* Upgrade buildifier to latest release 2.2.1 (`#12977`_)
* Upgrade dreal to latest release 4.20.03.4 (`#12905`_)
* Upgrade ghc_filesystem to latest release 1.3.2 (`#12979`_)
* Upgrade meshcat to latest commit (`#12993`_)
* Upgrade meshcat_python to latest commit (`#12993`_)
* Upgrade rules_pkg to latest release 0.2.5 (`#12978`_)
* Upgrade rules_python to latest commit (`#12978`_)
* Annotate repository rules with configure=True (`#12988`_)
* Fix drake_bazel_installed use in docker (`#13016`_)

Newly-deprecated APIs
~~~~~~~~~~~~~~~~~~~~~

* ::Polynomial<T> (`#12946`_)

  * Use drake::Polynomial.

* ::Polynomiald (`#12946`_)

  * Use drake::Polynomiald.

* ::TrigPoly<T> (`#12946`_)

  * Use drake::TrigPoly.

* ::TrigPolyd (`#12946`_)

  * Use drake::TrigPolyd.

* :: VectorXPoly (`#12946`_)

  * Use drake::VectorXPoly.

* ::VectorXTrigPoly (`#12946`_)

  * Use drake::VectorXTrigPoly.

* drake::systems::AntiderivativeFunction::SpecifiedValues (`#12931`_)

  * Use drake::systems::AntiderivativeFunction::IntegrableFunctionContext.

* drake::symbolic::Expression::ToPolynomial (`#12950`_)

  * Use drake::Polynomial::FromExpression.

* drake::systems::InitialValueProblem::SpecifiedValues (`#12931`_)

  * Use drake::systems::InitialValueProblem::OdeContext.

* drake::systems::InitialValueProblem::ODEFunction (`#12931`_)

  * Use drake::systems::InitialValueProblem::OdeFunction.

* drake::systems::ScalarInitialValueProblem::SpecifiedValues (`#12931`_)

  * Use drake::systems::InitialValueProblem::ScalarOdeContext.

* drake::systems::ScalarInitialValueProblem::ScalarODEFunction (`#12931`_)

  * Use drake::systems::ScalarInitialValueProblem::ScalarOdeFunction.

* drake::trajectories::PiecewisePolynomial::Cubic (`#12939`_)

  * Use drake::trajectories::PiecewisePolynomial::CubicWithContinuousSecondDerivatives or drake::trajectories::PiecewisePolynomial::CubicHermite.

* drake::trajectories::PiecewisePolynomial::Pchip (`#12939`_)

  * Use drake::trajectories::PiecewisePolynomial::CubicShapePreserving.

* drake::trajectories::PiecewisePolynomial<T>::PolynomialType (`#12991`_)

  * Use drake::trajectories::Polynomial<T>.

* drake::trajectories::PiecewiseQuaternionSlerp::get_quaternion_knots (`#12939`_)

  * Use drake::trajectories::PiecewiseQuaternionSlerp::get_quaternion_samples.

Removal of deprecated items
~~~~~~~~~~~~~~~~~~~~~~~~~~~

* drake::common::NewPythonVariable (`#12442`_, `#12974`_)
* pydrake.systems.pyplot_visualizer.PyPlotVisualizer.start_recording(show) (`#12974`_)

Notes
-----

This release provides `pre-compiled binaries
<https://github.com/RobotLocomotion/drake/releases/tag/v0.17.0>`__ named
``drake-TBD-{bionic|mac}.tar.gz``. See
https://drake.mit.edu/from_binary.html#nightly-releases for instructions on
how to use them.

Drake binary releases incorporate a pre-compiled version of `SNOPT
<https://ccom.ucsd.edu/~optimizers/solvers/snopt/>`__ as part of the
`Mathematical Program toolbox
<https://drake.mit.edu/doxygen_cxx/group__solvers.html>`__. Thanks to
Philip E. Gill and Elizabeth Wong for their kind support.

..
  Current oldest_commit b2293bc15d192473dbe76e48e9861c860c739549 (inclusive).
  Current newest_commit 8f449959b0bd4acf8495d1a0a1dd4013da0d7be1 (inclusive).
