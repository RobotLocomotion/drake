*************
Drake v0.13.0
*************

Announcements
-------------

* Users who compile Drake from source as a bazel external (as in the `drake_bazel_external`_ pattern) should no longer set ``build --incompatible_remove_legacy_whole_archive=false`` in their projectâ€™s ``.bazelrc`` (`#12262`_).

Breaking changes since v0.12.0
------------------------------

These are breaking changes that did not undergo a deprecation period:

TBD

Changes since v0.12.0:
----------------------

Dynamical Systems
~~~~~~~~~~~~~~~~~

New features

TBD

Fixes

TBD

Mathematical Program
~~~~~~~~~~~~~~~~~~~~

New features

TBD

Fixes

TBD

Multibody Dynamics
~~~~~~~~~~~~~~~~~~

New features

TBD

Fixes

TBD

Miscellaneous features and fixes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TBD

pydrake bindings
~~~~~~~~~~~~~~~~

* TBD DistanceConstraint (`#12346`_)
* TBD System.SetDefaultContext (`#12368`_)
* TBD Simulator.reset_context (`#12368`_)
* TBD overloaded AddQuadraticCost (`#12375`_)
* TBD AddConstraint (`#12371`_)
* TBD py geometry: Ensure all submodules are part of .all (`#12383`_)
* TBD tree.world_model_instance (`#12389`_)
* TBD tree.default_model_instance (`#12389`_)
* TBD geometry properties and role assignment (`#12389`_)
* TBD geometry casting RenderLabel to int (`#12390`_)
* TBD geometry property retrieval (`#12388`_)
* TBD ComputeSignedDistancePairClosestPoints (`#12408`_)
* Fix: Ensure system names get copied for scalar conversion (`#12429`_)

Build system and dependencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Provide nightly binary docker images (`#10554`_, `#12364`_, `#12367`_, `#12446`_)
* Fix missing pthread linkopts for MOSEK (`#12337`_)
* Fix variable name in FindTinyXML2 (`#12339`_)
* Fix ByteSizeLong for Protobuf 3.11.0 or above (`#12425`_)
* Fix linters' find_all_sources --all commands (`#12369`_, `#12385`_, `#12424`_)
* Fix doxygen dot path (`#12416`_)
* Add pkg-config as binary dependency (`#12339`_)
* Add pandas as a source dependency (`#12328`_)
* Change graphviz from source dependency to binary dependency (`#12340`_)
* Upgrade meshcat_python to latest commit (`#12365`_)
* Upgrade fcl to latest commit (`#12395`_)
* Upgrade ghc_filesystem to latest release 1.2.8 (`#12395`_)
* Upgrade ignition_math to latest release 6.4.0 (`#12395`_)
* Upgrade json to latest release 3.7.3 (`#12395`_)
* Upgrade meshcat to latest commit (`#12395`_)
* Upgrade sdformat to latest release 8.6.0 (`#12395`_)
* Upgrade semantic_version to latest release 2.8.3 (`#12395`_)
* Upgrade octomap to latest release 1.9.1 (`#12426`_)
* Upgrade ghc_filesystem to latest release 1.2.10 (`#12426`_)
* Upgrade fmt to latest release 6.1.0 (`#12426`_)
* Upgrade supported Bazel version to 1.2 (`#12396`_)
* Upgrade supported macOS CMake version to 3.16  (`#12396`_)
* Upgrade supported macOS Xcode version to 11.2 (`#12331`_)
* Do not install Python 2.7 on Mac (`#12339`_)

Newly-deprecated APIs
~~~~~~~~~~~~~~~~~~~~~

TBD

Removal of deprecated APIs
~~~~~~~~~~~~~~~~~~~~~~~~~~

* TBD Remove deprecated methods (2019-12-01) (`#12431`_)

This release provides `pre-compiled binaries <https://github.com/RobotLocomotion/drake/releases/tag/v0.13.0>`__ named ``drake-TBD-{bionic|mac}.tar.gz``. See https://drake.mit.edu/from_binary.html#nightly-releases for instructions on how to use them

Drake binary releases incorporate a pre-compiled version of `SNOPT <https://ccom.ucsd.edu/~optimizers/solvers/snopt/>`__ as part of the `Mathematical Program toolbox <https://drake.mit.edu/doxygen_cxx/group__solvers.html>`__. Thanks to Philip E. Gill and Elizabeth Wong for their kind support.

.. _drake_bazel_external: https://github.com/RobotLocomotion/drake-external-examples/tree/master/drake_bazel_external

Commits to be categorized
-------------------------

Current oldest_commit bda9c0f2d2f06bd16f9fc659d976b7bea1fd3216 (inclusive).
Current newest_commit 1fe6d30901aa7003978fa2f84de4fd919bfc5128 (inclusive).

* geometry: create ellipsoid meshes (`#12323`_)
* geometry: export volume and surface meshes and fields to VTK files (`#12311`_)
* Port planar_scenegraph_visualizer from underactuated (`#12218`_, `#12349`_)
* Updates the planar_gripper model to match the hardware (`#12308`_)  # Also updates the planar_brick.sdf model to match the 100x100x70 mm physical brick.
* Store indeterminates and decision variables in symbolic::Polynomial as members (`#11790`_)
* geometry: create pressure fields for ellipsoids and spheres in hydroelastic contact models (`#12333`_)
* Documents forward dynamics algorithm and notation in MBT (`#12317`_)
* Support collision queries with capsule (`#12343`_)
* Add sdf parsing for ellipsoids (`#12324`_)
* Reorder and regroup MBPlant API (`#12342`_)
* Adds a weld joint to the planar_gripper fingers (`#12338`_)  # at the force sensor interface, splitting link 2 into two separate links. This allows reaction force measurement via MBP. Also fixes a bug in the definition of finger orientations.
* Improve RollPitchYaw and RotationMatrix class documentation (#12345) (`#12345`_)
* geometry: pressure fields in cylinders for hydroelastic contact model (`#12348`_)
* Updates integrator documentation (`#12350`_)  # Reorganizes the integrator documentation and documents initial step size behavior (and caveats).
* Renames event collection merge methods (`#12357`_)
* Change MBP's TAMSI solver success assertion into an exception (`#12361`_)  # with a detailed description of possible causes/actions.
* Rename/simplify/reword MultibodyTreeElement to produce better doxygen (`#12352`_)
* Update stale instructions on subclassing Shape specification (`#12372`_)
* Simplify and deprecate get_ accessors in shape specification API (`#12373`_)
* Provide access to owning MBPlant from any MBElement (`#12380`_)
* Adds a query for signed distance between a single pair of geometries (`#12379`_)  # QueryObject has a new method. It attempts to produce a signed distance pair result between a user-specified pair of geometries.
* Add capsule to the solar system visualisation (`#12374`_)
* framework: Improve error message when cloning a non-root Context (`#12391`_)
* Added new generalized acceleration ports (`#12354`_)
* Changed dt to h in integrator documentation (`#12392`_)
* Hydroelastic spatial force visualization (`#12378`_)  # Adds the ability to visualize spatial forces (force and moment) to drake visualizer.
* tutorials: Add example of rendering which uses MultibodyPlant (`#4668d74fb6e4455108b164082712339aa7fd6163`_)
* doc: Make tutorials more discoverable (`#fc5afc581f7dbcccf75133e5f84c9ebd8ab14977`_)
* Add MathematicalProgram::indeterminates_index() (`#12405`_)
* solvers: Add package_library decorations for fbstab (`#12407`_)
* geometry: enable soft/rigid sphere, box, cylinder, and ellipsoid in hydroelastic contact model (`#12358`_)
* pydrake doxygen: Capture convention for partitioned `*_py.cc` modules (`#12403`_)
* geometry: document QueryObject::ComputeContactSurfaces() (`#12413`_)
* Add BoundingVolumeHierarchy class (`#12347`_)  # - add RigidMesh struct layer to hold the bvh, similar to the SoftMesh struct layer - create AABB tree with first pass on splitting branches based on axis spread, optimisations to come
* tools: fix show_hydroelastic_contact plugin of drake_visualizer (`#12417`_)
* Update image_show.py to be python 3 compatible (`#12422`_)
* Add matrix version of Environment::insert (`#12409`_)
* Tests for capsule support for distance to shape in proximity engine (`#12332`_)
* Add Evaluate for symbolic SparseMatrix (`#12406`_)  # Also rewrite GetDistinctVariables using Eigen's visit method.
* More syntactic sugar for SymbolicVectorSystemBuilder (`#12421`_)  # `state`, `input`, `parameter`, `dynamics`, and `output` setters have std::vector variants. So that a user can write `.dynamics({-x_[1], -x_[0] + 3})` instead of `.dynamics(Vector2<Expression>(-x_[1], -x_[0] + 3))`. Also add `SymbolicVectorSystem::dynamics_for_variable`.
* Updates the documentation on the use of accuracy in the Context (`#12428`_)
* Removing grad_H from ContactSurface (`#12432`_)  # We are no longer using the grad_h value to define the normal of the contact surface. Instead, we're using the triangle normals of the surface itself. So, we remove the field and change downstream references to use the face normal instead. This act revealed some imprecision in the documented and implemented behaviors of the triangle normals. Where appropriate new documentation has been added (and tested) to help clarify the expectations of normals.
* tutorials: Add brief tutorial for optimization using MultibodyPlant (`#12433`_)  # Focused on custom evaluators
* Fixes qdot-to-v mapping (and back) for discrete MultibodyPlant (`#12355`_)
* Removed referring triangles from SurfaceMesh (`#12438`_)
* Add the lcm utility for planar manipuland (`#12439`_)  # Add the lcm utility for planar manipuland.
* proto: Use lcm encoding (not protobuf) for call_python (`#12442`_)  # In 0d7f74ca6fe2fb5904a6120c5a453ec04e769e39 way back in 2017, we stopped using LCM for call_matlab because its runtime support library for was incompatible with MATLAB.  However, the message serialization itself was never a problem (only the networking), and anyway for call_python there are no compatibility problems with LCM.  So to drop the heavy dependency on protobuf, we'll use LCM message serialization for call_python RPCs. (As a consequence, some of the build system code for generating protobuf messages is now dead code, but I'll do that purge separately because it's finicky and substantial.)
* Fixes negative real time factors in Drake visualizer (`#12444`_)
* Implements ABA forward dynamics (`#12412`_)
* Pass --no-lock to brew bundle (`#12458`_)  # https://github.com/Homebrew/homebrew-bundle/pull/552 introduces "Brewfile.lock.json" which provides a list of successfully installed packages and their metainfo. For now, git detects those new added "Brewfile.lock.json" as untracked files. Passing `--no-lock` is one solution to this problem. An alternative is to add the pattern in `.gitignore` but I think passing `--no-lock` is a cleaner solution.
* tutorials: Updating wording in MP + MBP tutorial (`#12443`_)
* Adds missing operators to SpatialVector (`#12436`_)
* workspace: Upgrade lcm to latest commit (`#12457`_)
* workspace: Remove unused protobuf (but not libprotobuf) (`#12450`_)  # We no longer need the message generation nor compilation machinery, but we still need the runtime support libraries for some of our deprecated methods. Specifically, all bazel machinery for protobuf message generation is removed: - @com_google_protobuf//... - @drake//:protobuf - @drake//:protobuf_python - @drake//:protoc - @drake//tools/skylark:drake_proto.bzl - @protoc//... Some runtime machinery remains, to be removed on 2020-02-01: - @libprotobuf - setup/mac/binary_distribution/Brewfile:brew 'protobuf' - setup/ubuntu/source_distribution/packages-bionic.txt:python3-protobuf - setup/ubuntu/binary_distribution/packages-bionic.txt:libprotobuf-dev
* Expression(0.0) re-uses the pointer of Expression::Zero() (`#12459`_)  # Given a scalar type T, Eigen assumes that the constructor for T(0) is idempotent. Consequently, it should not involve memory-allocation to avoid a memory leak. This is not a correct assumption and needs to be fixed, but it takes time to fix the upstream and use the latest version of Eigen. Here, we want to provide a workaround on our side. See https://github.com/RobotLocomotion/drake/issues/12453.
* Make effective use of SpatialAcceleration's addition operators (`#12462`_)
* 'Fix' sphinx to get __init__ documentation (`#12452`_)
* Adds LCM message utilities for the planar gripper (`#12449`_)
* Define and use a toolchain for Python (`#12377`_)
* Use rules_python for Python build rules (`#12377`_)
* Update optitrack-driver with rules_python support (`#12377`_)
* Move jupyter notebook and ipywidgets to binary prerequisite install (`#12461`_)
* gitattributes: Update for modern bazel spellings (`#12465`_)
* Un-pin sphinx for macOS (`#12467`_)
* Add SymbolicVectorSystemBuilder::LinearizeDynamics (`#12466`_)
* mkdoc: Fix bug where some internal names may leak in (`#12476`_)  # Remove SKIP_RECURSE_NAMES
* Reverses the surface normal convention in ContactSurface (`#12463`_)
* Add bindings for RevoluteSpring (`#12481`_)
* Reverts #11560 (`#12486`_)  # , which had multiple defects (described on that github issue), and which broke the existing uses.
* Adding drake contact material properties to sdf/urdf parsing (`#12464`_)  # This introduces a new XML sub-tree that is largely common between both SDF and URDF. SDF version: <drake:proximity_properties> <drake:mesh_resolution_hint>1.3</drake:hydroelastic_resolution_hint> <drake:elastic_modulus>1e8</drake:elastic_modulus> <drake:hunt_crossley_dissipation>0.25</drake:hunt_crossley_dissipation> <drake:mu_dynamic>0.7</drake:mu_dynamic> <drake:mu_static>0.7</drake:mu_static> </drake:proximity_properties> URDF version: <drake:proximity_properties> <drake:mesh_resolution_hint value="1.3" /> <drake:elastic_modulus value="1e8" /> <drake:hunt_crossley_dissipation value="0.25" /> <drake:mu_dynamic value="0.7" /> <drake:mu_static value="0.7" /> </drake:proximity_properties> (URDF differs because URDF has a style that uses attributes whereas SDF eschews them.) - Parsing collision geometry now creates a populated ProximityProperties and stores the parsed properties there. - There is some code that provides legacy compatibility with old mechanisms for specifying coefficients of friction so that existing files will still work (albeit with warnings). - MBP API has been extended to accept proximity properties compatible with this parsing logic. The old API needs to be deprecated (in a follow up commit). We still need to add "soft" deprecation for when we use the legacy functionality. It can't be compile-time, so it'll have to be warnings with a time stamp.
