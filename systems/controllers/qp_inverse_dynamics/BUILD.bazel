# -*- python -*-

load("//tools/lint:lint.bzl", "add_lint_tests")
load("//tools:drake.bzl", "drake_cc_googletest", "drake_cc_library")
load(
    "@drake//tools/skylark:drake_proto.bzl",
    "drake_cc_proto_library",
)
load("//tools/skylark:test_tags.bzl", "gurobi_test_tags")

package(default_visibility = ["//visibility:public"])

exports_files(
    ["test/iiwa.alias_groups"],
)

exports_files(
    ["test/iiwa.id_controller_config"],
)

drake_cc_proto_library(
    name = "id_controller_config",
    srcs = [
        "id_controller_config.proto",
    ],
)

drake_cc_library(
    name = "param_parser",
    srcs = [
        "param_parser.cc",
    ],
    hdrs = [
        "param_parser.h",
    ],
    deps = [
        ":control",
        ":id_controller_config",
        "//common/proto:protobuf",
        "//multibody:rigid_body_tree_alias_groups",
    ],
)

drake_cc_library(
    name = "robot_kinematic_state",
    srcs = [
        "robot_kinematic_state.cc",
    ],
    hdrs = [
        "robot_kinematic_state.h",
    ],
    deps = [
        "//multibody:rigid_body_tree",
    ],
)

drake_cc_library(
    # We use the label name ":control" (even though the files are not named
    # that way) because the name ":qp_inverse_dynamics" is reserved for the
    # drake_cc_package_library that provides all of the code from this package
    # in a single library.  Since our package has more code than just this
    # controller, we need to use a name that implies a smaller scope.
    name = "control",
    srcs = [
        "qp_inverse_dynamics.cc",
        "qp_inverse_dynamics_common.cc",
    ],
    hdrs = [
        "qp_inverse_dynamics.h",
        "qp_inverse_dynamics_common.h",
    ],
    deps = [
        ":robot_kinematic_state",
        "//common:essential",
        "//math:gradient",
        "//multibody:rigid_body_tree",
        "//solvers:mathematical_program",
    ],
)

drake_cc_library(
    name = "qp_inverse_dynamics_system",
    srcs = ["qp_inverse_dynamics_system.cc"],
    hdrs = ["qp_inverse_dynamics_system.h"],
    deps = [
        ":control",
        "//lcmtypes:inverse_dynamics_debug_info",
        "//multibody:rigid_body_tree",
        "//systems/framework:leaf_system",
    ],
)

drake_cc_library(
    name = "lcm_utils",
    srcs = ["lcm_utils.cc"],
    hdrs = ["lcm_utils.h"],
    deps = [
        ":control",
        "//lcmtypes:body_acceleration",
        "//lcmtypes:constrained_values",
        "//lcmtypes:contact_information",
        "//lcmtypes:desired_body_motion",
        "//lcmtypes:desired_centroidal_momentum_dot",
        "//lcmtypes:desired_dof_motions",
        "//lcmtypes:qp_input",
        "//lcmtypes:resolved_contact",
        "@lcmtypes_bot2_core",
    ],
)

drake_cc_library(
    name = "qp_output_translator_system",
    srcs = ["qp_output_translator_system.cc"],
    hdrs = ["qp_output_translator_system.h"],
    deps = [
        ":control",
        "//multibody:rigid_body_tree",
        "//systems/framework:leaf_system",
        "@lcmtypes_bot2_core",
    ],
)

drake_cc_library(
    name = "robot_kinematic_state_translator_system",
    srcs = ["robot_kinematic_state_translator_system.cc"],
    hdrs = ["robot_kinematic_state_translator_system.h"],
    deps = [
        ":robot_kinematic_state",
        "//multibody:rigid_body_tree",
        "//systems/framework:leaf_system",
    ],
)

# === test/ ===

drake_cc_googletest(
    name = "lcm_utils_test",
    data = [
        "//examples/valkyrie:models",
    ],
    deps = [
        ":lcm_utils",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//multibody/parsers",
    ],
)

drake_cc_googletest(
    name = "param_parser_test",
    srcs = ["test/param_parser_test.cc"],
    data = [
        "test/params.alias_groups",
        "test/params.id_controller_config",
        "//examples/valkyrie:models",
    ],
    deps = [
        ":param_parser",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//multibody:rigid_body_tree_alias_groups",
        "//multibody/parsers",
    ],
)

drake_cc_googletest(
    name = "iiwa_inverse_dynamics_test",
    srcs = ["test/iiwa_inverse_dynamics_test.cc"],
    data = [
        "test/iiwa.alias_groups",
        "test/iiwa.id_controller_config",
        "//manipulation/models/iiwa_description:models",
    ],
    tags = gurobi_test_tags(),
    deps = [
        ":control",
        ":param_parser",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//multibody/parsers",
        "//systems/controllers:setpoint",
    ],
)

drake_cc_googletest(
    name = "qp_inverse_dynamics_system_test",
    srcs = ["test/qp_inverse_dynamics_system_test.cc"],
    data = [
        "test/iiwa.alias_groups",
        "test/iiwa.id_controller_config",
        "//manipulation/models/iiwa_description:models",
    ],
    tags = gurobi_test_tags(),
    deps = [
        ":qp_inverse_dynamics_system",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//multibody/parsers",
        "//systems/analysis:simulator",
        "//systems/controllers:setpoint",
        "//systems/controllers/qp_inverse_dynamics:param_parser",
        "//systems/framework",
        "//systems/primitives:constant_value_source",
    ],
)

drake_cc_googletest(
    name = "qp_output_translator_system_test",
    srcs = ["test/qp_output_translator_system_test.cc"],
    data = [
        "//examples/valkyrie:models",
    ],
    deps = [
        ":qp_output_translator_system",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//multibody/parsers",
        "//systems/framework",
    ],
)

drake_cc_googletest(
    name = "valkyrie_balancing_test",
    timeout = "moderate",
    srcs = ["test/valkyrie_balancing_test.cc"],
    data = [
        "test/valkyrie.alias_groups",
        "test/valkyrie.id_controller_config",
        "//examples/valkyrie:models",
    ],
    tags = gurobi_test_tags(),
    deps = [
        ":control",
        ":param_parser",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//examples/valkyrie:valkyrie_constants",
        "//multibody/parsers",
        "//systems/controllers:setpoint",
    ],
)

add_lint_tests()
