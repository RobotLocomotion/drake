# -*- python -*-

load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_binary",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_package_library",
)
load(
    "@drake//tools/vector_gen:vector_gen.bzl",
    "drake_cc_vector_gen_library",
)
load("//tools/lint:lint.bzl", "add_lint_tests")

package(default_visibility = ["//visibility:public"])

drake_cc_package_library(
    name = "sensors",
    deps = [
        ":accelerometer",
        ":beam_model",
        ":beam_model_params",
        ":camera_info",
        ":depth_sensor",
        ":depth_sensor_to_lcm_point_cloud_message",
        ":gyroscope",
        ":image",
        ":image_to_lcm_image_array_t",
        ":optitrack_encoder",
        ":optitrack_sender",
        ":rgbd_camera",
        ":rgbd_renderer",
        ":rotary_encoders",
        ":vtk_util",
    ],
)

drake_cc_library(
    name = "accelerometer",
    srcs = [
        "accelerometer.cc",
        "accelerometer_output.cc",
    ],
    hdrs = [
        "accelerometer.h",
        "accelerometer_output.h",
    ],
    deps = [
        "//multibody:rigid_body_tree",
        "//multibody/rigid_body_plant",
        "//systems/framework",
    ],
)

drake_cc_vector_gen_library(
    name = "beam_model_params",
    srcs = ["beam_model_params.named_vector"],
)

drake_cc_library(
    name = "beam_model",
    srcs = ["beam_model.cc"],
    hdrs = ["beam_model.h"],
    deps = [
        ":beam_model_params",
        ":depth_sensor",
        "//common:unused",
        "//systems/framework",
    ],
)

drake_cc_library(
    name = "camera_info",
    srcs = [
        "camera_info.cc",
    ],
    hdrs = [
        "camera_info.h",
    ],
    deps = [
        "//systems/framework",
    ],
)

drake_cc_library(
    name = "image",
    srcs = ["image.cc"],
    hdrs = [
        "image.h",
        "pixel_types.h",
    ],
    deps = [
        "//common:essential",
        "//common:reset_after_move",
        "//common:symbolic",
    ],
)

drake_cc_library(
    name = "image_to_lcm_image_array_t",
    srcs = [
        "image_to_lcm_image_array_t.cc",
    ],
    hdrs = [
        "image_to_lcm_image_array_t.h",
    ],
    deps = [
        ":image",
        "//common:essential",
        "//systems/framework",
        "@lcmtypes_robotlocomotion",
        "@zlib",
    ],
)

drake_cc_library(
    name = "depth_sensor",
    srcs = [
        "depth_sensor.cc",
        "depth_sensor_output.cc",
        "depth_sensor_specification.cc",
    ],
    hdrs = [
        "depth_sensor.h",
        "depth_sensor_output.h",
        "depth_sensor_specification.h",
    ],
    deps = [
        "//multibody:rigid_body_tree",
        "//systems/framework",
        "//systems/rendering:pose_vector",
    ],
)

drake_cc_library(
    name = "depth_sensor_to_lcm_point_cloud_message",
    srcs = [
        "depth_sensor_to_lcm_point_cloud_message.cc",
    ],
    hdrs = [
        "depth_sensor_to_lcm_point_cloud_message.h",
    ],
    deps = [
        ":depth_sensor",
        "//multibody:rigid_body_tree",
        "//systems/rendering:pose_vector",
        "@lcmtypes_bot2_core",
    ],
)

drake_cc_library(
    name = "gyroscope",
    srcs = [
        "gyroscope.cc",
        "gyroscope_output.cc",
    ],
    hdrs = [
        "gyroscope.h",
        "gyroscope_output.h",
    ],
    deps = [
        "//multibody:rigid_body_tree",
        "//systems/framework",
    ],
)

drake_cc_library(
    name = "vtk_util",
    srcs = ["vtk_util.cc"],
    hdrs = ["vtk_util.h"],
    # We must not expose `#include <vtk/...>` in any of our installed headers;
    # vtk_util.h is only included internally within this package.
    install_hdrs_exclude = ["vtk_util.h"],
    visibility = ["//visibility:private"],
    deps = [
        "//common:essential",
        "@eigen",
        "@vtk//:vtkCommonCore",
        "@vtk//:vtkCommonTransforms",
        "@vtk//:vtkFiltersSources",
    ],
)

drake_cc_library(
    name = "rgbd_renderer",
    srcs = [
        "rgbd_renderer.cc",
        "rgbd_renderer_vtk.cc",
    ],
    hdrs = [
        "color_palette.h",
        "depth_shaders.h",
        "rgbd_renderer.h",
        "rgbd_renderer_vtk.h",
    ],
    deps = [
        ":image",
        ":vtk_util",
        "//common",
        "//multibody/shapes",
        "@eigen",
        "@vtk//:vtkCommonCore",
        "@vtk//:vtkCommonDataModel",
        "@vtk//:vtkCommonTransforms",
        "@vtk//:vtkFiltersGeneral",
        "@vtk//:vtkFiltersSources",
        "@vtk//:vtkIOGeometry",
        "@vtk//:vtkIOImage",
        "@vtk//:vtkRenderingCore",
        "@vtk//:vtkRenderingOpenGL2",
    ],
)

drake_cc_library(
    name = "rgbd_camera",
    srcs = ["rgbd_camera.cc"],
    hdrs = ["rgbd_camera.h"],
    deps = [
        ":camera_info",
        ":image",
        ":rgbd_renderer",
        ":vtk_util",
        "//math:geometric_transform",
        "//multibody:rigid_body_frame",
        "//multibody:rigid_body_tree",
        "//systems/framework",
        "//systems/primitives",
        "//systems/rendering:pose_vector",
        "@eigen",
        "@vtk//:vtkCommonCore",
        "@vtk//:vtkCommonDataModel",
        "@vtk//:vtkCommonTransforms",
        "@vtk//:vtkFiltersGeneral",
        "@vtk//:vtkFiltersSources",
        "@vtk//:vtkIOGeometry",
        "@vtk//:vtkIOImage",
        "@vtk//:vtkRenderingCore",
        "@vtk//:vtkRenderingOpenGL2",
    ],
)

drake_cc_binary(
    name = "rgbd_camera_publish_lcm_example",
    srcs = [
        "rgbd_camera_publish_lcm_example.cc",
    ],
    deps = [
        ":image_to_lcm_image_array_t",
        ":rgbd_camera",
        "//common:unused",
        "//lcm",
        "//multibody:rigid_body_tree",
        "//multibody:rigid_body_tree_construction",
        "//multibody/parsers",
        "//multibody/rigid_body_plant",
        "//multibody/rigid_body_plant:drake_visualizer",
        "//systems/analysis:simulator",
        "//systems/lcm:lcm_pubsub_system",
        "//systems/rendering:pose_stamped_t_pose_vector_translator",
        "@gflags",
    ],
)

drake_cc_library(
    name = "rotary_encoders",
    srcs = ["rotary_encoders.cc"],
    hdrs = ["rotary_encoders.h"],
    deps = [
        "//common:unused",
        "//systems/framework",
    ],
)

drake_cc_library(
    name = "accelerometer_example_diagram",
    testonly = 1,
    srcs = [
        "test/accelerometer_test/accelerometer_example_diagram.cc",
        "test/accelerometer_test/accelerometer_test_logger.cc",
    ],
    hdrs = [
        "test/accelerometer_test/accelerometer_example_diagram.h",
        "test/accelerometer_test/accelerometer_test_logger.h",
    ],
    data = [
        "//examples/pendulum:models",
    ],
    visibility = ["//visibility:private"],
    deps = [
        ":accelerometer",
        "//common:essential",
        "//common:find_resource",
        "//multibody/parsers",
        "//multibody/rigid_body_plant",
        "//multibody/rigid_body_plant:drake_visualizer",
        "//systems/primitives:constant_vector_source",
        "//systems/primitives:signal_logger",
    ],
)

drake_cc_binary(
    name = "accelerometer_example",
    testonly = 1,
    srcs = [
        "test/accelerometer_test/accelerometer_example.cc",
    ],
    deps = [
        ":accelerometer_example_diagram",
        "//common:text_logging_gflags",
        "//lcm",
        "//systems/analysis:simulator",
        "@gflags",
    ],
)

drake_cc_library(
    name = "optitrack_sender",
    srcs = ["optitrack_sender.cc"],
    hdrs = ["optitrack_sender.h"],
    deps = [
        ":optitrack_encoder",
        "//systems/framework:leaf_system",
        "@optitrack_driver//lcmtypes:optitrack_lcmtypes",
    ],
)

drake_cc_library(
    name = "optitrack_encoder",
    srcs = ["optitrack_encoder.cc"],
    hdrs = ["optitrack_encoder.h"],
    deps = [
        "//systems/framework:leaf_system",
        "//systems/rendering:pose_bundle",
    ],
)

# === test/ ===

drake_cc_googletest(
    name = "accelerometer_test",
    srcs = [
        "test/accelerometer_test/accelerometer_test.cc",
    ],
    data = [
        "//multibody:models",
    ],
    deps = [
        ":accelerometer_example_diagram",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//systems/analysis:simulator",
    ],
)

drake_cc_googletest(
    name = "beam_model_test",
    deps = [
        ":beam_model",
        "//common/proto:call_matlab",
        "//systems/analysis:simulator",
        "//systems/primitives:constant_vector_source",
        "//systems/primitives:random_source",
        "//systems/primitives:signal_logger",
    ],
)

drake_cc_googletest(
    name = "camera_info_test",
    deps = [
        ":camera_info",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "image_test",
    deps = [
        ":image",
    ],
)

drake_cc_googletest(
    name = "depth_sensor_test",
    srcs = ["test/depth_sensor_test.cc"],
    deps = [
        ":depth_sensor",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "depth_sensor_to_lcm_point_cloud_message_test",
    srcs = ["test/depth_sensor_to_lcm_point_cloud_message_test.cc"],
    deps = [
        ":depth_sensor_to_lcm_point_cloud_message",
        "//lcm:mock",
    ],
)

drake_cc_googletest(
    name = "gyroscope_test",
    srcs = ["test/gyroscope_test.cc"],
    data = [
        "//multibody:models",
    ],
    deps = [
        ":gyroscope",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//multibody/parsers",
    ],
)

filegroup(
    name = "test_models",
    testonly = 1,
    srcs = [
        "test/models/box.sdf",
        "test/models/meshes/box.obj",
        "test/models/meshes/box.png",
        "test/models/nothing.sdf",
        "test/models/sphere.sdf",
    ],
)

drake_cc_googletest(
    name = "rgbd_camera_test",
    data = [
        ":test_models",
    ],
    tags = [
        # Disable under LeakSanitizer and Valgrind Memcheck due to
        # driver-related leaks. For more information, see #7520.
        "no_lsan",
        "no_memcheck",
        # Mitigates driver-related issues when running under `bazel test`. For
        # more information, see #7004.
        "no-sandbox",
    ],
    deps = [
        ":rgbd_camera",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//multibody:rigid_body_tree_construction",
        "//multibody/parsers",
        "//multibody/rigid_body_plant",
    ],
)

drake_cc_library(
    name = "rgbd_renderer_test_util",
    testonly = 1,
    hdrs = ["test/rgbd_renderer_test_util.h"],
)

drake_cc_googletest(
    name = "rgbd_renderer_vtk_test",
    data = [
        ":test_models",
    ],
    tags = [
        # Disable under LeakSanitizer and Valgrind Memcheck due to
        # driver-related leaks. For more information, see #7520.
        "no_lsan",
        "no_memcheck",
        # Mitigates driver-related issues when running under `bazel test`. For
        # more information, see #7004.
        "no-sandbox",
    ],
    deps = [
        ":rgbd_renderer",
        ":rgbd_renderer_test_util",
        "//common:find_resource",
        "//common/test_utilities:eigen_matrix_compare",
        "//math:geometric_transform",
    ],
)

sh_test(
    name = "rgbd_camera_publish_lcm_test",
    size = "small",
    srcs = ["rgbd_camera_publish_lcm_example"],
    args = [
        "--sdf_dir=" + native.package_name() + "/test/models",
        "--duration=0.1",
    ],
    data = [
        ":test_models",
    ],
    tags = [
        # TODO(mitiguy) Issue #8368: Test rgbd_camera_publish_lcm_test in the
        # BUILD.bazel file in directory drake/systems/sensors cannot be run
        # anymore due to the new RotationMatrix class which insists on being a
        # proper orthogonal rotation matrix.  This test produces a quaternion
        # with NANs which causes the RotationMatrix class to throw an exception
        # in debug builds. This test is labeled with tags = "manual" so CI does
        # not run it. This test is defective and should never have passed
        # earlier code review.
        "manual",
        # Mitigates driver-related issues when running under `bazel test`. For
        # more information, see #7004.
        "no-sandbox",
    ],
)

drake_cc_googletest(
    name = "rotary_encoders_test",
    deps = [
        ":rotary_encoders",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:symbolic_test_util",
        "//systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "vtk_util_test",
    deps = [":vtk_util"],
)

drake_cc_googletest(
    name = "image_to_lcm_image_array_t_test",
    deps = [":image_to_lcm_image_array_t"],
)

drake_cc_googletest(
    name = "optitrack_encoder_test",
    srcs = ["test/optitrack_encoder_test.cc"],
    deps = [
        ":optitrack_encoder",
        "//systems/framework",
    ],
)

drake_cc_googletest(
    name = "optitrack_sender_test",
    srcs = ["test/optitrack_sender_test.cc"],
    deps = [
        ":optitrack_encoder",
        ":optitrack_sender",
        "//systems/framework",
        "@optitrack_driver//lcmtypes:optitrack_lcmtypes",
    ],
)

add_lint_tests()
