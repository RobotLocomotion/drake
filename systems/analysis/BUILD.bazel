# -*- python -*-

load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_package_library",
)
load("//tools/lint:lint.bzl", "add_lint_tests")

package(default_visibility = ["//visibility:public"])

drake_cc_package_library(
    name = "analysis",
    deps = [
        ":antiderivative_function",
        ":explicit_euler_integrator",
        ":implicit_euler_integrator",
        ":initial_value_problem",
        ":integrator_base",
        ":lyapunov",
        ":runge_kutta2_integrator",
        ":runge_kutta3_integrator",
        ":scalar_initial_value_problem",
        ":semi_explicit_euler_integrator",
        ":simulator",
    ],
)

drake_cc_library(
    name = "integrator_base",
    hdrs = ["integrator_base.h"],
    deps = [
        "//systems/framework:context",
        "//systems/framework:system",
    ],
)

drake_cc_library(
    name = "explicit_euler_integrator",
    srcs = [],
    hdrs = ["explicit_euler_integrator.h"],
    deps = [
        ":integrator_base",
    ],
)

drake_cc_library(
    name = "lyapunov",
    srcs = ["lyapunov.cc"],
    hdrs = ["lyapunov.h"],
    deps = [
        "//common:essential",
        "//math:autodiff",
        "//math:gradient",
        "//solvers:mathematical_program",
        "//systems/framework",
    ],
)

drake_cc_library(
    name = "runge_kutta2_integrator",
    srcs = [],
    hdrs = ["runge_kutta2_integrator.h"],
    deps = [
        ":integrator_base",
    ],
)

drake_cc_library(
    name = "implicit_euler_integrator",
    srcs = ["implicit_euler_integrator.cc"],
    hdrs = [
        "implicit_euler_integrator.h",
        "implicit_euler_integrator-inl.h",
    ],
    deps = [
        ":integrator_base",
        "//math:gradient",
    ],
)

drake_cc_library(
    name = "runge_kutta3_integrator",
    srcs = ["runge_kutta3_integrator.cc"],
    hdrs = [
        "runge_kutta3_integrator.h",
        "runge_kutta3_integrator-inl.h",
    ],
    deps = [
        ":integrator_base",
        ":runge_kutta2_integrator",
    ],
)

drake_cc_library(
    name = "semi_explicit_euler_integrator",
    srcs = [],
    hdrs = [
        "semi_explicit_euler_integrator.h",
    ],
    deps = [
        ":integrator_base",
    ],
)

drake_cc_library(
    name = "initial_value_problem",
    srcs = [
        "initial_value_problem.cc",
    ],
    hdrs = [
        "initial_value_problem.h",
        "initial_value_problem-inl.h",
    ],
    deps = [
        ":runge_kutta3_integrator",
        "//common:essential",
        "//systems/framework:context",
        "//systems/framework:continuous_state",
        "//systems/framework:leaf_system",
        "//systems/framework:parameters",
        "//systems/framework:vector",
    ],
)

drake_cc_library(
    name = "scalar_initial_value_problem",
    srcs = [
        "scalar_initial_value_problem.cc",
    ],
    hdrs = [
        "scalar_initial_value_problem.h",
    ],
    deps = [
        ":initial_value_problem",
        "//common:essential",
        "//common:unused",
    ],
)

drake_cc_library(
    name = "antiderivative_function",
    srcs = [
        "antiderivative_function.cc",
    ],
    hdrs = [
        "antiderivative_function.h",
    ],
    deps = [
        ":scalar_initial_value_problem",
        "//common:essential",
        "//common:unused",
    ],
)

drake_cc_library(
    name = "simulator",
    srcs = ["simulator.cc"],
    hdrs = ["simulator.h"],
    deps = [
        ":runge_kutta2_integrator",
        ":runge_kutta3_integrator",
        "//common:extract_double",
        "//systems/framework:context",
        "//systems/framework:system",
    ],
)

# === test/ ===

drake_cc_googletest(
    name = "simulator_test",
    deps = [
        ":explicit_euler_integrator",
        ":implicit_euler_integrator",
        ":runge_kutta3_integrator",
        ":simulator",
        "//common/test_utilities:is_dynamic_castable",
        "//systems/analysis/test_utilities",
    ],
)

drake_cc_googletest(
    name = "explicit_euler_integrator_test",
    deps = [
        ":explicit_euler_integrator",
        "//systems/analysis/test_utilities",
    ],
)

drake_cc_googletest(
    name = "implicit_euler_integrator_test",
    # Test timeout increased to not timeout when run with Valgrind.
    timeout = "moderate",
    deps = [
        ":implicit_euler_integrator",
        "//systems/analysis/test_utilities",
        "//systems/plants/spring_mass_system",
    ],
)

drake_cc_googletest(
    name = "lyapunov_test",
    deps = [
        ":lyapunov",
        "//examples/pendulum:pendulum_plant",
    ],
)

drake_cc_googletest(
    name = "runge_kutta2_integrator_test",
    deps = [
        ":runge_kutta2_integrator",
        "//systems/analysis/test_utilities",
    ],
)

drake_cc_googletest(
    name = "runge_kutta3_integrator_test",
    # Test timeout increased to not timeout when run with Valgrind.
    timeout = "moderate",
    deps = [
        ":runge_kutta3_integrator",
        "//math:geometric_transform",
        "//multibody/parsers",
        "//multibody/rigid_body_plant",
        "//systems/analysis/test_utilities",
    ],
)

drake_cc_googletest(
    name = "semi_explicit_euler_integrator_test",
    deps = [
        ":explicit_euler_integrator",
        ":semi_explicit_euler_integrator",
        "//multibody/joints",
        "//multibody/rigid_body_plant",
        "//systems/analysis/test_utilities",
    ],
)

drake_cc_googletest(
    name = "initial_value_problem_test",
    deps = [
        ":initial_value_problem",
        ":runge_kutta2_integrator",
        "//common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "scalar_initial_value_problem_test",
    deps = [
        ":scalar_initial_value_problem",
    ],
)

drake_cc_googletest(
    name = "antiderivative_function_test",
    deps = [
        ":antiderivative_function",
    ],
)

add_lint_tests()
