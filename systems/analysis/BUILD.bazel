# -*- python -*-

load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_package_library",
)
load("//tools/lint:lint.bzl", "add_lint_tests")

package(default_visibility = ["//visibility:public"])

drake_cc_package_library(
    name = "analysis",
    deps = [
        ":antiderivative_function",
        ":bogacki_shampine3_integrator",
        ":dense_output",
        ":explicit_euler_integrator",
        ":hermitian_dense_output",
        ":implicit_euler_integrator",
        ":implicit_integrator",
        ":initial_value_problem",
        ":integrator_base",
        ":lyapunov",
        ":monte_carlo",
        ":radau_integrator",
        ":runge_kutta2_integrator",
        ":runge_kutta3_integrator",
        ":runge_kutta5_integrator",
        ":scalar_dense_output",
        ":scalar_initial_value_problem",
        ":scalar_view_dense_output",
        ":semi_explicit_euler_integrator",
        ":simulator",
        ":simulator_status",
        ":stepwise_dense_output",
    ],
)

drake_cc_library(
    name = "simulator_gflags",
    srcs = ["simulator_gflags.cc"],
    hdrs = ["simulator_gflags.h"],
    tags = [
        # Don't add this library into the ":analysis" package library.
        # Only programs with a main() function should ever use this header.
        "exclude_from_package",
        # Don't install this header via this cc_library, because that would
        # introduce a dependency from libdrake onto gflags.
        "exclude_from_libdrake",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        ":bogacki_shampine3_integrator",
        ":explicit_euler_integrator",
        ":implicit_euler_integrator",
        ":radau_integrator",
        ":runge_kutta2_integrator",
        ":runge_kutta3_integrator",
        ":runge_kutta5_integrator",
        ":semi_explicit_euler_integrator",
        ":simulator",
        "//common:essential",
        "@gflags",
    ],
)

drake_cc_library(
    name = "bogacki_shampine3_integrator",
    srcs = ["bogacki_shampine3_integrator.cc"],
    hdrs = ["bogacki_shampine3_integrator.h"],
    deps = [
        ":integrator_base",
    ],
)

drake_cc_library(
    name = "dense_output",
    hdrs = ["dense_output.h"],
    deps = [
        "//common:essential",
        "@fmt",
    ],
)

drake_cc_library(
    name = "stepwise_dense_output",
    hdrs = ["stepwise_dense_output.h"],
    deps = [
        ":dense_output",
        "//common:essential",
    ],
)

drake_cc_library(
    name = "hermitian_dense_output",
    hdrs = ["hermitian_dense_output.h"],
    deps = [
        ":stepwise_dense_output",
        "//common:autodiff",
        "//common:essential",
        "//common:extract_double",
        "//common/trajectories:piecewise_polynomial",
        "//systems/framework:vector",
    ],
)

drake_cc_library(
    name = "scalar_dense_output",
    hdrs = ["scalar_dense_output.h"],
    deps = [
        "//common:essential",
    ],
)

drake_cc_library(
    name = "scalar_view_dense_output",
    hdrs = ["scalar_view_dense_output.h"],
    deps = [
        ":dense_output",
        ":scalar_dense_output",
        "//common:essential",
        "@fmt",
    ],
)

drake_cc_library(
    name = "integrator_base",
    hdrs = ["integrator_base.h"],
    deps = [
        ":dense_output",
        ":hermitian_dense_output",
        ":stepwise_dense_output",
        "//systems/framework:context",
        "//systems/framework:system",
    ],
)

drake_cc_library(
    name = "explicit_euler_integrator",
    srcs = [],
    hdrs = ["explicit_euler_integrator.h"],
    deps = [
        ":integrator_base",
    ],
)

drake_cc_library(
    name = "lyapunov",
    srcs = ["lyapunov.cc"],
    hdrs = ["lyapunov.h"],
    deps = [
        "//common:essential",
        "//math:autodiff",
        "//math:gradient",
        "//solvers:mathematical_program",
        "//solvers:solve",
        "//systems/framework",
    ],
)

drake_cc_library(
    name = "monte_carlo",
    srcs = ["monte_carlo.cc"],
    hdrs = ["monte_carlo.h"],
    deps = [
        ":simulator",
        "//systems/framework",
    ],
)

drake_cc_library(
    name = "runge_kutta2_integrator",
    srcs = [],
    hdrs = ["runge_kutta2_integrator.h"],
    deps = [
        ":integrator_base",
    ],
)

drake_cc_library(
    name = "runge_kutta3_integrator",
    srcs = ["runge_kutta3_integrator.cc"],
    hdrs = [
        "runge_kutta3_integrator.h",
        "runge_kutta3_integrator-inl.h",
    ],
    deps = [
        ":integrator_base",
        ":runge_kutta2_integrator",
    ],
)

drake_cc_library(
    name = "runge_kutta5_integrator",
    srcs = ["runge_kutta5_integrator.cc"],
    hdrs = ["runge_kutta5_integrator.h"],
    deps = [
        ":integrator_base",
    ],
)

drake_cc_library(
    name = "implicit_euler_integrator",
    srcs = ["implicit_euler_integrator.cc"],
    hdrs = [
        "implicit_euler_integrator.h",
        "implicit_euler_integrator-inl.h",
    ],
    deps = [
        ":implicit_integrator",
        ":runge_kutta2_integrator",
        "//math:gradient",
    ],
)

drake_cc_library(
    name = "implicit_integrator",
    srcs = ["implicit_integrator.cc"],
    hdrs = [
        "implicit_integrator.h",
    ],
    deps = [
        ":integrator_base",
        "//math:gradient",
    ],
)

drake_cc_library(
    name = "radau_integrator",
    srcs = ["radau_integrator.cc"],
    hdrs = [
        "radau_integrator.h",
    ],
    deps = [
        ":bogacki_shampine3_integrator",
        ":implicit_integrator",
        ":runge_kutta2_integrator",
    ],
)

drake_cc_library(
    name = "semi_explicit_euler_integrator",
    srcs = [],
    hdrs = [
        "semi_explicit_euler_integrator.h",
    ],
    deps = [
        ":integrator_base",
    ],
)

drake_cc_library(
    name = "initial_value_problem",
    srcs = [
        "initial_value_problem.cc",
    ],
    hdrs = [
        "initial_value_problem.h",
        "initial_value_problem-inl.h",
    ],
    deps = [
        ":dense_output",
        ":integrator_base",
        ":runge_kutta3_integrator",
        "//common:default_scalars",
        "//systems/framework:context",
        "//systems/framework:continuous_state",
        "//systems/framework:leaf_system",
        "//systems/framework:parameters",
        "//systems/framework:vector",
    ],
)

drake_cc_library(
    name = "scalar_initial_value_problem",
    srcs = [
        "scalar_initial_value_problem.cc",
    ],
    hdrs = [
        "scalar_initial_value_problem.h",
        "scalar_initial_value_problem-inl.h",
    ],
    deps = [
        ":initial_value_problem",
        ":scalar_dense_output",
        ":scalar_view_dense_output",
        "//common:default_scalars",
        "//common:essential",
        "//common:unused",
    ],
)

drake_cc_library(
    name = "antiderivative_function",
    srcs = [
        "antiderivative_function.cc",
    ],
    hdrs = [
        "antiderivative_function.h",
        "antiderivative_function-inl.h",
    ],
    deps = [
        ":scalar_dense_output",
        ":scalar_initial_value_problem",
        "//common:default_scalars",
        "//common:essential",
        "//common:unused",
    ],
)

drake_cc_library(
    name = "simulator_status",
    srcs = ["simulator_status.cc"],
    hdrs = ["simulator_status.h"],
    deps = [
        "//systems/framework:system_base",
        "@fmt",
    ],
)

drake_cc_library(
    name = "simulator",
    srcs = ["simulator.cc"],
    hdrs = ["simulator.h"],
    deps = [
        ":runge_kutta2_integrator",
        ":runge_kutta3_integrator",
        ":simulator_status",
        "//common:extract_double",
        "//systems/framework:context",
        "//systems/framework:system",
    ],
)

# === test/ ===

drake_cc_googletest(
    name = "simulator_status_test",
    deps = [
        ":simulator_status",
        "//common:nice_type_name",
    ],
)

drake_cc_googletest(
    name = "simulator_test",
    deps = [
        ":explicit_euler_integrator",
        ":implicit_euler_integrator",
        ":runge_kutta3_integrator",
        ":simulator",
        "//common/test_utilities:expect_throws_message",
        "//common/test_utilities:is_dynamic_castable",
        "//systems/analysis/test_utilities",
        "//systems/primitives",
    ],
)

drake_cc_googletest(
    name = "simulator_denorm_test",
    # Valgrind core does not support the floating point register
    # instructions that this test uses.
    tags = ["no_valgrind_tools"],
    deps = [
        ":simulator",
    ],
)

drake_cc_googletest(
    name = "bogacki_shampine3_integrator_test",
    # If necessary, increase test timeout to 'moderate' when run with Valgrind
    # and/or disable in debug mode.
    deps = [
        ":bogacki_shampine3_integrator",
        ":runge_kutta2_integrator",
        "//common/test_utilities:eigen_matrix_compare",
        "//math:geometric_transform",
        "//multibody/plant",
        "//systems/analysis/test_utilities",
    ],
)

drake_cc_googletest(
    name = "explicit_euler_integrator_test",
    timeout = "moderate",
    deps = [
        ":explicit_euler_integrator",
        "//common/test_utilities:expect_no_throw",
        "//systems/analysis/test_utilities",
    ],
)

drake_cc_googletest(
    name = "implicit_euler_integrator_test",
    timeout = "moderate",
    shard_count = 2,
    # Adding cache invalidation made this take too long with Valgrind.
    # See Drake issue #9261.
    tags = [
        "no_memcheck",
    ],
    deps = [
        ":implicit_euler_integrator",
        "//common/test_utilities:expect_throws_message",
        "//systems/analysis/test_utilities",
        "//systems/plants/spring_mass_system",
    ],
)

drake_cc_googletest(
    name = "implicit_integrator_test",
    deps = [
        ":implicit_integrator",
        "//common/test_utilities:expect_no_throw",
        "//systems/plants/spring_mass_system",
    ],
)

drake_cc_googletest(
    name = "integrator_base_test",
    deps = [
        ":integrator_base",
        "//systems/plants/spring_mass_system",
    ],
)

drake_cc_googletest(
    name = "radau_integrator_test",
    # Note: if memcheck takes too long with Valgrind, disable
    # memcheck (per Drake issue #9621).
    timeout = "moderate",
    shard_count = 2,
    deps = [
        ":implicit_euler_integrator",
        ":radau_integrator",
        "//systems/analysis/test_utilities",
        "//systems/plants/spring_mass_system",
    ],
)

drake_cc_googletest(
    name = "lyapunov_test",
    deps = [
        ":lyapunov",
        "//examples/pendulum:pendulum_plant",
    ],
)

drake_cc_googletest(
    name = "monte_carlo_test",
    deps = [
        ":monte_carlo",
        "//systems/primitives:constant_vector_source",
        "//systems/primitives:pass_through",
        "//systems/primitives:random_source",
    ],
)

drake_cc_googletest(
    name = "runge_kutta2_integrator_test",
    deps = [
        ":runge_kutta2_integrator",
        "//common/test_utilities:eigen_matrix_compare",
        "//systems/analysis/test_utilities",
    ],
)

drake_cc_googletest(
    name = "runge_kutta3_integrator_test",
    # Test timeout increased to not timeout when run with Valgrind.
    timeout = "moderate",
    # This test is prohibitively slow with --compilation_mode=dbg.
    disable_in_compilation_mode_dbg = True,
    deps = [
        ":runge_kutta3_integrator",
        "//common/test_utilities:eigen_matrix_compare",
        "//math:geometric_transform",
        "//multibody/plant",
        "//systems/analysis/test_utilities",
    ],
)

drake_cc_googletest(
    name = "runge_kutta5_integrator_test",
    # Test timeout increased to not timeout when run with Valgrind.
    timeout = "moderate",
    # This test is prohibitively slow with --compilation_mode=dbg.
    disable_in_compilation_mode_dbg = True,
    deps = [
        ":runge_kutta5_integrator",
        "//common/test_utilities:eigen_matrix_compare",
        "//math:geometric_transform",
        "//multibody/plant",
        "//systems/analysis/test_utilities",
    ],
)

drake_cc_googletest(
    name = "semi_explicit_euler_integrator_test",
    timeout = "moderate",
    deps = [
        ":explicit_euler_integrator",
        ":semi_explicit_euler_integrator",
        "//multibody/plant",
        "//systems/analysis/test_utilities",
    ],
)

drake_cc_googletest(
    name = "initial_value_problem_test",
    timeout = "moderate",
    deps = [
        ":initial_value_problem",
        ":runge_kutta2_integrator",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "scalar_initial_value_problem_test",
    deps = [
        ":runge_kutta2_integrator",
        ":scalar_initial_value_problem",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "antiderivative_function_test",
    deps = [
        ":antiderivative_function",
        ":runge_kutta2_integrator",
        "//common/test_utilities:expect_throws_message",
    ],
)

drake_cc_googletest(
    name = "hermitian_dense_output_test",
    deps = [
        ":hermitian_dense_output",
        "//common:autodiff",
        "//common:essential",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_no_throw",
        "//common/test_utilities:expect_throws_message",
        "//common/trajectories:piecewise_polynomial",
    ],
)

drake_cc_googletest(
    name = "scalar_view_dense_output_test",
    deps = [
        ":hermitian_dense_output",
        ":scalar_view_dense_output",
        "//common:autodiff",
        "//common:essential",
        "//common/test_utilities:expect_throws_message",
    ],
)

add_lint_tests()
