# -*- python -*-

load("//tools:drake.bzl", "drake_cc_googletest", "drake_cc_library")
load("//tools/lint:lint.bzl", "add_lint_tests")

package(default_visibility = ["//visibility:public"])

drake_cc_library(
    name = "primitives",
    srcs = [],
    hdrs = [],
    deps = [
        ":adder",
        ":affine_system",
        ":constant_value_source",
        ":constant_vector_source",
        ":demultiplexer",
        ":first_order_low_pass_filter",
        ":gain",
        ":integrator",
        ":linear_system",
        ":matrix_gain",
        ":multiplexer",
        ":pass_through",
        ":piecewise_polynomial_affine_system",
        ":piecewise_polynomial_linear_system",
        ":random_source",
        ":saturation",
        ":signal_log",
        ":signal_logger",
        ":time_varying_data",
        ":trajectory_source",
        ":zero_order_hold",
    ],
)

drake_cc_library(
    name = "adder",
    srcs = ["adder.cc"],
    hdrs = ["adder.h"],
    deps = [
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "affine_system",
    srcs = ["affine_system.cc"],
    hdrs = ["affine_system.h"],
    deps = [
        "//drake/common:symbolic",
        "//drake/common:symbolic_decompose",
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "constant_value_source",
    srcs = ["constant_value_source.cc"],
    hdrs = [
        "constant_value_source.h",
        "constant_value_source-inl.h",
    ],
    deps = [
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "constant_vector_source",
    srcs = ["constant_vector_source.cc"],
    hdrs = ["constant_vector_source.h"],
    deps = [
        "//drake/common:symbolic",
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "demultiplexer",
    srcs = ["demultiplexer.cc"],
    hdrs = ["demultiplexer.h"],
    deps = [
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "first_order_low_pass_filter",
    srcs = ["first_order_low_pass_filter.cc"],
    hdrs = [
        "first_order_low_pass_filter.h",
    ],
    deps = [
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "gain",
    srcs = ["gain.cc"],
    hdrs = [
        "gain.h",
        "gain-inl.h",
    ],
    deps = [
        "//drake/common:unused",
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "integrator",
    srcs = ["integrator.cc"],
    hdrs = ["integrator.h"],
    deps = [
        "//drake/common:unused",
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "linear_system",
    srcs = ["linear_system.cc"],
    hdrs = ["linear_system.h"],
    deps = [
        ":affine_system",
        "//drake/common:symbolic",
        "//drake/common:symbolic_decompose",
        "//drake/math:autodiff",
        "//drake/math:gradient",
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "matrix_gain",
    srcs = ["matrix_gain.cc"],
    hdrs = ["matrix_gain.h"],
    deps = [
        ":linear_system",
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "multiplexer",
    srcs = ["multiplexer.cc"],
    hdrs = ["multiplexer.h"],
    deps = [
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "pass_through",
    srcs = ["pass_through.cc"],
    hdrs = [
        "pass_through.h",
        "pass_through-inl.h",
    ],
    deps = [
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "piecewise_polynomial_affine_system",
    srcs = ["piecewise_polynomial_affine_system.cc"],
    hdrs = ["piecewise_polynomial_affine_system.h"],
    deps = [
        ":affine_system",
        ":time_varying_data",
        "//drake/common:default_scalars",
        "//drake/common:essential",
        "//drake/common:extract_double",
    ],
)

drake_cc_library(
    name = "piecewise_polynomial_linear_system",
    srcs = ["piecewise_polynomial_linear_system.cc"],
    hdrs = ["piecewise_polynomial_linear_system.h"],
    deps = [
        ":linear_system",
        ":time_varying_data",
        "//drake/common:default_scalars",
        "//drake/common:essential",
        "//drake/common:extract_double",
    ],
)

drake_cc_library(
    name = "random_source",
    srcs = ["random_source.cc"],
    hdrs = ["random_source.h"],
    deps = [
        "//drake/common:essential",
        "//drake/common:unused",
        "//drake/systems/framework:diagram_builder",
        "//drake/systems/framework:leaf_system",
    ],
)

drake_cc_library(
    name = "saturation",
    srcs = ["saturation.cc"],
    hdrs = ["saturation.h"],
    deps = [
        "//drake/math:saturate",
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "signal_logger",
    srcs = ["signal_logger.cc"],
    hdrs = ["signal_logger.h"],
    deps = [
        ":signal_log",
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "signal_log",
    srcs = ["signal_log.cc"],
    hdrs = ["signal_log.h"],
    deps = [
        "//drake/common:default_scalars",
        "//drake/common:essential",
    ],
)

drake_cc_library(
    name = "time_varying_data",
    srcs = ["time_varying_data.cc"],
    hdrs = ["time_varying_data.h"],
    deps = [
        "//drake/common:essential",
        "//drake/common/trajectories:piecewise_polynomial_trajectory",
    ],
)

drake_cc_library(
    name = "trajectory_source",
    srcs = ["trajectory_source.cc"],
    hdrs = ["trajectory_source.h"],
    deps = [
        "//drake/common/trajectories:trajectory",
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "zero_order_hold",
    srcs = ["zero_order_hold.cc"],
    hdrs = [
        "zero_order_hold.h",
        "zero_order_hold-inl.h",
    ],
    deps = [
        "//drake/systems/framework",
    ],
)

drake_cc_library(
    name = "sine",
    srcs = ["sine.cc"],
    hdrs = [
        "sine.h",
        "sine-inl.h",
    ],
    deps = [
        "//drake/systems/framework",
    ],
)

# === test/ ===

drake_cc_library(
    name = "affine_linear_test",
    testonly = 1,
    hdrs = ["test/affine_linear_test.h"],
    visibility = ["//visibility:private"],
)

drake_cc_googletest(
    name = "adder_test",
    deps = [
        ":adder",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "affine_system_test",
    deps = [
        ":affine_linear_test",
        ":affine_system",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "constant_value_source_test",
    deps = [
        ":constant_value_source",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities:scalar_conversion",
    ],
)

drake_cc_googletest(
    name = "constant_vector_source_test",
    deps = [
        ":constant_vector_source",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities:my_vector",
    ],
)

drake_cc_googletest(
    name = "demultiplexer_test",
    deps = [
        ":demultiplexer",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "first_order_low_pass_filter_test",
    srcs = [
        "test/first_order_low_pass_filter_test.cc",
    ],
    deps = [
        ":first_order_low_pass_filter",
        "//drake/common:unused",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "gain_test",
    srcs = [
        "test/gain_scalartype_test.cc",
        "test/gain_test.cc",
    ],
    deps = [
        ":gain",
        "//drake/common:symbolic",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "integrator_test",
    deps = [
        ":integrator",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "linear_system_test",
    deps = [
        ":affine_linear_test",
        ":linear_system",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/examples/pendulum:pendulum_plant",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "matrix_gain_test",
    deps = [
        ":affine_linear_test",
        ":matrix_gain",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "multiplexer_test",
    deps = [
        ":multiplexer",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/common/test_utilities:is_dynamic_castable",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "pass_through_test",
    srcs = [
        "test/pass_through_scalartype_test.cc",
        "test/pass_through_test.cc",
    ],
    deps = [
        ":pass_through",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_library(
    name = "piecewise_linear_affine_test",
    testonly = 1,
    hdrs = ["test/piecewise_linear_affine_test.h"],
    visibility = ["//visibility:private"],
)

drake_cc_googletest(
    name = "piecewise_polynomial_affine_system_test",
    deps = [
        ":piecewise_linear_affine_test",
        ":piecewise_polynomial_affine_system",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "piecewise_polynomial_linear_system_test",
    deps = [
        ":piecewise_linear_affine_test",
        ":piecewise_polynomial_linear_system",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "random_source_test",
    deps = [
        ":constant_vector_source",
        ":random_source",
        ":signal_logger",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/analysis",
    ],
)

drake_cc_googletest(
    name = "saturation_test",
    deps = [
        ":saturation",
    ],
)

drake_cc_googletest(
    name = "signal_logger_test",
    deps = [
        ":affine_system",
        ":linear_system",
        ":signal_logger",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/analysis:simulator",
        "//drake/systems/framework",
    ],
)

drake_cc_googletest(
    name = "sine_test",
    srcs = [
        "test/sine_test.cc",
    ],
    deps = [
        ":sine",
        "//drake/common:symbolic",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

drake_cc_googletest(
    name = "time_varying_data_test",
    deps = [
        ":piecewise_linear_affine_test",
        ":time_varying_data",
        "//drake/common/test_utilities:eigen_matrix_compare",
    ],
)

drake_cc_googletest(
    name = "trajectory_source_test",
    deps = [
        ":trajectory_source",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/common/trajectories:piecewise_polynomial_trajectory",
        "//drake/systems/framework",
    ],
)

drake_cc_googletest(
    name = "zero_order_hold_test",
    deps = [
        ":zero_order_hold",
        "//drake/common/test_utilities:eigen_matrix_compare",
        "//drake/systems/framework",
        "//drake/systems/framework/test_utilities",
    ],
)

add_lint_tests()
